<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小黑</title>
  
  <subtitle>这个世界一点都不美好</subtitle>
  <link href="https://xxh1230.online/atom.xml" rel="self"/>
  
  <link href="https://xxh1230.online/"/>
  <updated>2024-07-09T11:21:18.041Z</updated>
  <id>https://xxh1230.online/</id>
  
  <author>
    <name>小小黑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>遗传算法</title>
    <link href="https://xxh1230.online/posts/9cfaa3ca.html"/>
    <id>https://xxh1230.online/posts/9cfaa3ca.html</id>
    <published>2024-07-09T11:10:56.000Z</published>
    <updated>2024-07-09T11:21:18.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一算法流程">一、算法流程</h1><ul><li><p>算法流程图 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202308052102542.png"alt="image.png|450" /></p></li><li><p>编码</p><ul><li>精度的计算 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307252347535.png"alt="image.png|500" /></li><li>编码方式<ul><li>二进制编码</li><li>浮点编码</li><li>符号编码</li></ul></li></ul></li><li><p>解码 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307252353317.png"alt="image.png|525" /></p></li><li><p>选择</p><ul><li>轮盘赌选择</li><li>随机竞争选择</li><li>最佳保留选择</li><li>无回放随机选择</li><li>确定式选择</li><li>无回放余数随机选择</li><li>均匀排序</li><li>最佳保存策略</li><li>随机联赛选择</li><li>排挤选择</li></ul></li><li><p>适应度</p><p>为了使遗传算法有通用性，最大、最小值问题宜统一表达。通常都统一按最大值问题处理，而且<strong>不允许适应度小于0</strong>。 <strong>对于最小值问题，其适应度按下式转换：</strong><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304034.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304455.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304848.png"alt="image.png|475" /></p></li></ul><h1 id="二代码">二、代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gap</span>):  </span><br><span class="line">        self.pop = <span class="literal">None</span>  </span><br><span class="line">        self.max_iter = gap[<span class="string">&#x27;max_iter&#x27;</span>]  </span><br><span class="line">        self.pc = <span class="number">0.8</span>  </span><br><span class="line">        self.pm = <span class="number">0.005</span>  </span><br><span class="line">        self.pop_n = gap[<span class="string">&#x27;pop_n&#x27;</span>]  </span><br><span class="line">        self.pop_d = gap[<span class="string">&#x27;pop_d&#x27;</span>]  </span><br><span class="line">        self.<span class="built_in">len</span> = gap[<span class="string">&#x27;len&#x27;</span>]  </span><br><span class="line">        self.lb = gap[<span class="string">&#x27;lb&#x27;</span>]  </span><br><span class="line">        self.ub = gap[<span class="string">&#x27;ub&#x27;</span>]  </span><br><span class="line">        self.mm = gap[<span class="string">&#x27;mm&#x27;</span>]  </span><br><span class="line">        self.fan = gap[<span class="string">&#x27;gf&#x27;</span>]  </span><br><span class="line">        self.sf = gap[<span class="string">&#x27;sf&#x27;</span>]  </span><br><span class="line">        self.best_i = []  </span><br><span class="line">        self.best_if = []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):  </span><br><span class="line">        n = self.pop_n  </span><br><span class="line">        d = self.pop_d  </span><br><span class="line">        l = self.<span class="built_in">len</span>  </span><br><span class="line">        pop = np.ones((n, d, l))  </span><br><span class="line">        <span class="keyword">for</span> n_ <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> d_ <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                pop[n_, d_] = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, l, dtype=<span class="built_in">int</span>)  </span><br><span class="line">        self.pop = pop  </span><br><span class="line">        <span class="keyword">return</span> self.pop  </span><br><span class="line">  </span><br><span class="line"><span class="meta">    @staticmethod  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b2d</span>(<span class="params">pop_b, lb, ub</span>):  </span><br><span class="line">        <span class="keyword">if</span> np.ndim(pop_b) == <span class="number">2</span>:  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">        <span class="keyword">elif</span> np.ndim(pop_b) == <span class="number">1</span>:  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">  </span><br><span class="line">        n = pop_b.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop_b.shape[<span class="number">1</span>]  </span><br><span class="line">        l = pop_b.shape[<span class="number">2</span>]  </span><br><span class="line">        temp_1 = np.zeros((n, d))  </span><br><span class="line">        <span class="keyword">for</span> n_ <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> d_ <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                <span class="keyword">for</span> l_ <span class="keyword">in</span> <span class="built_in">range</span>(l):  </span><br><span class="line">                    temp_1[n_, d_] += pop_b[n_, d_, l_]*np.power(<span class="number">2</span>, l_)  </span><br><span class="line">        temp_2 = (ub - lb)/(np.power(<span class="number">2</span>, l) - <span class="number">1</span>)  </span><br><span class="line">        temp_1 = lb + temp_1*temp_2  </span><br><span class="line">        <span class="keyword">return</span> temp_1  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roulette</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        sort_idx = <span class="literal">None</span>  </span><br><span class="line">        sort_pop = <span class="literal">None</span>  </span><br><span class="line">        sort_fit = <span class="literal">None</span>  </span><br><span class="line">        n = self.pop_n  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            sort_idx = np.argsort(fitness)  </span><br><span class="line">            sort_pop = pop[sort_idx]  </span><br><span class="line">            sort_fit = fitness[sort_idx]  </span><br><span class="line">        <span class="keyword">elif</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            sort_idx = np.argsort(-fitness)  </span><br><span class="line">            sort_pop = pop[sort_idx]  </span><br><span class="line">            sort_fit = <span class="number">1</span>/fitness[sort_idx]  </span><br><span class="line">        fit_sum = np.<span class="built_in">sum</span>(sort_fit)  </span><br><span class="line">        rou = np.zeros(pop.shape[<span class="number">0</span>])  </span><br><span class="line">        rou[<span class="number">0</span>] = sort_fit[<span class="number">0</span>]/fit_sum  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pop.shape[<span class="number">0</span>]):  </span><br><span class="line">            rou[i] = rou[i-<span class="number">1</span>] + sort_fit[i]/fit_sum  </span><br><span class="line">        rou[-<span class="number">1</span>] = <span class="number">1</span>  </span><br><span class="line">        new_idx = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            rand = np.random.uniform()  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pop.shape[<span class="number">0</span>]):  </span><br><span class="line">                <span class="keyword">if</span> rou[j] &gt;= rand:  </span><br><span class="line">                    new_idx.append(j)  </span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line">  </span><br><span class="line">        new_pop = sort_pop[new_idx]  </span><br><span class="line">        new_fit = fitness[sort_idx][new_idx]  </span><br><span class="line">        new_idx = <span class="literal">None</span>  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            new_idx = np.argsort(new_fit)  </span><br><span class="line">        <span class="keyword">elif</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            new_idx = np.argsort(-new_fit)  </span><br><span class="line">        new_pop = new_pop[new_idx]  </span><br><span class="line">        new_fit = new_fit[new_idx]  </span><br><span class="line">        self.best_i.append(self.b2d(new_pop[-<span class="number">1</span>], self.lb, self.ub))  </span><br><span class="line">        self.best_if.append(new_fit[-<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> new_pop, new_fit  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">best</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        new_pop = <span class="literal">None</span>  </span><br><span class="line">        new_fit = <span class="literal">None</span>  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            idx = np.argsort(-fitness)  </span><br><span class="line">            new_pop = pop[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">            new_fit = fitness[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            idx = np.argsort(fitness)  </span><br><span class="line">            new_pop = pop[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">            new_fit = fitness[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">        self.best_i.append(self.b2d(new_pop[-<span class="number">1</span>], self.lb, self.ub))  </span><br><span class="line">        self.best_if.append(new_fit[-<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> new_pop, new_fit  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        <span class="keyword">if</span> self.sf == <span class="string">&#x27;roulette&#x27;</span>:  </span><br><span class="line">            <span class="keyword">return</span> self.roulette(pop, fitness)  </span><br><span class="line">        <span class="keyword">elif</span> self.sf == <span class="string">&#x27;best&#x27;</span>:  </span><br><span class="line">            <span class="keyword">return</span> self.best(pop, fitness)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self, pop</span>):  </span><br><span class="line">        n = pop.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop.shape[<span class="number">1</span>]  </span><br><span class="line">        new_pop = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            idx_1 = np.arange(n)  </span><br><span class="line">            rand = np.random.uniform()  </span><br><span class="line">            <span class="keyword">if</span> rand &lt;= self.pc:  </span><br><span class="line">                idx_1 = np.delete(idx_1, i)  </span><br><span class="line">                k = np.random.choice(idx_1)  </span><br><span class="line">                idx_2 = np.arange(<span class="number">1</span>, self.<span class="built_in">len</span>)  </span><br><span class="line">                ran_p = np.random.choice(idx_2, <span class="number">2</span>)  </span><br><span class="line">                cp1, cp2 = ran_p[<span class="number">0</span>], ran_p[<span class="number">1</span>]  </span><br><span class="line">                cp1, cp2 = np.minimum(cp1, cp2),  np.maximum(cp1, cp2)  </span><br><span class="line">                new_pop1, new_pop2 = [], []  </span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                    temp1, temp2 = [], []  </span><br><span class="line">                    temp1.extend(pop[i, j][<span class="number">0</span>:cp1])  </span><br><span class="line">                    temp1.extend(pop[k, j][cp1:cp2])  </span><br><span class="line">                    temp1.extend(pop[i, j][cp2:])  </span><br><span class="line">                    temp2.extend(pop[k, j][<span class="number">0</span>:cp1])  </span><br><span class="line">                    temp2.extend(pop[i, j][cp1:cp2])  </span><br><span class="line">                    temp2.extend(pop[k, j][cp2:])  </span><br><span class="line">                    new_pop1.append(temp1)  </span><br><span class="line">                    new_pop2.append(temp2)  </span><br><span class="line">                new_pop.append(new_pop1)  </span><br><span class="line">                new_pop.append(new_pop2)  </span><br><span class="line">        new_pop = np.array(new_pop)  </span><br><span class="line">        <span class="keyword">return</span> new_pop  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self, pop</span>):  </span><br><span class="line">        n = pop.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop.shape[<span class="number">1</span>]  </span><br><span class="line">        new_pop = pop.copy()  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                rand = np.random.uniform()  </span><br><span class="line">                <span class="keyword">if</span> rand &lt;= self.pm:  </span><br><span class="line">                    cp = np.random.randint(<span class="number">0</span>, self.<span class="built_in">len</span>)  </span><br><span class="line">                    new_pop[i, j, cp] = <span class="number">1</span> - pop[i, j, cp]  </span><br><span class="line">        <span class="keyword">return</span> new_pop  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  </span><br><span class="line">        pop = self.init()  </span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(self.max_iter),  desc=<span class="string">&quot;GA_Processing&quot;</span>):  </span><br><span class="line">            pop1 = self.crossover(pop)  </span><br><span class="line">            pop2 = self.mutation(pop1)  </span><br><span class="line">            pop2 = np.unique(pop2, axis=<span class="number">0</span>)  </span><br><span class="line">            pop3 = self.b2d(pop2, self.lb, self.ub)  </span><br><span class="line">            fit = self.fan(pop3)  </span><br><span class="line">            pop, fit = self.select(pop2, fit)  </span><br><span class="line">        <span class="keyword">return</span> self.best_i, self.best_if  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fitness</span>(<span class="params">pop</span>):  </span><br><span class="line">    res = np.<span class="built_in">sum</span>(pop**<span class="number">2</span>, axis=<span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    dim = <span class="number">10</span>  </span><br><span class="line">    ga_init = &#123;  </span><br><span class="line">        <span class="string">&#x27;max_iter&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;pop_n&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;pop_d&#x27;</span>: dim,  </span><br><span class="line">        <span class="string">&#x27;len&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;lb&#x27;</span>: -<span class="number">5.12</span> * np.ones(dim),  </span><br><span class="line">        <span class="string">&#x27;ub&#x27;</span>: <span class="number">5.12</span> * np.ones(dim),  </span><br><span class="line">        <span class="string">&#x27;mm&#x27;</span>: [<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>][<span class="number">0</span>],  </span><br><span class="line">        <span class="string">&#x27;gf&#x27;</span>: get_fitness,  </span><br><span class="line">        <span class="string">&#x27;sf&#x27;</span>: [<span class="string">&#x27;roulette&#x27;</span>, <span class="string">&#x27;best&#x27;</span>][<span class="number">0</span>],  </span><br><span class="line">    &#125;  </span><br><span class="line">    ga = GA(ga_init)  </span><br><span class="line">    ga.run()  </span><br><span class="line">    x = np.arange(ga_init[<span class="string">&#x27;max_iter&#x27;</span>])  </span><br><span class="line">    y = ga.best_if  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plt.plot(x, y)  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">遗传算法</summary>
    
    
    
    <category term="优化算法" scheme="https://xxh1230.online/categories/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="优化算法" scheme="https://xxh1230.online/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>github获取生成token的方法</title>
    <link href="https://xxh1230.online/posts/a817377e.html"/>
    <id>https://xxh1230.online/posts/a817377e.html</id>
    <published>2024-07-02T15:35:45.000Z</published>
    <updated>2024-07-16T03:00:58.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录github点击右上角头像选中settings-设置">1.登录GitHub，点击右上角头像，选中Settings (设置)。</h1><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702225954.png" /></p><h1 id="选择-developer-settings-这一项">2. 选择 Developer settings这一项</h1><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230059.png" /></p><h1 id="依次按照下面的选项选择">3. 依次按照下面的选项选择</h1><ol type="1"><li>选择 <strong>Personal access tokens</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230209.png" /></p><ol start="2" type="1"><li>选择 <strong>Tokens (classic)</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230256.png" /></p><ol start="3" type="1"><li>选择 <strong>Creat new token</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230339.png" /></p><ol start="4" type="1"><li>选择 <strong>NOexpiration(无时间限制)</strong>，下面的选项<strong>全选</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230420.png" /></p><h1id="生成的token只显示一次需要保存好">4.生成的token只显示一次需要保存好</h1>]]></content>
    
    
    <summary type="html">github获取生成token的方法</summary>
    
    
    
    <category term="Github" scheme="https://xxh1230.online/categories/Github/"/>
    
    
    <category term="Git" scheme="https://xxh1230.online/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Git将项目上传到Github</title>
    <link href="https://xxh1230.online/posts/51f321c6.html"/>
    <id>https://xxh1230.online/posts/51f321c6.html</id>
    <published>2024-07-02T15:35:45.000Z</published>
    <updated>2024-07-03T04:25:47.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-的安装">1. Git 的安装</h1><ul><li>git 下载地址：<a href="https://git-scm.com/">Git(git-scm.com)</a></li><li>安装的时候除了选择安装位置，其他的都点击 next # 2. 上传 GIithub</li></ul><p>上传 Github 的方法有两种，一种是通过 Https 协议另一种是通过 SSH密钥，两种方法略有差别。参考教学视频：<ahref="https://www.bilibili.com/video/BV1ZP4y1H78r/?buvid=XX877108FAAB05B2E71B7A3245E713F3F0BA8&amp;from_spmid=search.search-result.0.0&amp;is_story_h5=false&amp;mid=ZyPMggz0zboUuglZBilcvg%3D%3D&amp;p=1&amp;plat_id=114&amp;share_from=ugc&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=f0a43c90-8569-4691-94b8-a393d3feeb76&amp;share_source=COPY&amp;share_tag=s_i&amp;spmid=united.player-video-detail.0.0&amp;timestamp=1719970637&amp;unique_k=kdgl29u&amp;up_id=191063080&amp;vd_source=c773d6069c8b3deddb846c9cde19f4b1">用Git上传代码_哔哩哔哩_bilibili</a>。视频中的分支为 <code>master</code> 现在 GitHub 默认的是<code>main</code> 分支，我们需要略微改一下命令。</p><h2 id="通过-https-协议首次上传">通过 Https 协议首次上传</h2><ol type="1"><li><p>通过 Https 协议我们最好是要在 Github 上新建一个 token具体方法参考：[[如何获取github的token]]</p></li><li><p>新建仓库</p></li><li><p>在需要上传的文件夹右键选择 <strong>Open Git Bashhere</strong></p></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702231512.png"alt="image.png|300" /> 4. 在 Git 窗口执行下面命令</p><ul><li>完成最后一个命令后会弹出一个窗口，我们选择 token登录，之后就可以完成上传了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 main 分支，现在 Github 默认使用 main</span></span><br><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交文件</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置远程仓库 URL, 这里选择你仓库的 URL</span></span><br><span class="line">git remote add origin https://github.com/your-username/your-repository.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首次推送，一次推送选择这个</span></span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非首次推送，非推送选择这个</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送，如果本地仓库比较旧会报错不然上传，强推送选择这个</span></span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><h2 id="通过-ssh-协议-首次上传">通过 SSH 协议 首次上传</h2><ol type="1"><li><p>通过 SSH 协议方法我们需要新建一个 SSH 密钥 参考方法：<ahref="https://blog.csdn.net/fish_skyyyy/article/details/119213714">如何生成SSHkey？_ssh key生成-CSDN博客</a></p></li><li><p>通过 SSH密钥使用下面的命令，最后上传不会弹出登录界面可以直接上传。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 main 分支，现在 Github 默认使用 main</span></span><br><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交文件</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置远程仓库 SSH</span></span><br><span class="line">git remote add origin git@github.com:your-username/your-repository.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首次推送，一次推送选择这个</span></span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非首次推送，非推送选择这个</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送，如果本地仓库比较旧会报错不然上传，强推送选择这个</span></span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><h2 id="非首次上传">非首次上传</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;second commit&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h1 id="常见问题">常见问题</h1><p><strong>1. 如果电脑上已经有一个 Github 账户的 SSH密钥了，可以使用这个密钥来生成另一个 Github 账户的 SSH密钥吗？</strong></p><ul><li><p>答案是不行，需要重新生成一对密钥文件，我们需要将原来的密钥文件保存下来，不然新生成的密钥文件会将原来的文件覆盖。当然可以选择保存到另外的位置。</p></li><li><p>如果需要同一台电脑管理多个 GitHub 账户具体方法参考:<ahref="https://kangzhiheng.top/post/11-more-ssh-in-one-laptop/">多个SSH密钥并存且连接到Github| adoredee (kangzhiheng.top)</a> 。</p></li><li><p>简单总结一下上面的这个网页的操作，</p><ol type="1"><li>生成两个 GitHub 账户的密钥然后分别保存下来，公钥用于配置 SSH,私钥就是电脑的身份证，连接不同 GitHub账户就需要不同的身份证。常用的账户的 <code>id_rsa</code> 重命名为<code>id_rsa_normal_github</code> ，不常用的账户的 <code>id_rsa</code>重命名为 <code>id_rsa_hugo_github</code> ，更多的账户的<code>id_rsa</code> 取不同的名称就行。</li><li>将两个密钥保存在路径 <code>用户名/.ssh/</code> 下，并新建一个<code>config</code> 文件，输入以下内容。第二个 <code>Host</code> 后面的<code>xxx</code> 自己取名，记得保存以下。</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_normal_github</span><br><span class="line">Host xxx.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_hugo_github</span><br></pre></td></tr></table></figure></p><ol start="3" type="1"><li>验证,打开 <code>cmd</code> 输入下面命令，如果提示成功就可以了</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@xxx.github.com</span><br></pre></td></tr></table></figure></p><ol start="4" type="1"><li>常用的 GitHub 账户上传没有任何改变，不常用的 GitHub 账户在<code>git init</code> 并在完成除了推送的命令后，项目里会生成<code>.git</code> 文件夹，如果没有打开显示隐藏文件夹。将里面的<code>config</code> 文件进行修改。将 <code>[remote "origin"]</code> 下的<code>url</code> 后面加上你的 <code>xxx.</code> 其他的不用该。</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">url = git@xxx.github.com:your-username/your-repository.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p><ol start="5" type="1"><li>上传</li></ol></li></ul><p><strong>2. 已经采用 <code>masrer</code> 分支上传了，怎么改回<code>main</code> 分支。</strong></p><ul><li>可以删除仓库，重新上传一次</li><li>也可以采用下面的方法改为 <code>main</code> 分支，就是需要新建一个<code>main</code> 分支，其他的不变。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前所在分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前分支不是 `main` 分支且 `main` 分支存在，切换到 `main` 分支</span></span><br><span class="line">git checkout main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前分支不是 `main` 分支且 `main` 分支不存在</span></span><br><span class="line">git checkout -b main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><strong>3.如果自己在远程仓库进行过修改，而本地仓库未进行修改，这时上传会出现错误，不让上传。</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/blog/img/xxh/20240703095932.png"alt="image.png|300" /><figcaption aria-hidden="true">image.png|300</figcaption></figure><ul><li>一种方法是本地仓库同步远程的仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.将远程仓库修改的内容更新到本地仓库:</span></span><br><span class="line">git pull --rebase origin main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.再进行提交</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><ul><li>另一种方法是强制上传</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如何使用Git将项目上传到Github</summary>
    
    
    
    <category term="Github" scheme="https://xxh1230.online/categories/Github/"/>
    
    
    <category term="Git" scheme="https://xxh1230.online/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo中Latex公式的使用</title>
    <link href="https://xxh1230.online/posts/4232bc1d.html"/>
    <id>https://xxh1230.online/posts/4232bc1d.html</id>
    <published>2024-06-25T17:18:00.000Z</published>
    <updated>2024-07-03T04:36:28.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一解决方法">一、解决方法</h1><p>在 hexo 中使用 Latex公式会报错，无法渲染。针对这个问题可以用下面的方法解决。</p><ol type="1"><li>卸载<code>npm un hexo-renderer-marked</code> 与安装<code>hexo-renderer-pandoc</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked</span><br><span class="line">npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>配置主题文件配置文件下的 <code>mathjax</code> 设置，我的是主题配置文件是 <code>_config.butterfly.yml</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MathJax</span></span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>安装 <code>pandoc</code> 不然 <code>hexo g</code> 会报<code>pandoc exited with code null</code> 的错误</li></ol><p>下载链接：<a class="btn-beautify green larger" href="https://github.com/jgm/pandoc/releases/tag/3.2.1'"   title="pandoc"><i class="far fa-hand-point-right"></i><span>pandoc</span></a></p><ol start="4" type="1"><li>将 <code>pandoc</code> 添加到环境变量中，然后重启电脑。</li></ol><p>打开命令行窗口，输入以下命令。来检验是否安装成功，安装成功会有下面的版本信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -v</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-09%20192047.png" /></p><ol start="5" type="1"><li>创建文档， 输入公式，运行命令 hexo 命令</li></ol><h1 id="二latex公式的使用">二、Latex公式的使用</h1><p><strong>Latex 公式学习网站：</strong><a class="btn-beautify green larger" href="https://www.cnblogs.com/1024th/p/11623258.html'"   title="Latex公式手册"><i class="far fa-hand-point-right"></i><span>Latex公式手册</span></a></p><p><strong>Latex 公式使用格式：</strong></p><ul><li><p>行内公式 <span class="math inline">\(X_i\)</span> 行内公式</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">行内公式 $X_i$ 行内公式</span><br></pre></td></tr></table></figure></p></li><li><p>行公式</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$ y = f(x)$$</span></span><br></pre></td></tr></table></figure></p></li></ul><p><span class="math display">\[y = f(x)\]</span></p>]]></content>
    
    
    <summary type="html">Latex公式的使用</summary>
    
    
    
    <category term="hexo" scheme="https://xxh1230.online/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://xxh1230.online/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>差分进化算法</title>
    <link href="https://xxh1230.online/posts/c8d982b8.html"/>
    <id>https://xxh1230.online/posts/c8d982b8.html</id>
    <published>2024-06-25T12:31:08.000Z</published>
    <updated>2024-07-16T03:01:59.348Z</updated>
    
    <content type="html"><![CDATA[<p>参考原文：<a class="btn-beautify green larger" href="https://blog.csdn.net/myf_666/article/details/129278838"   title="差分进化算法"><i class="far fa-hand-point-right"></i><span>差分进化算法</span></a></p><h1 id="一差分进化算法de原理">一、差分进化算法（DE）原理</h1><p>差分进化算法同其它进化算法一样（尤其和遗传算法，具有很强的相似性），差分进化算法，也是对候选解的种群进行操作，具体地说，它包含了三个主要的操作：</p><p>变异：通过把种群中两个成员之间的加权差向量加到第三个成员上来产生新的参数向量，该操作称为“变异”；交叉：将变异向量的参数与另外预先确定的目标向量参数按照一定的规则混合来产生试验向量。选择：如果试验向量的目标函数比目标向量的代价函数低，那么就利用试验向量替换掉目标向量。种群中所有成成员必须要当作目标向量进行一次这样的操作，以便在下一代中出现相同个数的竞争者。在进化过程中，对每一代的向量都进行评价，记录最小化过程。</p><p>这种利用随机偏差扰动产生新个体的方式，可以获得一个收敛性非常好的结果，引导搜索过程向全局最优解逼近。</p><h1 id="二算法具体流程">二、算法具体流程</h1><h2 id="整体流程">整体流程</h2><ol type="1"><li>初始化</li><li>变异</li><li>交叉</li><li>选择</li><li>边界条件处理、</li></ol><p>算法流程图如下：</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625182316.png"alt="|500" /><figcaption aria-hidden="true">|500</figcaption></figure><h3 id="初始化">初始化</h3><p>初始化就是给种群中的每个个体的每个维度进行一个赋值，实现一个初始化的操作。每个个体表示如下：</p><p><span class="math display">\[x_{i,G}\left(i=1,2,...,NP\right)\]</span> 其中，<span class="math inline">\(i\)</span>表示个体在种群中的编号，<span class="math inline">\(G\)</span>表示进化代数，<span class="math inline">\(NP\)</span>代表种群规模。在差分进化算法中，一般假定所有随机初始化种群均符合均匀分布。设个体<span class="math inline">\(x_{i,G}\)</span> 第 <spanclass="math inline">\(j\)</span> 维的界限为: <spanclass="math display">\[x_{j}^{L}&lt;x_{j}&lt;x_{j}^{U}\]</span>所有个体通过下式生产： <span class="math display">\[x_{j i,0}\,=\,r a nd[0,1]\,\times\,\left(x_{j}^{(U)}\,-\,x_{j}^{(L)}\right)+x_{j}^{L},j=1,2,...,D\]</span></p><p>其中 <span class="math inline">\(rand[0,1]\)</span> 表示在 <spanclass="math inline">\([0,1]\)</span>之间的实数。当然，均匀产生随机数只是一种可能，如果可以预先知道解的概率分布，就不需要均匀产生，可以通过其分布规律，产生涵盖更多信息的解，进而提高重建效果。</p><h3 id="变异">变异</h3><p>产生完初始种群后，进行变异操作，对于每个目标 <spanclass="math inline">\(x_{i,G}(i=1,2,...,N P)\)</span>基本差分进化算法的变异向量产生方式如下： <spanclass="math display">\[v_{i,G+1}=x_{r_{1},G}+F\cdot(x_{r_{2},G}-x_{r_{3},G})\]</span>其中，要求随机选择的个体序号 <spanclass="math inline">\(r_{1}\,,r_{2}\,,r_{3}\)</span>互不相同，且与目标向量序号 <span class="math inline">\(i\)</span>也不能相同，所以必须满足 <span class="math inline">\(N P&gt;4\)</span>； 变异算子 <span class="math inline">\(F\in[0,2]\)</span>是一个实常数因数，它控制偏差变量的缩放。</p><h3 id="交叉">交叉</h3><p>这一步进行变异向量和目标向量的总体交叉。为了增加干扰参数向量的多样性，引入交叉操作，测试向量变为：</p><p><spanclass="math display">\[u_{i,G+1}\,=\,\left(u_{1_{i},G+1},\,u_{2_{i},G+1}\,,\ldots,\,u_{D_{i},G+1}\right)\]</span><span class="math display">\[u_{j i,G+1} =\begin{cases}v_{j i,G+1} , &amp; \text{if randb(j) &lt;= CR or j = rnbr(i)}\\x_{j i,G+1}, &amp; \text{x!= 0 and j != rnbr(i)}\\\end{cases}\]</span> 其中, <span class="math inline">\(randb(j)\)</span> 表示产生<span class="math inline">\([0,1]\)</span>之间的随机数发生器的第j个估计值。<spanclass="math inline">\(rnbr(i)\in\left(1,2,\ldots,D\right)\)</span>示一个随机选择的序列。，用它来确保 <spanclass="math inline">\(u_{1_{i},G+1}\)</span> 至少从 <spanclass="math inline">\(v_{1_{i},G+1}\)</span> 获得一个参数; <spanclass="math inline">\(CR\)</span>表示交叉算子（表示一个概率），其取值范围为 <spanclass="math inline">\([0,1]\)</span> 。</p><h3 id="选择">选择</h3><p>经过上面的变异、交叉操作，差分进化算法按照贪婪准则将试验向量与当前种群中的目标向量<span class="math inline">\(x_{i,G}\)</span>进行比较，在下一代中，如果目标向量好，就选择目标向量，如果试验向量好，就选择试验向量。值得注意的实，试验向量只与目标向量进行个体比较，而不是现有种群中的所有个体（锦标赛选择）。</p><h3 id="边界条件的处理">边界条件的处理</h3><p>如果在变异过程中，我们编译出了可行域外的解， 即 <spanclass="math inline">\(u_{ji,G+1}&lt; x_{j}^{L}\)</span> 或 <spanclass="math inline">\(u_{j i,G+1}&gt;x_{j}^{U}\)</span> 那么 <spanclass="math display">\[u_{j i,G+1}=r a nd[0,1]\cdot(x_{j}^{(U)}-x_{j}^{(L)})+x_{j}^{(L)}\qquad\quad(i=1,2,...,NP;j=1,2,...,D)\]</span></p><h1 id="相关参数">相关参数</h1><h2 id="种群数量-np">种群数量 NP</h2><p><span class="math inline">\(NP\)</span>越大，说明个体越多，种群多样性越好，寻优能力也越强，但同时也增加了计算难度。所以<span class="math inline">\(NP\)</span> 不能无限取大。一般取 <spanclass="math inline">\(5 D ≤ N P ≤ 10 D\)</span> 之间，必须满足的是 <spanclass="math inline">\(N P ≥ 4\)</span>，因为只有 <spanclass="math inline">\(NP\)</span> 大于4，才能有空间进行变异和杂交。</p><h2 id="变异算子-f">变异算子 F</h2><p>变异算子 <span class="math inline">\(F ∈ [ 0 , 2 ]\)</span>是一个实常数因数，它决定偏差向量的放大比例。 -如果太小，容易“早熟”，即陷入局部最优解。 - 如果太大，不容易“收敛”。当<span class="math inline">\(F &gt; 1\)</span>的时候，算法收敛到最优值变得十分困难，因为差分向量的扰动已经大于两个个体之间的距离了。</p><p>目前研究表面标明，<span class="math inline">\(F\)</span> 小于 <spanclass="math inline">\(0.4\)</span> 和 <spanclass="math inline">\(F\)</span> 大于 <spanclass="math inline">\(1\)</span> 的值仅偶尔有效，通常，<spanclass="math inline">\(F = 0.5\)</span>是一个较好的初始选择。如果种群收敛过早，那么应该增大 <spanclass="math inline">\(F\)</span> 或 <spanclass="math inline">\(NP\)</span>。</p><h2 id="交叉算子-cr">交叉算子 CR</h2><p>一个 <span class="math inline">\([0,1]\)</span>之间的数，它控制着试验向量参数来自于随机选择的目标向量，还是变异向量。<spanclass="math inline">\(CR\)</span> 越大，发生交叉的可能性就越大，<spanclass="math inline">\(CR\)</span> 的一个较好的选择实 <spanclass="math inline">\(0.1\)</span>，但较大的 <spanclass="math inline">\(CR\)</span> 通常会加速收敛。可以先尝试 <spanclass="math inline">\(CR = 0.9\)</span> 或 <spanclass="math inline">\(CR=1.0\)</span>，查看是否可以快速产生一个快速解。</p><h2 id="最大进化代数-g">最大进化代数 G</h2><p>最大进化代数 <span class="math inline">\(G\)</span>表示差分进化算法运行结束的一个参数，最多更新 <spanclass="math inline">\(G\)</span>代后就结束了，并将当前群体中最佳个体作为最优解输出。一般，<spanclass="math inline">\(100 ≤ G ≤ 500\)</span> 。</p><h2 id="终止条件">终止条件</h2><p>除最大进化代数可作为差分进化算法的终止条件外，还可以增加其他判定准则。一般当目标函数值小于阈值时程序终止，阈值常选为<span class="math inline">\(10^{-6}\)</span> 。</p><h1 id="三一些改进方法">三、一些改进方法</h1><h2 id="变异算子-f-1">变异算子 F</h2><p>对于变异算子 <span class="math inline">\(F\)</span>的设置，可以采用如下模型：</p><p><span class="math display">\[\lambda=e^{1-\frac{G_m}{G_m+1-G}}, F=F_0 \times 2^\lambda\]</span></p><p>其中 <span class="math inline">\(G_m\)</span> 是最大迭代次数， <spanclass="math inline">\(G\)</span>是当前迭代次数。这个模型的好处是，在初期 <spanclass="math inline">\(F\)</span> 具有较大值为 <spanclass="math inline">\(2F_0\)</span>，可以保持个体多样性，避免早熟，在后期变异率接近 <spanclass="math inline">\(F_0\)</span>保留优良信息，避免最优解遭到破坏，增加全局最优解的概率。</p><h2 id="变异算子-f-2">变异算子 F</h2><p>还可以设计随机范围的交叉算子，比如 <spanclass="math inline">\(CR:0.5×[1+rand(0,1)]\)</span>，这样交叉算子的平均值维持在 <span class="math inline">\(0.75\)</span>附近，考虑到了差分向量放大中可能的随机变化，有助于在搜索过程中保持群体多样性。</p><h1 id="四python-代码">四、Python 代码</h1><ul><li>解函数 <spanclass="math inline">\(f(x)=\sum_{i=1}^{n}x_{i}^{2}\left(-20\leq x_{i}\\leq20\right)\)</span> 的最小值，其中个体 <spanclass="math inline">\(x\)</span> 的维数 <spanclass="math inline">\(n=10\)</span> 。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DE</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param_de</span>):  </span><br><span class="line">        self.NP = param_de[<span class="string">&#x27;NP&#x27;</span>]  </span><br><span class="line">        self.size = param_de[<span class="string">&#x27;size&#x27;</span>]  </span><br><span class="line">        self.xMin = param_de[<span class="string">&#x27;xMin&#x27;</span>]  </span><br><span class="line">        self.xMax = param_de[<span class="string">&#x27;xMax&#x27;</span>]  </span><br><span class="line">        self.F = param_de[<span class="string">&#x27;F&#x27;</span>]  </span><br><span class="line">        self.CR = param_de[<span class="string">&#x27;CR&#x27;</span>]  </span><br><span class="line">        self.pop_mut = <span class="literal">None</span>  </span><br><span class="line">        self.pop_cro = <span class="literal">None</span>  </span><br><span class="line">        self.best_archive = []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop_init</span>(<span class="params">self</span>):  </span><br><span class="line">        pop_de = self.xMin + np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (self.NP, self.size)) * (self.xMin - self.xMax)  </span><br><span class="line">        <span class="keyword">return</span> pop_de  </span><br><span class="line">  </span><br><span class="line"><span class="meta">    @staticmethod  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calfitness</span>(<span class="params">pop_de</span>):  </span><br><span class="line">        res = fan(pop_de)  </span><br><span class="line">        <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self, pop_de, f_de</span>):  </span><br><span class="line">        self.pop_mut = np.zeros((self.NP, self.size))  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):  </span><br><span class="line">            index = np.arange(self.NP)  </span><br><span class="line">            index = np.delete(index, i)  </span><br><span class="line">            r1, r2, r3 = pop_de[np.random.choice(index, <span class="number">3</span>, replace=<span class="literal">False</span>)]  </span><br><span class="line">            self.pop_mut[i] = r1 + f_de * (r2 - r3)  </span><br><span class="line">        <span class="keyword">return</span> self.pop_mut  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self, pop_de</span>):  </span><br><span class="line">        self.pop_cro = pop_de.copy()  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):  </span><br><span class="line">            rn = np.random.randint(<span class="number">0</span>, self.size, <span class="number">1</span>)  </span><br><span class="line">            rand = np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">1</span>, self.size))  </span><br><span class="line">            self.pop_cro[i, rn] = self.pop_mut[i, rn]  </span><br><span class="line">            condition = (rand &lt;= self.CR)  </span><br><span class="line">            np.where(condition, self.pop_mut, self.pop_cro)  </span><br><span class="line">        <span class="keyword">return</span> self.pop_cro  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_bound</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.size):  </span><br><span class="line">                condition = (self.pop_cro[i, j] &lt; self.xMin) <span class="keyword">or</span> (self.pop_cro[i, j] &gt; self.xMax)  </span><br><span class="line">                <span class="keyword">if</span> condition:  </span><br><span class="line">                    self.pop_cro[i, j] = self.xMin + np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>) * (self.xMax - self.xMin)  </span><br><span class="line">        <span class="keyword">return</span> self.pop_cro  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">selection</span>(<span class="params">self, pop_de, fit</span>):  </span><br><span class="line">        pop_c = self.check_bound()  </span><br><span class="line">        fit_c = self.calfitness(self.pop_cro)  </span><br><span class="line">        condition = fit_c &lt; fit  </span><br><span class="line">        fit[condition] = fit_c[condition]  </span><br><span class="line">        pop_de[condition] = pop_c[condition]  </span><br><span class="line">        index = np.argsort(fit.flatten())  </span><br><span class="line">        best_de = fit[index[<span class="number">0</span>]]  </span><br><span class="line">        self.best_archive.append(best_de)  </span><br><span class="line">        <span class="keyword">return</span> pop_de, fit, best_de  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fan</span>(<span class="params">pop_f</span>):  </span><br><span class="line">    res = np.<span class="built_in">sum</span>(pop_f**<span class="number">2</span>, axis=<span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    param = &#123;  </span><br><span class="line">        <span class="string">&#x27;NP&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;xMin&#x27;</span>: -<span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;xMax&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: <span class="number">0.5</span>,  </span><br><span class="line">        <span class="string">&#x27;CR&#x27;</span>: <span class="number">0.8</span>,  </span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: <span class="number">200</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    G = param[<span class="string">&#x27;G&#x27;</span>]  </span><br><span class="line">    F = param[<span class="string">&#x27;F&#x27;</span>]  </span><br><span class="line">    de = DE(param)  </span><br><span class="line">    pop = de.pop_init()  </span><br><span class="line">    fitness = de.calfitness(pop)  </span><br><span class="line">    <span class="keyword">for</span> gen <span class="keyword">in</span> <span class="built_in">range</span>(G):  </span><br><span class="line">        lamda = np.exp(<span class="number">1</span> - G / (G + <span class="number">1</span> - gen))  </span><br><span class="line">        f = F * np.power(<span class="number">2</span>, lamda)  </span><br><span class="line">        de.mutation(pop, f)  </span><br><span class="line">        de.crossover(pop)  </span><br><span class="line">        pop, fitness, best = de.selection(pop, fitness)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;gen&#125;</span>代最优值&quot;</span>, best)  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plot_x = np.arange(G)  </span><br><span class="line">    plot_y = de.best_archive  </span><br><span class="line">    plt.plot(plot_x, plot_y)  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="结果">结果</h2><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625202858.png"alt="image.png|400" /><figcaption aria-hidden="true">image.png|400</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625202930.png"alt="image.png|475" /><figcaption aria-hidden="true">image.png|475</figcaption></figure>]]></content>
    
    
    <summary type="html">差分进化算法</summary>
    
    
    
    <category term="优化算法" scheme="https://xxh1230.online/categories/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="优化算法" scheme="https://xxh1230.online/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch的安装</title>
    <link href="https://xxh1230.online/posts/77731701.html"/>
    <id>https://xxh1230.online/posts/77731701.html</id>
    <published>2024-06-10T06:53:02.000Z</published>
    <updated>2024-06-10T07:43:16.495Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频：<ahref="https://www.bilibili.com/video/BV1XD421n7yF/?spm_id_from=333.337.search-card.all.click">手把手教你安装Pytorch环境_哔哩哔哩_bilibili</a></p><h1 id="安装-anaconda">安装 Anaconda</h1><ol type="1"><li><p>下载 Anaconda</p><p><a href="https://www.anaconda.com/">Anaconda | The Operating Systemfor AI</a></p></li><li><p>安装</p></li></ol><ul><li><p>Just me 和 All Users，选择 Just me； <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210243.png"alt="image.png|350" /></p></li><li><p>安装路径选 我的安装位置是<code>F:\Support\Anaconda\install</code></p></li><li><p>最后一个分岔口，不勾选第一个方框 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210333.png"alt="image.png" /></p></li></ul><ol start="3" type="1"><li>环境配置</li></ol><ul><li><p>设置里面搜索 <code>环境变量</code> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210510.png"alt="image.png" /></p></li><li><p>点击环境变量 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210653.png"alt="image.png" /></p></li><li><p>选择 Path 点击编辑 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210820.png"alt="image.png" /></p></li><li><p>选择新建，参考下面三个路径把你Anaconda安装文件夹下的三个路径添加到Path 里面，保存后再次打开 Path 里面还有新添加的路径说明成功了。 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210938.png"alt="image.png" /></p></li><li><p>创建下面两个应用快捷方式到桌面 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211500.png"alt="image.png" /></p></li></ul><h1 id="安装-cuda">安装 Cuda</h1><ol type="1"><li>查看 GPU 支持的 Cuda 版本，</li></ol><ul><li>打开 NVIDA 控制面板 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211632.png"alt="image.png" /></li><li>选择帮助-系统信息-组件，可以看到当前支持的 Cuda 版本 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211822.png"alt="image.png" /></li></ul><ol start="2" type="1"><li><p>安装 Cuda，只能选择比自己支持 Cuda 版本低的 Cuda</p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDAToolkit Archive | NVIDIA Developer</a></p></li></ol><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212143.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>下载好之后，选择安装位置进行解压，解压好后，进入下面的安装界面。选择自定义安装仅仅选择4 大项中的 CUDA，并取消 CUDA 中关于 VS 的选项。 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212438.png"alt="image.png" /></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212524.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212538.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ol start="3" type="1"><li>配置环境,类似上面的步骤</li></ol><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212739.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ol start="4" type="1"><li>检查，打开 cmd 窗口输入一下命令，会出现下面的代码说明安装好了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212919.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h1 id="安装-pytorch">安装 pytorch</h1><ol type="1"><li>打开 Anaconda Prompt 下面是相关指令<br /></li></ol><ul><li>清屏</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure><ul><li>base 环境下的操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有的环境</span> </span><br><span class="line">conda env list </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名为“环境名”的虚拟环境，并指定 Python 的版本</span> </span><br><span class="line">conda create -n 环境名 python=3.9 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名为“环境名”的虚拟环境，并指定 Python 的版本与安装路径</span> </span><br><span class="line">conda create --prefix=F:\Project\Anaconda\Pytorch_2_3_0 python=3.10.11 </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除名为“环境名”的虚拟环境</span> </span><br><span class="line">conda remove -n 环境名 --all </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入名为“环境名”的虚拟环境 conda activate 环境名</span> </span><br><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><ul><li>虚拟环境内的操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前环境下的所有库</span> </span><br><span class="line">conda list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装库，并指定版本 1.21.5</span> </span><br><span class="line">pip install numpy==1.21.5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前环境下某个库的版本（以 numpy 为例）径</span> </span><br><span class="line">pip show numpy</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出虚拟环境</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>根据上面指令创建并激活虚拟环境，成功的话如下图所示</li></ol><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609213705.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ol start="3" type="1"><li><p>进入 pytorch 官网根据 Cuda 选择 pytorch版本，复制代码并在虚拟环境里面执行。</p><p>[Previous PyTorch Versions |PyTorch](https://pytorch.org/get-started/previous-versions/</p></li><li><p>验证，依次输入一下代码，如果结果为 <code>True</code>则说明安装成功</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><h1 id="遇到问题">遇到问题</h1><h2 id="菜单栏没有-anaconda">菜单栏没有 Anaconda</h2><ol type="1"><li>进入 Anaconda 安装的文件夹</li><li>在文件夹地址栏输入cmd，进入命令行窗口化可以看到地址为当前的安装地址</li></ol><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609192138.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><ol start="3" type="1"><li>输入以下命令后回车</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\Lib\_nsis.py mkmenus</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Pytorch的安装</summary>
    
    
    
    <category term="python" scheme="https://xxh1230.online/categories/python/"/>
    
    
    <category term="Pytorch" scheme="https://xxh1230.online/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>stm32学习</title>
    <link href="https://xxh1230.online/posts/81737f40.html"/>
    <id>https://xxh1230.online/posts/81737f40.html</id>
    <published>2024-05-20T05:32:02.000Z</published>
    <updated>2024-06-30T11:05:01.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一gpio的使用">一、GPIO的使用</h1><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403212340810.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>RCC配置 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCC_AHBPeriphClockCmd() %外设时钟控制</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE) %GPIOA时钟控制</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE) %AFIO时钟控制</span><br><span class="line">RCC_APB1PeriphClockCmd() %APB1时钟控制</span><br></pre></td></tr></table></figure></li></ul><h2 id="gpio配置">GPIO配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GPIO_DeInit(GPIOA) %GPIO复位</span><br><span class="line">GPIO_AFIODeInit() %AFIO复位</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_Init(GPIOA， GPIO_InitStructure) %GPIO初始化</span><br><span class="line"></span><br><span class="line">GPIO_Mode_Out_PP %推挽输出</span><br><span class="line">GPIO_Mode_Out_OD %开漏输出</span><br><span class="line">GPIO_Mode_AF_OD %复用开漏输出</span><br><span class="line">GPIO_Mode_AF_PP %复用推挽输出</span><br><span class="line"></span><br><span class="line">GPIO_Mode_IPU %上拉输入</span><br><span class="line">GPIO_Mode_IPD %下拉输入</span><br><span class="line">GPIO_Mode_IN_FLOATING %浮空输入</span><br><span class="line">GPIO_Mode_AIN %模拟输入</span><br><span class="line"></span><br><span class="line">GPIO_Pin_8</span><br><span class="line">GPIO_Speed_50MHz</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_8) %GPIO读取单个引脚</span><br><span class="line">GPIO_ReadInputData() %GPIO读取整个引脚</span><br><span class="line">GPIO_ReadOutputDataBit() %GPIO读取单个引脚输出数据</span><br><span class="line">GPIO_ReadOutputData() %GPIO读取整个引脚输出数据</span><br><span class="line"></span><br><span class="line"> %GPIO写入%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_SetBits(GPIOx, GPIO_Pin_8);  %GPIOx写<span class="number">1</span></span><br><span class="line">GPIO_ResetBits(GPIOx, GPIO_Pin_8); %GPIOx写<span class="number">0</span></span><br><span class="line">GPIO_WriteBit(GPIOx, GPIO_Pin_8, Bit_RESET\Bit_SET);%GPIOx写<span class="number">0</span>或<span class="number">1</span></span><br><span class="line">GPIO_Write(GPIOx,  PortVal);</span><br></pre></td></tr></table></figure><h2 id="gpio重映射">GPIO重映射</h2><ul><li>开启AFIO时钟，开启重映射，参数1参考stmf10xx参考手册完全重映射与部分重映射映射的引脚不同，有些引脚有默认功能不能重映射，需要先重映射解除默认功能，下面的调试端口不能同时解除默认功能，使用PA15,PB3,PB4解除JTAG，保留SWD<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403262237276.png"alt="image.png" /></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE) %AFIO时钟控制</span><br><span class="line"><span class="comment">//RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE)</span></span><br><span class="line"><span class="comment">//GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);</span></span><br><span class="line"><span class="comment">//GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span></span><br></pre></td></tr></table></figure><ul><li>初始化重映射之后的GPIO</li></ul><h1 id="二系统中断">二、系统中断</h1><p>NVIC是内部用于中断排序的系统，stm32f10系列有68个可屏蔽中断通道，16个可屏蔽通道</p><h2 id="中断优先级">中断优先级</h2><p>抢占优先级可以进行嵌套，可以不等程序完成，直接让CPU执行中断程序。响应优先级是必须等程序执行完成，在响应中断程序。</p><p>NVIC的中断优先级由优先级寄存器的4位（0~15）决定，这4位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403240038083.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="exti外部中断">EXTI外部中断</h2><p>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序- 支持的触发方式：上升沿/下降沿/双边沿/软件触发 -支持的GPIO口：所有GPIO口，但相同的Pin不能同时触发中断 -通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒 -触发响应方式：中断响应/事件响应（转到外设处理中断）</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403240043103.png"alt="image.png|650" /><figcaption aria-hidden="true">image.png|650</figcaption></figure><p>AFIO只能选择一组GPIO口所以不能同时触发相同Pin的中断。EXTI9-5，EXTI15-10会触发同一个中断函数。20是触发外部中断</p><p>配置步骤 -配置RCC，打开外设时钟,只用打开GPIO与AFIO时钟，EXTI与NVIC已经默认打开 -配置GPIO,设置为输入模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure><ul><li>配置AFIO，选择GPIO口</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_EXTILineConfig( GPIO_PortSourceGPIOC, GPIO_PinSource1);</span><br></pre></td></tr></table></figure><ul><li>配置EXTI，选择边沿触发方式，触发响应方式，中断响应或者事件响应</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXTI_InitTypeDef EXTI_InitStruct;</span><br><span class="line"></span><br><span class="line">EXTI_InitStruct.EXTI_Line = EXTI_Linex;</span><br><span class="line"><span class="comment">// EXTI_Linex 使用的pin口</span></span><br><span class="line">EXTI_InitStruct.EXTI_LineCmd = ENABLE;</span><br><span class="line">EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EXTI_Mode_Interrupt 中断模式</span></span><br><span class="line"><span class="comment">// EXTI_Mode_Event 事件模式</span></span><br><span class="line"></span><br><span class="line">EXTI_InitStruct.EXTI_Trigger = ;</span><br><span class="line"><span class="comment">// EXTI_Trigger_Rising 上升沿触发</span></span><br><span class="line"><span class="comment">// EXTI_Trigger_Falling 下升沿触发</span></span><br><span class="line"><span class="comment">// EXTI_Trigger_Rising_Falling 上下沿都触发</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStruct);</span><br></pre></td></tr></table></figure><ul><li>配置NVIC，设置优先级</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_x); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line"><span class="comment">// NVIC_PriorityGroup_x</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>中断函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//每个通道的中断函数名确定的，从启动文件里找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line1) == SET) <span class="comment">//判断通道标志位是否为1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line14); <span class="comment">//清除标志位</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="定时器">定时器</h1><h2 id="定时器介绍">定时器介绍</h2><p>定时器可以对输入的时钟进行计数，并在计数值达到设定值时触发中断16位计数器、预分频器、自动重装寄存器的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时不仅具备基本的定时中断功能，而且还包含内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等多种功能根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250033831.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>STM32F103C8T6定时器资源：TIM1、TIM2、TIM3、TIM4</p><p><strong>定时器结构图</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250038939.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>基本定时器，接受系统主频时钟72MHZ,经过分频后，上升沿触发计数器计数，当计数器达到自动重装载寄存器的储存值的时候，会触发定时器中断(ui)。预分配器可设为0-65535，对应1-65536分频。基本定时器只能向上触发。</p><p>主模式触发功能是指当计数器达到自动重装载寄存器的储存值的时候，定时器进行事件更新(u),然后映射到触发输出TRGO，TRGO触发DAC,不需要cup参与</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250048214.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>通用/高级定时器有三种计数模式 - 向上计数，从0增加到设定值触发中断 -向下计数，从设定值增减小到0触发中断 -中央对齐模式，从0增加到设定值触发中断，从设定值增减小到0再次触发中断</p><p>ETR可以作为外部时钟输入，被称为外部时钟模式2，经过极性选择，输入滤波等处理后，作为系统时钟，引脚定义可以看哪些引脚有ETR。</p><p>TRGI可以作为外部时钟输入，被称为外部时钟模式1，TRGI的输入有 -ETR，ITR1-ITR3,ITR1-ITR3是来自其他定时器的触发器输出TRG0,从而实现定时器的级联。- CH1, CH2 - TL1FP1, TL1FP2</p><p>下面的功能是输入捕获，输出比较，二者不能同时使用，公用寄存器</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250108037.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>重复次数计数器，实现每隔几个周期再进行更新</li><li>驱动三相无刷电路，互补PWM输出</li><li>刹车输入</li></ul><p><strong>计数器时序图</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250113029.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>CK_PSC 时钟信号</li><li>CNT_EN 计数器使能，为1计数器打开</li><li>CK_CNT 分频后的时钟信号</li><li>计数器寄存器上升沿计数，达到FC重新装载</li><li>预分频寄存器是用户写入的分配系数，当前计数未达到更新值前，就算改变了分频系数，下次计数才会生效。</li></ul><p>计数器计数频率：CK_CNT = CK_PSC / (PSC + 1)<strong>计数器溢出频率：CK_CNT_OV = CK_CNT / (ARR + 1) = (72MHZ / (PSC +1) ) * (ARR + 1)</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250125837.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>无预装值，在计数到33更改计数器重装载值为36，在36处触发中断</li></ul><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250127889.png"alt="image.png" /> -有预装值，在计数到F2时计数器重装载值从F5更改为36，但还是在F5处触发中断，并下个周期更改为36</p><h2 id="定时器中断">定时器中断</h2><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250110503.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li><p>开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_ClearFlag(TIM2, TIM_FLAG_Update); <span class="comment">// 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStruct);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输出中断控制，允许更新中断输出到NVIC <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); <span class="comment">//允许更新中断输出到NVIC</span></span><br><span class="line"><span class="comment">// TIMx</span></span><br><span class="line"><span class="comment">// TIM_IT_Update 更新中断模式</span></span><br><span class="line"><span class="comment">// ENABLE</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置NVIC，打开定时器中断通道，分配优先级 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_x); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line"><span class="comment">// NVIC_PriorityGroup_x</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>使能定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_Cmd(TIMx, ENABLE); <span class="comment">// 使能定时器</span></span><br></pre></td></tr></table></figure></p></li><li><p>定时器中断函数，一般放在使用它的地方而不是在定时器函数中<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="定时器外部时钟">定时器外部时钟</h2><ul><li><p>开启外部GPIO口 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择外部时钟源 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TIM_ETRClockMode2Config(TIM2, TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_Inverted, <span class="number">0x02</span>); <span class="comment">//选择ETR通过外部时钟模式2的输入时钟</span></span><br><span class="line"><span class="comment">//TIMx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_OFF 不分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV2 2分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV4 4分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV8 8分频</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_ExtTRGPolarity_Inverted 上升沿触发</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPolarity_NonInverted 下升沿触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x00 and 0x0F 设置采样频率，几次采样一致后再作为时钟源输入</span></span><br></pre></td></tr></table></figure></p></li><li><p>其他参考上面的</p></li></ul><h2 id="定时器输出pwm">定时器输出PWM</h2><p>### 原理 OC（Output Compare）输出比较 -输出比较可以通过比较CNT(计数器寄存器)与CCR(捕获比较寄存器)寄存器值的关系，来对输出电平进行置1、置0或翻转的操作，用于输出一定频率和占空比的PWM波形- 每个高级定时器和通用定时器都拥有4个输出比较通道 -高级定时器的前3个通道额外拥有死区生成和互补输出的功能</p><p>周期：(ARR+1) * PSC/72000000 频率：72000000/(ARR+1) * PSC <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260025800.png"alt="image.png" /></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260027909.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p><strong>工作流程：</strong>:当CNT&gt;=CCR时oc1ref会输出信号，给CC1P寄存器写0，从上面输出，电平信号不反转，给CCIP寄存器写1，从下面输出，电平信号反转。CC1E控制输出使能，要不要输出。</p><p><strong>输出控制寄存器模式：</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260032829.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>冻结： CNT，CCR无效，PWM输出停止，保持为暂停时刻状态</li><li>CNT=CCR时，置高电平，用途不大，只能一次性使用</li><li>CNT=CCR时，置低电平，用途不大，只能一次性使用</li><li>CNT=CCR时，电平翻转，PWM占空比设置为50%时适合使用</li><li>CNT，CCR无效，PWM输出停止，保持为低电平状态</li><li>CNT，CCR无效，PWM输出停止，保持为高电平状态</li><li>PWM频率和占空比都可调模式，多用向上计数模式</li><li>PWM频率和占空比都可调模式</li></ul><h3 id="代码">代码</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260039769.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260044509.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><p>PWM频率： Freq = CK_PSC / (PSC + 1) / (ARR + 1) PWM占空比： Duty =CCR / (ARR + 1) PWM分辨率： Reso = 1 / (ARR + 1)</p><ul><li><p>开启外部GPIO口为复用推挽输出,看文档哪个口有定时器功能<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB1Periph_TIM1, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line"><span class="comment">//TIM_ClearFlag(TIM2, TIM_FLAG_Update); // 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输出控制寄存器模式 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TIM_OCInitTypeDef TIM_OCInitStucture</span><br><span class="line"><span class="title function_">TIM_OCStructInit</span><span class="params">(&amp;TIM_OCInitStucture)</span>; <span class="comment">//结构体赋默认值，防止使用高级定时器某些变量没赋值</span></span><br><span class="line">TIM_OCInitStucture.TIM_OCMode = TIM_OCMode_PWM1; <span class="comment">//输出比较模式</span></span><br><span class="line"><span class="comment">// TIM_OCMode_PWM1 PWM输出模式1</span></span><br><span class="line">TIM_OCInitStucture.TIM_OCNPolarity = TIM_OCNPolarity_High; <span class="comment">//输出比较极性</span></span><br><span class="line"><span class="comment">// TIM_OCNPolarity_High 输出高电平</span></span><br><span class="line"><span class="comment">// TIM_OCNPolarity_Low 输出低电平</span></span><br><span class="line">TIM_OCInitStucture.TIM_OutputState = TIM_OutputState_Enable; <span class="comment">//输出使能</span></span><br><span class="line"><span class="comment">// TIM_OutputState_Enable 使能</span></span><br><span class="line"><span class="comment">// TIM_OutputState_Disable 不使能</span></span><br><span class="line">TIM_OCInitStucture.TIM_Pulse = ; <span class="comment">//CCR配置</span></span><br><span class="line"><span class="comment">// 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_OC1Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道1初始化，频率相同，占空比不同</span></span><br><span class="line">TIM_OC2Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道2初始化，</span></span><br><span class="line">TIM_OC3Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道3初始化，</span></span><br><span class="line">TIM_OC4Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道4初始化，</span></span><br></pre></td></tr></table></figure></p></li><li><p>使能定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TIM_CtrlPWMOutputs(TIM1, ENABLE); 高级定时器输出使能</span></span><br><span class="line">TIM_Cmd(TIM1, ENABLE); <span class="comment">// 使能定时器</span></span><br></pre></td></tr></table></figure></p></li><li><p>单独配置CCR <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIM_SetCompare1(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare1); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare2(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare2); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare3(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare3); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare4(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare4); <span class="comment">//通道1CCR配置</span></span><br></pre></td></tr></table></figure></p></li></ul><h2 id="定时器输入捕获">定时器输入捕获</h2><p>IC（Input Capture）输入捕获 -输入捕获模式下，当通道输入引脚出现指定电平跳变时，当前CNT的值将被锁存到CCR中，可用于测量PWM波形的频率、占空比、脉冲间隔、电平持续时间等参数- 每个高级定时器和通用定时器都拥有4个输入捕获通道 -可配置为PWMI模式，同时测量频率和占空比 -可配合主从触发模式，实现硬件全自动测量</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270044777.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>测频法适合高频信号</li><li>测周法适合低频信号, <span class="math inline">\(t = 1/f_c\)</span>,<span class="math inline">\(T = N/f_c\)</span> , <spanclass="math inline">\(F = f_c/N\)</span><br /></li><li>中界频率区别高低频频率的零界点</li></ul><h3 id="硬件电路">硬件电路</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270101384.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>ICF配置滤波器的频率以及采样次数</li><li>CC1P配置是上升沿还是下降沿触发，得到TT1P1信号</li><li>CC1S是数据选择器，选择输入数据</li><li>ICPS配置分配器</li><li>CC1E使能输出</li><li>通过主从触发模式可以自动重装载CCR，TI1FP1,可以作为触发源触发定时器的从模式功能，只能在通道1和通道2使用</li><li>这里定时器的通道1与通道2的TI2FP1，TI2FP2可以选择交叉还是直连模式，交叉是通道1的TI2FP1接到通道2的TI1</li></ul><h3 id="主从触发模式">主从触发模式</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270109527.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="代码-1">代码</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270111109.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li><p>开启RCC与GPIO时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB1Periph_TIM1, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>GPIO初始化，输入模式，上拉模式或者浮空输入模式<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line"><span class="comment">//TIM_ClearFlag(TIM2, TIM_FLAG_Update); // 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输入捕获单元 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TIM_ICInitTypeDef TIM_ICInitStructture</span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_1; <span class="comment">//配置输入捕获通道</span></span><br><span class="line"><span class="comment">// TIM_Channel_1 输入通道1</span></span><br><span class="line"><span class="comment">// TIM_Channel_2 输入通道2</span></span><br><span class="line"><span class="comment">// TIM_Channel_3 输入通道3</span></span><br><span class="line"><span class="comment">// TIM_Channel_4 输入通道4</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line"><span class="comment">// 0x0-0xF</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising 上升沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 下降沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_BothEdge 都触发</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPrescaler = TIM_ICPSC_DIV1; <span class="comment">//分频器</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV1 不分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV2 2分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV4 4分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV8 8分频</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICSelection = TIM_ICSelection_DirectTI; <span class="comment">//配置数字选择器，选择是交叉还是直连通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_DirectTI 直连通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_IndirectTI 交叉通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_TRC</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br></pre></td></tr></table></figure></p></li><li><p>选择从模式触发源为TL1FP1 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIM_SelectInputTrigger(TIM3, TIM_TS_TI1FP1);</span><br><span class="line"><span class="comment">//  TIM_TS_ITR0</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR1</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR2</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR3</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI1F_ED</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI1FP1</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI2FP2</span></span><br><span class="line"><span class="comment">//  TIM_TS_ETRF</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置从模式为reset <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Reset);</span><br><span class="line"><span class="comment">// TIM_SlaveMode_Reset  </span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_Gated</span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_Trigger</span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_External1</span></span><br></pre></td></tr></table></figure></p></li><li><p>开启定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_Cmd(TIM3, ENABLE); <span class="comment">// 使能定时器; //内部时钟</span></span><br></pre></td></tr></table></figure></p></li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270115704.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>PWMI是使用了两个通道，通道1采用上升沿触发，通道2采用下降沿触发，下降沿触发时不会清零CNT，CNT计入CCR2，上升沿到来，CNT计入CCR1同时CNT清零。CCR2/CCR1即使占空比。</li></ul><h2 id="定时器编码器接口">定时器编码器接口</h2><p>编码器接口 -编码器接口可接收增量（正交）编码器的信号，根据编码器旋转产生的正交信号脉冲，自动控制CNT自增或自减，从而指示编码器的位置、旋转方向和旋转速度- 每个高级定时器和通用定时器都拥有1个编码器接口 -两个输入引脚借用了输入捕获的通道1和通道2</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280029123.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280033594.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280037254.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li><p>仅在TI1计数是，只在A相的上升沿或者下降沿进行计数，正向都向上计数，反向都向下计数</p></li><li><p>仅在TI2计数是，只在A相的上升沿或者下降沿进行计数</p></li><li><p>TI1和TI2计数是，在A相的上升沿以及B相的上升沿进行计数或者，最常使用的模式</p></li><li><p>当TI1FP1为上升沿有效时，TI1FP2为低电平，CCR计数器加一，对应正转。TI1FP2为高电平，CCR计数器减一，对应反转转。通道1设置为上升沿有效，通道2设置为上升沿有效，</p></li></ul><h3 id="代码-2">代码</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280035185.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>开启GPIO与定时器时钟</li><li>配置GPIO</li><li>配置时基单元，不分频，ACC为65536</li><li>配置输入捕获单元，滤波器与极性</li><li>配置编码器接口模式</li><li>启动定时器</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructture;</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">1</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_ICStructInit(&amp;TIM_ICInitStructture);</span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_1; <span class="comment">//配置输入捕获通道</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br><span class="line"></span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_2; <span class="comment">//配置输入捕获通道</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br><span class="line"></span><br><span class="line">TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);</span><br><span class="line"><span class="comment">// TIMx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI1 TI1计数</span></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI2 TI1计数</span></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI12 TI1与TI2都计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising  通道不反向，配置通道1的触发模式，和配置输入捕获寄存器一样</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 通道反向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 配置通道2的计数模式</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising</span></span><br><span class="line">TIM_Cmd(TIM3, ENABLE); <span class="comment">// 使能定时器; //内部时钟</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="adc">ADC</h1><p>ADC（Analog-Digital Converter）模拟-数字转换器 -ADC可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁- 12位逐次逼近型ADC，1us转换时间输入电压范围：0<sub>3.3V，转换结果范围：0</sub>4095 -18个输入通道，可测量16个外部和2个内部信号源 - 规则组和注入组两个转换单元- 模拟看门狗自动监测输入电压范围，自动监测某些传感器的值，达到条件申请中断，不需要主动if - STM32F103C8T6ADC资源：ADC1、ADC2，10个外部输入通道</p><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302348606.png"alt="image.png" /> ## ADC原理与结构 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302332442.png"alt="image.png|500" /></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302338852.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>规则通道可以一次性可以选择16个需要ADC转换的通道，转换完成后返回对应数字量，但规则通道只有16位，放一个数，需要配合DMA来使用。</li><li>注入通道，一次性可以选择4个需要ADC转换的通道，有4个对应寄存器存放对应值，使用较少</li><li>ADC时钟只能选择6，8分频</li><li>转换完成标志位置1，可以申请中断</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302347603.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302348606.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="四种转换模式">四种转换模式</h3><p>连续转换，单次转换，扫描模式，非扫描模式 -连续转换，扫描模式，选取多个通道，转换每一个通道，标志位置不置1，一直转换-连续转换，非扫描模式，选取一个通道，一直转换通道，然后标志位不置1，一直转换- 单次转换，扫描模式，选取多个通道，只能保留转换的最后一个通道， -单次转换，非扫描模式，选取一个通道，只能转换一个通道，只转换一次</p><h3 id="adc触发方式">ADC触发方式</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302359641.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="数据对齐">数据对齐</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403310000860.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="采样时间">采样时间</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403310002471.png"alt="image.png|550" /><figcaption aria-hidden="true">image.png|550</figcaption></figure><h3 id="校准">校准</h3><ul><li>ADC有一个内置自校准模式。校准可大幅减小因内部电容器组的变化而造成的准精度误差。校准期间，在每个电容器上都会计算出一个误差修正码(数字值)，这个码用于消除在随后的转换中每个电容器上产生的误差<br /></li><li>建议在每次上电后执行一次校准<br /></li><li>启动校准前， ADC必须处于关电状态超过至少两个ADC时钟周期</li></ul><h2 id="代码-3">代码</h2><h3 id="单次转换非扫描模式">单次转换，非扫描模式</h3><ul><li>开启GPIO,ADC的时钟，分频器</li><li>配置GPIO模拟输入</li><li>配置多路开关</li><li>配置ADC转换器</li><li>开启ADC</li><li>ADC校准</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6); </span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line"><span class="comment">// ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2,  ADC_SampleTime_55Cycles5);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; <span class="comment">//连续还是单次转换</span></span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; <span class="comment">//数据对其模式</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; <span class="comment">//外部触发控制源选择</span></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; <span class="comment">//ADC独立工作模式或者双ADC模式</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">1</span>; <span class="comment">//扫描模式下的通道数</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = DISABLE; <span class="comment">//扫描模式还是非扫描模式</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连续转换非扫描模式">连续转换，非扫描模式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;</span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;</span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;</span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;</span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">1</span>;</span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE; <span class="comment">// 启动连续扫描</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="单次转换非扫描模式来实现读取多个传感器">单次转换，非扫描模式来实现读取多个传感器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">uint8_t</span> ADC_Channel)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dma">DMA</h2><h3 id="原理">原理</h3><p>DMA（Direct Memory Access）直接存储器存取 -DMA可以提供外设和存储器或者存储器和存储器之间的高速数据传输，无须CPU干预，节省了CPU的资源- 12个独立可配置的通道： DMA1（7个通道）， DMA2（5个通道）每个通道都支持软件触发和特定的硬件触发<br />- STM32F103C8T6 DMA资源：DMA1（7个通道）</p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012154146.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012158730.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><ul><li>DMA1有7个通道，每个通道可以设置访问地址，但只有一个DMA总线，只能分时复用，如果两个通道访问同一个地址，则会由仲裁器决定哪一个先访问。</li><li>AHB从设备是CUP来配置DMA，主设备能写从设备，从设备不能写主设备，寄存器啥的都是从设备</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012203613.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>数据宽度：字节8位，半字16位，字32位</li><li>传输寄存器：每传输一次后计数器自动减一，减到0，会触发重装，可以设置是否重装</li><li>M2M控制是软件触发还是硬件触发，软件触发多用于从存储器到存储器，不需要等待存储器数据采集到数据</li><li>DMA启动有三个条件 1.启动开关控制，2.传输计数器的值大于0，3.选择触发源</li><li>写传输寄存器时必须先关闭开关控制，在写入传输计数器，最后打开开关控制</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012220213.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>触发源需要开启DMA，用到DMA函数，例如ADC_DMACMD</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012225534.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="代码-4">代码</h3><ul><li>开启RCC时钟</li><li>DMA初始化</li><li>通道使能</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyDMA.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> MYDMA = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MyDMA_Init</span><span class="params">(<span class="type">uint32_t</span> AddrA, <span class="type">uint32_t</span> AddrB, <span class="type">uint16_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">DMA_InitTypeDef DMAy_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); </span><br><span class="line">DMAy_InitStructure.DMA_PeripheralBaseAddr = AddrA; <span class="comment">//起始地址</span></span><br><span class="line">DMAy_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; <span class="comment">//数据宽度</span></span><br><span class="line">DMAy_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable; <span class="comment">//是否自增</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryBaseAddr = AddrB; <span class="comment">//存储器起始地址</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte; <span class="comment">//存储器数据宽度</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; <span class="comment">//存储器是否自增</span></span><br><span class="line">DMAy_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; <span class="comment">//传输方向</span></span><br><span class="line">DMAy_InitStructure.DMA_BufferSize = size; <span class="comment">//传输计数器</span></span><br><span class="line">DMAy_InitStructure.DMA_M2M = DMA_M2M_Enable; <span class="comment">//选择硬件还是软件触发</span></span><br><span class="line">DMAy_InitStructure.DMA_Mode = DMA_Mode_Normal; <span class="comment">//是否启用自动重装</span></span><br><span class="line">DMAy_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级</span></span><br><span class="line"></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMAy_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">MYDMA = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyDMA_Transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">DMA_SetCurrDataCounter(DMA1_Channel1, MYDMA); </span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(DMA_GetFlagStatus(DMA1_FLAG_TC1) == RESET);</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="扫描模式单次转换代码">扫描模式+单次转换代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); </span><br><span class="line"></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6); </span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_1, <span class="number">2</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_2, <span class="number">3</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;</span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;</span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;</span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; <span class="comment">//单次转换模式</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE; <span class="comment">//开启扫描模式</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">3</span>;</span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC1-&gt;DR; <span class="comment">//起始地址</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; <span class="comment">//数据宽度</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; <span class="comment">//是否自增</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value; <span class="comment">//存储器起始地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; <span class="comment">//存储器数据宽度</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; <span class="comment">//存储器是否自增</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; <span class="comment">//传输方向</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = <span class="number">3</span>; <span class="comment">//传输计数器</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; <span class="comment">//是否启用自动重装</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; <span class="comment">//选择硬件还是软件触发</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级</span></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line">ADC_DMACmd(ADC1, ENABLE); <span class="comment">//开启ADC的DMA通道</span></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//主函数需要一直调用</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">DMA_SetCurrDataCounter(DMA1_Channel1, <span class="number">3</span>); </span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(DMA_GetFlagStatus(DMA1_FLAG_TC1) == RESET);</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描模式多次转换代码">扫描模式+多次转换代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//只需要调用初始会函数，需要的时候直接读取AD_Value的值就行</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);<span class="comment">//开启ADC1的时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//开启GPIOA的时钟</span></span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>, ADC_SampleTime_55Cycles5);<span class="comment">//规则组序列1的位置，配置为通道0</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_1, <span class="number">2</span>, ADC_SampleTime_55Cycles5);<span class="comment">//规则组序列2的位置，配置为通道1</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_2, <span class="number">3</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;<span class="comment">//模式，选择独立模式，即单独使用ADC1</span></span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;<span class="comment">//数据对齐，选择右对齐</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;<span class="comment">//外部触发，使用软件触发，不需要外部触发</span></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;<span class="comment">//连续转换，使能，每转换一次规则组序列后立刻开始下一次转换</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE;<span class="comment">//扫描模式，使能，扫描规则组的序列，扫描数量由ADC_NbrOfChannel确定</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">3</span>;<span class="comment">//通道数，为4，扫描规则组的前4个通道</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC1-&gt;DR;<span class="comment">//外设基地址，给定形参AddrA</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;<span class="comment">//外设数据宽度，选择半字，对应16为的ADC数据寄存器</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;<span class="comment">//外设地址自增，选择失能，始终以ADC数据寄存器为源</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value;<span class="comment">//存储器基地址，给定存放AD转换结果的全局数组AD_Value</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;<span class="comment">//存储器数据宽度，选择半字，与源数据宽度对应</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;<span class="comment">//存储器地址自增，选择使能，每次转运后，数组移到下一个位置</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;<span class="comment">//数据传输方向，选择由外设到存储器，ADC数据寄存器转到数组</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = <span class="number">3</span>;<span class="comment">//转运的数据大小（转运次数），与ADC通道数一致</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;<span class="comment">//模式，选择循环模式，与ADC的连续转换一致</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;<span class="comment">//存储器到存储器，选择失能，数据由ADC外设触发转运到存储器</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;<span class="comment">//优先级，选择中等</span></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);<span class="comment">//DMA1的通道1使能</span></span><br><span class="line">ADC_DMACmd(ADC1, ENABLE);<span class="comment">//ADC1触发DMA1的信号使能</span></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);<span class="comment">//固定流程，内部有电路会自动执行校准</span></span><br><span class="line"><span class="keyword">while</span> (ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span> (ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="串口通信">串口通信</h1><h2 id="串口通信相关知识">串口通信相关知识</h2><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022331545.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>全双工是两个设备可以同时通信</li><li>有单独的时钟线是同步的，异步没有时钟线，需要事先约定一个采样频率</li><li>单端信号需要公地，差分信号是两个引脚的电压差来通信的</li></ul><p><strong>电平标准</strong></p><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：<br />- TTL电平：+3.3V或+5V表示1，0V表示0 -RS232电平：-3<sub>-15V表示1，+3</sub>+15V表示0 -RS485电平：两线压差+2<sub>+6V表示1，-2</sub>-6V表示0（差分信号）</p><p><strong>串口参数及时序</strong></p><ul><li>波特率：串口通信的速率 bit/s</li><li>起始位：标志一个数据帧的开始，固定为低电平，因为空闲状态是高电平，发送数据置0表示要发送数据</li><li>数据位：数据帧的有效载荷，1为高电平，0为低电平，低位先行</li><li>校验位：用于数据验证，根据数据位计算得来</li><li>停止位：用于数据帧间隔，固定为高电平，恢复默认高电平状态</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022345311.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="usart串口">USART串口</h2><h3 id="硬件接线图">硬件接线图</h3><ul><li>简单双向串口通信有两根通信线（发送端TX和接收端RX）</li><li>TX与RX要交叉连接 当只需单向的数据传输时，可以只接一根通信线</li><li>当电平标准不一致时，需要加电平转换芯片</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022338084.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><ul><li>USART（Universal Synchronous/AsynchronousReceiver/Transmitter）通用同步/异步收发器</li><li>USART是STM32内部集成的硬件外设，可根据数据寄存器的一个字节数据自动生成数据帧时序，从TX引脚发送出去，也可自动接收RX引脚的数据帧时序，拼接为一个字节数据，存放在数据寄存器里</li><li>自带波特率发生器，最高达4.5Mbits/s</li><li>可配置数据位长度（8/9）、停止位长度（0.5/1/1.5/2）</li><li>可选校验位（无校验/奇校验/偶校验）</li><li>支持同步模式、硬件流控制、DMA、智能卡、IrDA、LIN<br /></li><li>STM32F103C8T6 USART资源： USART1、 USART2、 USART3</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404030005074.png"alt="image.png|600" /><figcaption aria-hidden="true">image.png|600</figcaption></figure><p>中断控制：TXE发送寄存器空标志位，RXNE接受寄存器非空标志位</p><h3 id="发送接受字节程序">发送+接受字节程序</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404030013562.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>发送器和接收器的波特率由波特率寄存器BRR里的DIV确定</li><li>计算公式：波特率 = fPCLK2/1 / (16 * DIV)</li></ul><p><strong>步骤:</strong> - 开启GPIO与USART时钟 -GPIO初始化，复用推挽输出，RX配置为输入 - 配置USART -需要发送直接初始化就行，接受需要配置中断，开启中断，配置优先级</p><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>Serial.c</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//配置波特率</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//硬件流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; <span class="comment">//发送或者接受模式</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//检验位设置</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1; <span class="comment">//停止位</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b; <span class="comment">//</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Byte);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Array[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; String[i]!= <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, String[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">Serial_digit</span><span class="params">(<span class="type">uint16_t</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i--)</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">10</span> * res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Serial_Pow</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span> = <span class="number">1</span>;</span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = <span class="built_in">pow</span> * <span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (Number / <span class="built_in">pow</span> != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> num, num_char;</span><br><span class="line"><span class="type">uint16_t</span> i, j = Serial_Pow(Number);</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span>;</span><br><span class="line"><span class="comment">//printf(&quot;% d\n&quot;, j);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = Serial_digit(j - i - <span class="number">1</span>);</span><br><span class="line">num = Number / <span class="built_in">pow</span>;</span><br><span class="line">Number = Number - num * <span class="built_in">pow</span>;</span><br><span class="line">num_char = num + <span class="number">0x30</span>;</span><br><span class="line">USART_SendData(USART1, num_char);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(ch);</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> String[<span class="number">100</span>];</span><br><span class="line">va_list arg;</span><br><span class="line">__va_start(arg, format);</span><br><span class="line"><span class="built_in">vsprintf</span>(String, format, arg);</span><br><span class="line">__va_end(arg);</span><br><span class="line">Serial_SentString(String);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line">Serial_RxData = USART_ReceiveData(USART1);</span><br><span class="line">Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">USART_ClearFlag(USART1, USART_FLAG_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="发送接受数据包程序">发送+接受数据包程序</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404082336377.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404082336569.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Serial_TxPacket[];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Serial_RxFlag;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendPacket</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> Serial_TxPacket[<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//配置波特率</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//硬件流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; <span class="comment">//发送或者接受模式</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//检验位设置</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1; <span class="comment">//停止位</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b; <span class="comment">//</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Byte);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Array[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; String[i]!= <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, String[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">Serial_digit</span><span class="params">(<span class="type">uint16_t</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i--)</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">10</span> * res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Serial_Pow</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span> = <span class="number">1</span>;</span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = <span class="built_in">pow</span> * <span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (Number / <span class="built_in">pow</span> != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> num, num_char;</span><br><span class="line"><span class="type">uint16_t</span> i, j = Serial_Pow(Number);</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span>;</span><br><span class="line"><span class="comment">//printf(&quot;% d\n&quot;, j);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = Serial_digit(j - i - <span class="number">1</span>);</span><br><span class="line">num = Number / <span class="built_in">pow</span>;</span><br><span class="line">Number = Number - num * <span class="built_in">pow</span>;</span><br><span class="line">num_char = num + <span class="number">0x30</span>;</span><br><span class="line">USART_SendData(USART1, num_char);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(ch);</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> String[<span class="number">100</span>];</span><br><span class="line">va_list arg;</span><br><span class="line">__va_start(arg, format);</span><br><span class="line"><span class="built_in">vsprintf</span>(String, format, arg);</span><br><span class="line">__va_end(arg);</span><br><span class="line">Serial_SentString(String);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">uint8_t Serial_GeRxFlag(void)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if (Serial_RxFlag == 1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Serial_RxFlag = 0;</span></span><br><span class="line"><span class="comment">return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendPacket</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(<span class="number">0xFF</span>);</span><br><span class="line">Serial_SentArray(Serial_TxPacket, <span class="number">4</span>);</span><br><span class="line">Serial_SentByte(<span class="number">0xFE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> RxState = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> PrxState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> RxData = USART_ReceiveData(USART1);</span><br><span class="line"><span class="keyword">switch</span> (RxState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(RxData == <span class="string">&#x27;@&#x27;</span> &amp;&amp; Serial_RxFlag == <span class="number">0</span>) <span class="comment">//这里加入Serial_RxFlag防止传的太快，导致错位</span></span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">1</span>;</span><br><span class="line">PrxState = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> RxState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(RxData == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_RxPacket[PrxState] = RxData;</span><br><span class="line">PrxState ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (RxData == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">0</span>;</span><br><span class="line">Serial_RxPacket[PrxState] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">USART_ClearITPendingBit(USART1, USART_IT_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>main.c</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Serial_Init();</span><br><span class="line">LED_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>, <span class="number">6</span>, <span class="string">&quot;TEXT&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, Serial_RxPacket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LED_ON&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0_ON();</span><br><span class="line">Serial_SentString(<span class="string">&quot;LED_ON_OK\r\n&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LED_ON_OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LED_OFF&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0_OFF();</span><br><span class="line">Serial_SentString(<span class="string">&quot;LED_ON_OFF\r\n&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LED_OFF_OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="iic串口">IIC串口</h2><h3 id="硬件与软件原理">硬件与软件原理</h3><ul><li>I2C（Inter IC Bus）是由Philips公司开发的一种通用数据总线</li><li>两根通信线：SCL（Serial Clock）、SDA（Serial Data）</li><li>同步，半双工</li><li>带数据应答</li><li>支持总线挂载多设备（一主多从、多主多从）</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102225583.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102226397.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102232174.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102233008.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102235494.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102244224.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102248279.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112358611.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="软件i2c代码">软件I2C代码</h3><p><code>MyI2C.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYI2C_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYI2C_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendBit</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendACK</span><span class="params">(<span class="type">uint8_t</span> ACKBit)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveACK</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>MyI2C.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyI2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_W_SCL</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_10, (BitAction)BitValue);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_W_SDA</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_11, (BitAction)BitValue);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_R_SDA</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> BitValue;</span><br><span class="line">BitValue = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_11);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> BitValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 |GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, Bit_SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SDA(<span class="number">0</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(<span class="number">0</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendBit</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(Byte &amp; (<span class="number">0x80</span> &gt;&gt; i));</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint8_t</span> Byte;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(MYI2C_R_SDA()==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">Byte |= (<span class="number">0x80</span> &gt;&gt; i);</span><br><span class="line">&#125;</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendACK</span><span class="params">(<span class="type">uint8_t</span> ACKBit)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(ACKBit);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveACK</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> ACKBit;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">ACKBit = MYI2C_R_SDA();</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ACKBit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="硬件i2c代代码">硬件I2C代代码</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112338186.png"alt="image.png|500" /><figcaption aria-hidden="true">image.png|500</figcaption></figure><ul><li>发送数据时当数据寄存器为空 TEX为1</li><li>接受数据时当数据寄存器为非空 RXNE为1</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112343366.png"alt="image.png|600" /><figcaption aria-hidden="true">image.png|600</figcaption></figure><ul><li>GPIO为复用开漏输出模式</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112347194.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>10位地址帧率头是11110</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112347444.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="代码-5">代码</h3><ul><li>开启I2C外设与GPIO口时钟</li><li>GPIO口初始化为复用开漏输出模型</li><li>I2C配置</li><li>使能IIC</li></ul>]]></content>
    
    
    <summary type="html">stm32学习</summary>
    
    
    
    <category term="stm32" scheme="https://xxh1230.online/categories/stm32/"/>
    
    
    <category term="stm32" scheme="https://xxh1230.online/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>c语言的基础用法</title>
    <link href="https://xxh1230.online/posts/673b0eac.html"/>
    <id>https://xxh1230.online/posts/673b0eac.html</id>
    <published>2024-05-20T05:29:02.000Z</published>
    <updated>2024-06-30T04:41:13.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识c语言">初识C语言</h1><p><a href="https://zhuanlan.zhihu.com/p/405106044">C语言中%d，等等%的用法，和意义 - 知乎 (zhihu.com)</a></p><h2 id="常用语句">常用语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="数据类型">数据类型</h2><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401301753648.png"alt="image.png|600" /><figcaption aria-hidden="true">image.png|600</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="comment">//double a = 0;</span></span><br><span class="line"><span class="comment">//scanf_s(&quot;%lf&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//printf(&quot;a = %lf\n&quot;, a);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long long占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;float占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;double占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021539955.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="变量常量">变量、常量</h2><ul><li><code>static</code> 静态变量，在函数中再次使用时不会重新定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>const</code> 修饰的常变量，不能更改但实际上还是一个变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>#define</code> 定义的标识符常量</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max 10</span></span><br></pre></td></tr></table></figure><ul><li>枚举常量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">male,</span><br><span class="line">female,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">c</span> =</span> female;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><ul><li>字符串的结束标志是一个 <code>\0</code> 的转义字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr1 = %s\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr2 = %s\n&quot;</span>, arr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="操作符">操作符</h2><ul><li><code>b = a++</code> 与<code>b = ++a</code>，第一个是b先等于a，然后a再加2，第二个是a先加2，然后b等于a</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*int a = 0, b = 0, c = 0;*/</span></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = a++;</span><br><span class="line">c = ++a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%d%d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>强制类型转换</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> d = (<span class="type">int</span>)<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><ul><li><code>exp? exp1 : exp2</code> 三目操作符 <code>exp?</code>为真则执行 <code>exp1</code> ,为假则执行 <code>exp2</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> max = a &lt; b ? a + <span class="number">1</span> : b - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><ul><li><code>extern</code> 声明变量或者函数来自其他文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span>  <span class="type">int</span> g_val;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> res = add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>define</code> 与 <code>typedefine</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> g_val 10;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(x, y) (x &gt; y? x : y)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> max = max(a, b);</span><br><span class="line"><span class="type">int</span> res = add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="指针">指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="type">int</span>* p = &amp;a; <span class="comment">//p是指针，存放a的地址</span></span><br><span class="line">*p = <span class="number">20</span>; <span class="comment">//利用指针p，对a进行修改</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体">结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">18</span>];</span><br><span class="line"><span class="type">short</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;法国人&quot;</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, b1.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, b1.price);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>* <span class="title">p</span> =</span> &amp;b1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, (*p).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, (*p).price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, p -&gt; name); <span class="comment">//利用指针p，-&gt; 表示指向变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, p -&gt;price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="分支与循环">分支与循环</h1><h2 id="顺序语句">顺序语句</h2><p>### <code>again: goto again;</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">again:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="选择语句">选择语句</h2><h3 id="if语句">if语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">18</span> &lt;= age &amp;&amp; age &lt; <span class="number">28</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;青年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">28</span> &lt;= age &amp;&amp; age &lt; <span class="number">48</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句">switch语句</h3><p><code>case</code> 是入口，<code>break</code> 是出口，没有<code>break</code> 从符合条件的 <code>case</code>处开始往下执行，<code>switch</code> 的条件只能是整数常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入一个值：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= data &amp;&amp; data &lt;= <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期一\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期二\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期三\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期四\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期五\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期六\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期天\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// case中没出现的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句">循环语句</h2><h3 id="for-循环"><code>for</code> 循环</h3><ul><li>求阶乘的累加</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> num2;</span><br><span class="line"><span class="type">int</span> num3 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> num4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num1; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line">num2 = j + <span class="number">1</span>;</span><br><span class="line">num3 = num3 * num2;</span><br><span class="line">&#125;</span><br><span class="line">num4 = num4 + num3;</span><br><span class="line">num3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num4);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="while-循环"><code>while</code> 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>)<span class="comment">//判断部分  </span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);  </span><br><span class="line">i = i+<span class="number">1</span>;<span class="comment">//调整部分  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-循环"><code>do while</code> 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue-退出本次循环"><code>continue</code> 退出本次循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)  </span><br><span class="line"><span class="keyword">continue</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-退出循环"><code>break</code> 退出循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数">函数</h1><h2 id="定义函数与头文件">定义函数与头文件</h2><ul><li>通常使用 <code>add.c</code> 与 <code>add.h</code>来定义函数与头文件，<code>add.c</code> 来存放函数，<code>add.h</code>来存放函数 函数与变量的声明</li></ul><h3 id="定义头文件">定义头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="使用头文件">使用头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的定义与声明">函数的定义与声明</h3><ul><li>函数定义在主函数后可以不用声明</li><li>外部函数与变量用 <code>extern</code> 来声明</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span>  <span class="type">int</span> g_val;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> k)</span>;</span><br></pre></td></tr></table></figure><h2 id="函数的调用">函数的调用</h2><h3 id="传值调用">传值调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> c;</span><br><span class="line"> c = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = c;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">swap(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传地址调用">传地址调用</h3><ul><li>利用指针可以在函数内部对外部变量进行运算赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> c;</span><br><span class="line"> c = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = c;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">swap(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传递数组 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">putarr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> arr_size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; arr_size; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, arr[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">num_size = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num(<span class="number">0</span>));</span><br><span class="line">putarr(num, num_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的递归">函数的递归</h2><ul><li>函数自己调用自己，可以将复杂问题转变为多个重复的小问题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">string_len</span><span class="params">(<span class="type">char</span>* arr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">if</span> (*arr != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + string_len(arr + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;asdf&quot;</span>;</span><br><span class="line"><span class="type">int</span> num_arr = string_len(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num_arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="数组">数组</h1><h2 id="数组相关性质">数组相关性质</h2><ul><li>字符串数组的长度</li><li>一维数组的地址是连续的，每次加上对应数据类型的字节,地址由低到高</li><li><code>char</code> 类型的数组，定义方式不同，<code>sizeof()</code>的结果不同</li><li>通过函数传递数组，传递的只是首元素的地址，不能在函数里面通过<code>sizeof()</code> 来计算元素个数</li></ul><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402042218556.png"alt="image.png|450" /><figcaption aria-hidden="true">image.png|450</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;12345&quot;</span>; <span class="comment">// 含有 &#x27;/0&#x27;</span></span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;; <span class="comment">// 不含有 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_sizeof: %d\n&quot;</span>, <span class="keyword">sizeof</span>(arr1)); <span class="comment">// sizeof 包括 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_strlen: %d\n&quot;</span>, <span class="built_in">strlen</span>(arr1)); <span class="comment">// strlen 不包括 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_sizeof: %d\n&quot;</span>, <span class="keyword">sizeof</span>(arr2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_strlen: %d\n&quot;</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401310022649.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>数组地址与数组首元素地址 数组 <code>arr</code>是数组首元素地址，<code>sizeof(arr)</code> 除外</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr); <span class="comment">//数组首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]); <span class="comment">//数组首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr); <span class="comment">//整个数组地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401311506129.png"alt="image.png|165" /><figcaption aria-hidden="true">image.png|165</figcaption></figure><h2 id="二维数组">二维数组</h2><ul><li>二维数组的行可以省略，行不可以省略</li><li>二维数组的地址是连续的，每次加上对应数据类型的字节<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h1 id="操作符-1">操作符</h1><h2 id="运算操作符">运算操作符</h2><ul><li><code>&gt;&gt;</code> <strong>只能作用于整数</strong><ul><li>算术右移 右边丢弃，左边补原来的符号位</li><li>逻辑右移 右边丢弃，左边补0</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>  b =  a &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&lt;</code> <strong>只能作用于整数</strong><ul><li>左移操作 左边丢弃，右边补0,相当于乘以2</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>  b =  a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&amp;</code> <strong>按位与，只能作用于整数</strong></p><ul><li>求整数二进制中1的个数</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">int</span>  num, count;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (((num &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>|</code> <strong>按位或，只能作用于整数</strong></p></li><li><p><code>！</code> <strong>按位非，只能作用于整数</strong></p></li><li><p><code>^</code><strong>按位非，只能作用于整数，相异为1，相同为0</strong></p><ul><li>利用异或不创建变量来交换变量</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>  b = <span class="number">5</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = b ^ a;</span><br><span class="line">a = b ^ a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑操作符">逻辑操作符</h2><ul><li><code>&amp;&amp;</code> 逻辑与，<code>a &amp;&amp; b &amp;&amp; c</code>, 若左边为0，则右边不再运算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span> , b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d, d = %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021600462.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li><code>||</code> 逻辑或，<code>a &amp;&amp; b &amp;&amp; c</code>,若左边为1， 则右边不再运算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span> , b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ || ++b || d++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d, d = %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="符合运算符">符合运算符</h2><ul><li><code>+=</code> <code>a += 1</code> 等价于<code>a = a + 1</code></li><li><code>-=</code> <code>a -= 1</code> 等价于<code>a = a - 1</code></li></ul><h2 id="单目操作符">单目操作符</h2><ul><li>只有一个操作数，称为单目操作符</li><li><code>!a</code> 非运算</li><li><code>-a</code> 取反</li><li><code>&amp;a</code> 取地址操作符</li><li><code>*a</code> 解引用操作符，a 为地址找到地址对应的内容</li><li><code>&amp;a</code> 取地址操作符</li><li><code>sizeof(a)</code>计算a的大小，单位为字节，<code>sizeof()内部不参与运算</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">short</span>  s = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">10</span>)); <span class="comment">//结果是2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s); <span class="comment">//结果是0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>~a</code> 按位取反</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">int</span> a = <span class="number">11</span>;</span><br><span class="line">a = a | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//15,或1得1</span></span><br><span class="line">a = a &amp; (~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//11，与0得0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>++</code> <code>a++</code>, 先使用后加加， <code>++a</code>先加加后使用</li><li><code>(int)</code> 强制类型转换</li></ul><h2 id="条件操作符">条件操作符</h2><ul><li><code>exp? exp1 : exp2</code> , <code>exp?</code> 为1则执行<code>exp1</code>, 为0则执行 <code>exp2</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = (a &gt; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逗号表达式">逗号表达式</h2><ul><li><code>a = (exp0, exp1, exp2)</code>从左到右执行，整个表达式的的结果是最后一个表达式的结果</li></ul><h2 id="表达式求值">表达式求值</h2><h3 id="隐式表达式">隐式表达式</h3><ul><li>字符和短整型操作数在运算前会进行整型提升，即将其转换为普通整形，再进行运算。<strong>整型提升是将其首位扩充到整形的4字节</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a, b, c;</span><br><span class="line">a = <span class="number">127</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c); <span class="comment">//-126</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运算过程</strong></p><ul><li>a = 01111111, 整型提升: a = 00000000 00000000 00000000 01111111</li><li>b = 0000011, 整型提升: b = 00000000 00000000 00000000 0000011</li><li>c = a + b = 00000000 00000000 00000000 1000010 = 10000010</li><li>打印时进行运算c = 1000010，整型提升: c = 11111111 11111111 1111111110000010（补码）</li><li>c = 11111111 11111111 11111111 10000001（反码）</li><li>c = 10000000 00000000 00000000 01111110（原码）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">0xb6</span>;</span><br><span class="line"><span class="type">short</span> b = <span class="number">0xb600</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0xb6000000</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0xb6</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0xb600</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0xb6000000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">//c</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(c)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(+c)); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(!c)); <span class="comment">//1,逻辑运算，不需要整型提升</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运算优先级">运算优先级</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021736670.png"alt="image.png|600" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021736307.png"alt="image.png|600" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021737025.png"alt="image.png|600" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">0</span>]; vp &lt; values[<span class="number">5</span>])</span><br><span class="line">&#123;</span><br><span class="line">*vp++ = <span class="number">0</span>; <span class="comment">//++优先级高，vp++先运算，++为后置++，结果为vp再进行++，即*vp = 0,然后vp++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指针-1">指针</h1><ul><li>指针+/- 指针为元素的个数</li><li><code>const int* p = &amp;n</code> 表示 <code>*p</code> 不能被修改，<code>int* const p = &amp;n</code> 表示 <code>p</code> 不能被修改</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m = <span class="number">1</span>, <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = &amp;n；</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> pa = &amp;n；</span><br><span class="line">*p = <span class="number">2</span>; <span class="comment">//提示错误</span></span><br><span class="line">pa = &amp;m; <span class="comment">//提示错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的类型">指针的类型</h2><ul><li>指针大小都是4/8个字节</li><li>指针类型决定了解引用对应内存大小，以及指针+1对应地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;n;</span><br><span class="line"><span class="type">char</span>* pb = &amp;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pa + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pb);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pb + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402022104891.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="野指针">野指针</h2><h3 id="定义">定义</h3><ul><li>指针随机不受控制的情况</li></ul><h3 id="野指针成因">野指针成因</h3><ul><li><p>指针未初始化<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//局部变量指针未初始化，默认为随机值  </span></span><br><span class="line">*p = <span class="number">20</span>;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>指针越界访问</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当指针指向的范围超出数组arr的范围时，p就是野指针</span></span><br><span class="line">*(p++) = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指针指向的空间释放</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">text</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* p = text(); <span class="comment">//a运算完就被释放了 </span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针运算">指针运算</h2><h3 id="指针---整数">指针 +/- 整数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">0</span>]; vp &lt; values[<span class="number">5</span>]) <span class="comment">//给数组所有元素赋0</span></span><br><span class="line">&#123;</span><br><span class="line">*vp++ = <span class="number">0</span>; <span class="comment">//++优先级高，vp++先运算，++为后置++，结果为vp再进行++，即*vp = 0,然后vp++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针---指针">指针 - 指针</h3><ul><li>指针 - 指针是元素的个数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> values[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span> num_values = &amp;values[<span class="number">4</span>] - &amp;values[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num_values);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* start = str;</span><br><span class="line"><span class="type">char</span>* end = str;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*end != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">end++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> end - start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">int</span> num_arr = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num_arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针的关系运算">指针的关系运算</h3><ul><li><p>指针比较大小</p><p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。即只允许大的指针与小的指针比较</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">5</span>]; vp &gt; values[<span class="number">0</span>]) <span class="comment">//给数组所有元素赋0</span></span><br><span class="line">&#123;</span><br><span class="line">*--vp = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针与数组">指针与数组</h2><ul><li>数组名 <code>arr</code> 是数组首元素地址,有两个例外<ul><li><code>&amp;arr</code> 是数组全部数组元素地址</li><li><code>sizeof(arr)</code> 是整个数组的大小</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>); <span class="comment">//加了4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr + <span class="number">1</span>); <span class="comment">//加了40</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402022237654.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="二级指针">二级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;a;</span><br><span class="line"><span class="type">int</span>** ppa = &amp;pa;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *pa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, **ppa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针数组">指针数组</h2><ul><li><code>int* arr[] = &#123;&amp;a, &amp;b, &amp;b&#125;</code>存放指针的数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>* arr[] = &#123;&amp;a, &amp;b, &amp;b&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p == %p\n&quot;</span>, &amp;a, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *arr[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构体-1">结构体</h1><h2 id="结构体的定义">结构体的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">&#125;stu1, stu2, stu3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu_001</span> =</span> &#123;<span class="string">&quot;小红&quot;</span>, <span class="number">15</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;;</span><br><span class="line">student stu_002 = &#123; <span class="string">&quot;小红&quot;</span>, <span class="number">15</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;x&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体的嵌套">结构体的嵌套</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="type">char</span> *pc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;小红&quot;</span>, &#123;<span class="string">&quot;小白&quot;</span>, <span class="number">15</span>, <span class="string">&quot;123456789001&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;, arr&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, stu.ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, stu.s.name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体函数传参">结构体函数传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ptint_struct</span><span class="params">(<span class="keyword">struct</span> stu tmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.tele);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ptint2_struct</span><span class="params">(<span class="keyword">struct</span> stu* tmp)</span> <span class="comment">//这种方法好，节省空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp -&gt; age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; tele);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu_001</span> =</span> &#123; <span class="string">&quot;小白&quot;</span>, <span class="number">15</span>, <span class="string">&quot;123456789001&quot;</span>, <span class="string">&quot;x&quot;</span> &#125;;</span><br><span class="line">ptint1_struct(stu_001);</span><br><span class="line">ptint2_struct(&amp;stu_001);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">c语言的基础用法</summary>
    
    
    
    <category term="c语言" scheme="https://xxh1230.online/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c语言" scheme="https://xxh1230.online/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib绘图</title>
    <link href="https://xxh1230.online/posts/aa11dae6.html"/>
    <id>https://xxh1230.online/posts/aa11dae6.html</id>
    <published>2024-05-19T12:53:02.000Z</published>
    <updated>2024-06-30T11:07:00.065Z</updated>
    
    <content type="html"><![CDATA[<p><ahref="https://zhuanlan.zhihu.com/p/634634968">Python使用Matplotlib库绘制双y轴图形（柱状图+折线图）- 知乎 (zhihu.com)</a></p><h1 id="基础用法基础用法">01基础用法基础用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line">x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">50</span>)  </span><br><span class="line"><span class="comment"># y = 2*x + 1  </span></span><br><span class="line">y = x**<span class="number">2</span>  </span><br><span class="line">plt.plot(x, y) <span class="comment">#绘制图像  </span></span><br><span class="line">plt.show() <span class="comment">#图像展示</span></span><br></pre></td></tr></table></figure><h1 id="figure图像">02figure图像</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>))  </span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="设置坐标轴1">03设置坐标轴1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.xlim((-<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">#设置坐标轴范围  </span></span><br><span class="line">plt.ylim((-<span class="number">1</span>, <span class="number">2</span>))  </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>) <span class="comment">#设置x轴标签  </span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">new_ticks = np.linspace(-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)  </span><br><span class="line">plt.xticks(new_ticks) <span class="comment">#设置坐标轴的角标  </span></span><br><span class="line">plt.yticks([-<span class="number">2</span>, -<span class="number">1.8</span>, -<span class="number">1</span>, <span class="number">1.22</span>, <span class="number">3</span>], [<span class="string">r&#x27;$really\ bad$&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;really good&#x27;</span>]) <span class="comment">#r&#x27;$really\ bad$改变字体，空格前加\  </span></span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="设置坐标轴2">04设置坐标轴2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">ax = plt.gca() <span class="comment"># 创建关于坐标轴的对象  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>) <span class="comment"># 设置坐标轴无色  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&#x27;bottom&#x27;</span>) <span class="comment"># 设置下方为x轴,其实不用改  </span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 设置左方为y轴  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>)) <span class="comment"># &#x27;data&#x27;表示按数值挪动，其后数字代表挪动到Y轴的刻度值，除‘data’以外还有‘outward’和‘axes’  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图例">05图例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line"><span class="comment"># l1 = plt.plot(x, y1, label=&#x27;up&#x27;)  </span></span><br><span class="line"><span class="comment"># l2 = plt.plot(x, y2, color=&#x27;red&#x27;, linewidth=1.0, linestyle=&#x27;--&#x27;, label=&#x27;down&#x27;)  </span></span><br><span class="line"><span class="comment"># plt.legend() #显示图例  </span></span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">l1, = plt.plot(x, y1)  </span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.legend(handles=[l1, l2], labels=[<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>], loc=<span class="string">&#x27;best&#x27;</span>) <span class="comment"># 显示图例 loc=&#x27;best&#x27; 表示图例自动选择最佳位置  </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="添加注解">06添加注解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">l1 = plt.plot(x, y1, label=<span class="string">&#x27;up&#x27;</span>)  </span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;down&#x27;</span>)  </span><br><span class="line">plt.legend() <span class="comment">#显示图例  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标轴  </span></span><br><span class="line">ax = plt.gca()  </span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#添加一个点与一条线  </span></span><br><span class="line">x0 = <span class="number">1</span>  </span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span>  </span><br><span class="line">plt.scatter(x0, y0, <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>) <span class="comment"># 绘制一个点,点的位置，大小，颜色是blue  </span></span><br><span class="line">plt.plot([x0, x0], [y0, <span class="number">0</span>], <span class="string">&#x27;k--&#x27;</span>, lw=<span class="number">1</span>) <span class="comment"># 绘制一条直线，k是黑色，用虚线表示lw=linewidth  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">plt.annotate(<span class="string">&#x27;2X+1=%s&#x27;</span> % y0, xy=(x0, y0), xycoords=<span class="string">&#x27;data&#x27;</span>, xytext=(+<span class="number">30</span>, -<span class="number">30</span>), textcoords=<span class="string">&#x27;offset points&#x27;</span>, fontsize=<span class="number">16</span>, arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&#x27;-&gt;&#x27;</span>, connectionstyle=<span class="string">&#x27;arc3, rad=.2&#x27;</span>))  </span><br><span class="line"><span class="comment">#xycoords=&#x27;data&#x27;表示注释点的坐标以数据的坐标（1，3）为准  </span></span><br><span class="line"><span class="comment">#xytext=(+30, -30)表示注释文本的坐标相对注释点坐标（1，3）的位置  </span></span><br><span class="line"><span class="comment">#textcoords=&#x27;offset points&#x27;表示注释文本的坐标相对注释点坐标（1，3）的位置是以点为单位的，&#x27;offset pixels&#x27;表示以像素为单位  </span></span><br><span class="line"><span class="comment">#fontsize注释字体大小  </span></span><br><span class="line"><span class="comment">#arrowprops=dict(arrowstyle=‘-&gt;’, connectionstyle=‘arc3, rad=.2’)是一个参数，用来指定绘制一个箭头从文本到被注释点的属性12。它是一个字典，包含以下两个键值对：  </span></span><br><span class="line"><span class="comment">#arrowstyle=‘-&gt;‘表示箭头的样式是一个简单的箭头，箭头尾部是一条直线，箭头头部是一个三角形12。你也可以使用其他的箭头样式，比如’-|&gt;’（箭头尾部是一条直线，箭头头部是一个大三角形）或’&lt;-&#x27;（箭头尾部是一个三角形，箭头头部是一条直线）12。  </span></span><br><span class="line"><span class="comment">#connectionstyle=‘arc3, rad=.2’表示箭头的连接方式是一个三次贝塞尔曲线，rad=.2表示曲线的弯曲程度12。你也可以使用其他的连接方式，比如’angle3’（两条直线连接，中间有一个角度）或’bar’（两条直线连接，中间有一段水平或垂直的线段）12。  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">plt.text(-<span class="number">1</span>, <span class="number">10</span>, <span class="string">&#x27;This is the some text&#x27;</span>, fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;y&#x27;</span>&#125;)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="能见度tick">07能见度tick</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">l1 = plt.plot(x, y1, label=<span class="string">&#x27;up&#x27;</span>)  </span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;down&#x27;</span>)  </span><br><span class="line">plt.legend() <span class="comment">#显示图例  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标轴  </span></span><br><span class="line">ax = plt.gca()  </span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标的文本框  </span></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():  </span><br><span class="line">label.set_fontsize(<span class="number">12</span>) <span class="comment"># 设置x轴和y轴上的刻度标签的字体大小为12  </span></span><br><span class="line">label.set_bbox(<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;white&#x27;</span>, edgecolor=<span class="string">&#x27;none&#x27;</span>, alpha=<span class="number">0.7</span>)) <span class="comment">#facecolor是文本框的背景颜色， edgecolor是文本框的边框颜色,alpha是文本框的透明度，取值范围是0到1，0表示完全透明，1表示完全不透明  </span></span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="散点图">08散点图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">n = <span class="number">1024</span>  </span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  </span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  </span><br><span class="line">T = np.arctan2(Y, X)  </span><br><span class="line">  </span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">0.5</span>)  </span><br><span class="line"><span class="comment"># plt.scatter(np.arange(5), np.arange(5))  </span></span><br><span class="line">  </span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="柱状图">09柱状图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">n = <span class="number">12</span>  </span><br><span class="line">x = np.arange(n)  </span><br><span class="line">y1 = (<span class="number">1</span>-x/<span class="built_in">float</span>(n))*np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n) <span class="comment">#0.5 到 1.0 的区间内，均匀地抽取 n 个随机数，然后返回一个长度为 n 的一维数组  </span></span><br><span class="line">y2 = (<span class="number">1</span>-x/<span class="built_in">float</span>(n))*np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)  </span><br><span class="line">plt.bar(x, +y1, facecolor=<span class="string">&#x27;#9999ff&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">plt.bar(x, -y2, facecolor=<span class="string">&#x27;#ff9999&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> x_1, y_1 <span class="keyword">in</span> <span class="built_in">zip</span>(x, y1):  </span><br><span class="line">plt.text(x_1, y_1, <span class="string">&#x27;%.2f&#x27;</span> % y_1, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> x_2, y_2 <span class="keyword">in</span> <span class="built_in">zip</span>(x, y2):  </span><br><span class="line">plt.text(x_2, -y_2-<span class="number">0.12</span>, <span class="string">&#x27;-%.2f&#x27;</span> % y_2, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  </span><br><span class="line"><span class="comment"># plt.xlim(-0.5, n)  </span></span><br><span class="line"><span class="comment"># plt.ylim(-1.25, 1.25)  </span></span><br><span class="line">plt.axis([-<span class="number">0.5</span>, n, -<span class="number">1.25</span>, <span class="number">1.25</span>]) <span class="comment"># 设置 x 轴和 y 轴的显示范围  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="等高线图">10等高线图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):  </span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - y**<span class="number">2</span>)  </span><br><span class="line">n = <span class="number">256</span>  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)  </span><br><span class="line">y = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)  </span><br><span class="line">X, Y = np.meshgrid(x, y)  </span><br><span class="line">plt.contourf(X, Y, f(X, Y), <span class="number">8</span>, alpha=<span class="number">0.75</span>, cmap=plt.cm.hot)  </span><br><span class="line"><span class="comment"># 绘制等高线填充图  </span></span><br><span class="line"><span class="comment"># X, Y：表示网格的坐标点  </span></span><br><span class="line"><span class="comment"># f(X, Y)：表示计算每个坐标点的高度值  </span></span><br><span class="line"><span class="comment"># 8：表示将等高线分成8个级别  </span></span><br><span class="line"><span class="comment"># alpha=0.75：表示填充颜色的透明度为0.75  </span></span><br><span class="line"><span class="comment"># cmap=plt.cm.hot：表示使用&quot;hot&quot;颜色映射，即红-黄-白的渐变色  </span></span><br><span class="line">C = plt.contour(X, Y, f(X, Y), <span class="number">8</span>, colors=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">0.5</span>)  </span><br><span class="line"><span class="comment">#绘制的等高线图  </span></span><br><span class="line"><span class="comment">#8表示您希望绘制的等高线数量  </span></span><br><span class="line">plt.clabel(C, inline=<span class="literal">True</span>, fontsize=<span class="number">10</span>)  </span><br><span class="line"><span class="comment">#添加高度标签  </span></span><br><span class="line"><span class="comment">#C: 这是一个等高线对象，通常是通过plt.contour或plt.contourf函数生成的。  </span></span><br><span class="line"><span class="comment">#inline=True: 表示将标签放置在线的中间位置。如果设置为False，标签将被放置在等高线线条旁边。  </span></span><br><span class="line"><span class="comment">#fontsize=10: 这是标签的字体大小，可以根据需要调整。  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图片lmage">11图片lmage</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">a = np.array([<span class="number">0.31</span>, <span class="number">0.36</span>, <span class="number">0.42</span>, <span class="number">0.36</span>, <span class="number">0.43</span>, <span class="number">0.52</span>, <span class="number">0.42</span>, <span class="number">0.52</span>, <span class="number">0.65</span>]).reshape(<span class="number">3</span>, <span class="number">3</span>)  </span><br><span class="line">plt.imshow(a, interpolation=<span class="string">&#x27;nearest&#x27;</span>, cmap=<span class="string">&#x27;bone&#x27;</span>, origin=<span class="string">&#x27;lower&#x27;</span>)  </span><br><span class="line"><span class="comment">#a是要绘制的矩阵或图像数据。  </span></span><br><span class="line"><span class="comment">#interpolation=&#x27;nearest&#x27;指定使用最近邻插值方法来显示图像。  </span></span><br><span class="line"><span class="comment"># cmap=&#x27;bone&#x27;指定使用&#x27;Bone&#x27;颜色映射来渲染图像，这将使图像呈现黑白效果。  </span></span><br><span class="line"><span class="comment"># origin=&#x27;lower&#x27;表示矩阵的原点在左下角。  </span></span><br><span class="line">plt.colorbar(shrink=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#添加颜色条。  </span></span><br><span class="line"><span class="comment"># shrink=1表示将颜色条的尺寸设置为图像的1/1，使其与图像大小一致。  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="三维数据绘图">12三维数据绘图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import matplotlib  </span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;Qt5Agg&#x27;)  </span></span><br><span class="line">fig = plt.figure()  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">ax = fig.add_axes(Axes3D(fig)) <span class="comment">#Axes3D类创建一个3D坐标轴对象ax，用来绘制3D图形  </span></span><br><span class="line"><span class="comment"># ax = Axes3D(fig) #不能用了  </span></span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line"><span class="comment"># ax = plt.axes(projection=&#x27;3d&#x27;)  </span></span><br><span class="line">x = np.arange(-<span class="number">4</span>, <span class="number">4</span>, <span class="number">0.25</span>)  </span><br><span class="line">y = np.arange(-<span class="number">4</span>, <span class="number">4</span>, <span class="number">0.25</span>)  </span><br><span class="line">X, Y = np.meshgrid(x, y)  </span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)  </span><br><span class="line">Z = np.sin(R)  </span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.get_cmap(<span class="string">&#x27;rainbow&#x27;</span>))  </span><br><span class="line"><span class="comment">#X，Y，Z 是三维数据的网格，分别表示 x、y 和 z 方向的坐标点。  </span></span><br><span class="line"><span class="comment">#rstride 和 cstride 表示数据之间的步幅，用于控制绘制的密度，rstride 表示行步幅，cstride 表示列步幅。设置为1表示使用所有数据点进行绘制，较小的值会导致更密集的绘制，较大的值会导致更稀疏的绘制。  </span></span><br><span class="line"><span class="comment">#cmap 是用于设置颜色映射的参数，它决定了表面图的颜色样式。在这里使用了 plt.get_cmap(&#x27;rainbow&#x27;)，它表示使用彩虹色的颜色映射，即高值用红色表示，低值用蓝色表示，中间值用绿色表示  </span></span><br><span class="line">plt.contourf(X, Y, Z, zdir=<span class="string">&#x27;z&#x27;</span>, offset=-<span class="number">2</span>, cmap=plt.get_cmap(<span class="string">&#x27;rainbow&#x27;</span>))  </span><br><span class="line"><span class="comment">#zdir 参数指定了绘制的等高线图所在的平面，可以取值为 &#x27;x&#x27;、&#x27;y&#x27; 或 &#x27;z&#x27;，分别表示绘制在 x、y 或 z 轴上。  </span></span><br><span class="line"><span class="comment">#offset 参数用于指定绘制的等高线图所在平面的偏移位置，它是一个数值，用于控制等高线图所在平面的位置。  </span></span><br><span class="line">ax.set_zlim(-<span class="number">2</span>, <span class="number">2</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="多合一显示">13多合一显示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">fig = plt.figure()  </span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 1) #分成两行两列，选第1个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 1])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 2) #分成两行两列，选第2个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 2])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 3) #分成两行两列，选第3个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 3])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 4) #分成两行两列，选第4个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 4])  </span></span><br><span class="line">  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">#分成两行一列，选第1个图，但占3个位置  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">#分成两行三列，选第4个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#分成两行三列，选第5个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>) <span class="comment">#分成两行三列，选第6个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">4</span>])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="分格显示">14分格显示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">plt.figure()  </span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">0</span>), colspan=<span class="number">3</span>, rowspan=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#(3, 3)：表示将图形区域分割为 3 行 3 列的网格。  </span></span><br><span class="line"><span class="comment">#(0, 0)：表示该子图位于第 0 行第 0 列的位置。  </span></span><br><span class="line"><span class="comment">#colspan=3：表示该子图跨越 3 列，即宽度为 3。  </span></span><br><span class="line"><span class="comment">#rowspan=1：表示该子图跨越 1 行，即高度为 1。  </span></span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])  </span><br><span class="line"><span class="comment"># ax1.set_label(&#x27;ax1&#x27;)  </span></span><br><span class="line">ax1.set_title(<span class="string">&#x27;ax1&#x27;</span>)  </span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)  </span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)  </span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))  </span><br><span class="line">ax5 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>))  </span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">plt.figure()  </span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)  </span><br><span class="line">ax6 = plt.subplot(gs[<span class="number">0</span>, :]) <span class="comment">#gs[0, :]：表示将子图放置在 GridSpec 对象 gs 的第 0 行的所有列上  </span></span><br><span class="line">ax7 = plt.subplot(gs[<span class="number">1</span>, :<span class="number">2</span>])  </span><br><span class="line">ax8 = plt.subplot(gs[<span class="number">1</span>:, <span class="number">2</span>])  </span><br><span class="line">ax9 = plt.subplot(gs[-<span class="number">1</span>, <span class="number">0</span>])  </span><br><span class="line">ax10 = plt.subplot(gs[-<span class="number">1</span>, -<span class="number">2</span>])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图中图">15图中图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec  </span><br><span class="line">fig = plt.figure()  </span><br><span class="line">fig.clf()  </span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  </span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]  </span><br><span class="line">  </span><br><span class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>  </span><br><span class="line">ax1 = fig.add_axes([left, bottom, width, height])  </span><br><span class="line"><span class="comment">#这个方法需要一个由4个元素组成的列表对象，分别对应图形的左、底、宽、高。每个数字必须在0和1之间，表示相对于图形的归一化坐标。  </span></span><br><span class="line"><span class="comment"># 例如，left=0.1表示轴对象的左边缘距离图形的左边缘10%的宽度，width=0.8表示轴对象的宽度占图形的80%的宽度  </span></span><br><span class="line">ax1.plot(x, y, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">ax1.set_title(<span class="string">&#x27;title_1&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span>  </span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])  </span><br><span class="line">ax2.plot(y, x, <span class="string">&#x27;b&#x27;</span>)  </span><br><span class="line">ax2.plot(x, y, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">ax2.set_title(<span class="string">&#x27;title_2&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">plt.axes([<span class="number">0.6</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.25</span>])  </span><br><span class="line">plt.plot(y[::-<span class="number">1</span>], x, <span class="string">&#x27;g&#x27;</span>)  </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">plt.title(<span class="string">&#x27;title_2&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="次坐标轴">16次坐标轴</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)  </span><br><span class="line">y1 = <span class="number">0.05</span>*x**<span class="number">2</span>  </span><br><span class="line">y2 = -<span class="number">1</span>*y1  </span><br><span class="line"><span class="comment"># 使用plt.subplots()创建一个图形对象fig和一个轴对象ax1,  </span></span><br><span class="line">fig, ax1 = plt.subplots()  </span><br><span class="line"><span class="comment"># 使用ax1.twinx()创建一个与ax1共享x轴的轴对象ax2  </span></span><br><span class="line">ax2 = ax1.twinx()  </span><br><span class="line">ax1.plot(x, y1, <span class="string">&#x27;g-&#x27;</span>)  </span><br><span class="line">ax2.plot(x, y2, <span class="string">&#x27;b--&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y1&#x27;</span>, c=<span class="string">&#x27;g&#x27;</span>)  </span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y2&#x27;</span>, c=<span class="string">&#x27;b&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="动画">17动画</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation  </span><br><span class="line">  </span><br><span class="line">fig, ax = plt.subplots()  </span><br><span class="line">x = np.arange(<span class="number">0.2</span>*np.pi, <span class="number">0.01</span>)  </span><br><span class="line">line, = ax.plot(x, np.sin(x))  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animations</span>(<span class="params">i</span>):  </span><br><span class="line">line.set_ydata(np.sin(x+i/<span class="number">10</span>))  </span><br><span class="line"><span class="keyword">return</span> line,  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():  </span><br><span class="line">line.set_ydata(np.sin(x))  </span><br><span class="line"><span class="keyword">return</span> line,  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ani = animation.FuncAnimation(fig=fig, func=animations, frames=<span class="number">100</span>, init_func=init, interval=<span class="number">20</span>, blit=<span class="literal">False</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">常用的numpy语句</summary>
    
    
    
    <category term="python" scheme="https://xxh1230.online/categories/python/"/>
    
    
    <category term="matplotlib" scheme="https://xxh1230.online/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>numpy的用法</title>
    <link href="https://xxh1230.online/posts/aa11dae7.html"/>
    <id>https://xxh1230.online/posts/aa11dae7.html</id>
    <published>2024-05-19T12:53:02.000Z</published>
    <updated>2024-07-03T01:10:03.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一数组的创建">一、数组的创建</h1><h2 id="创建数组">创建数组</h2><p><strong>转换为数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 arrs 转换为 NumPy 数组。如果 arr 已经是 NumPy 数组，那么它将保持不变。如果 arr 是列表或其他可迭代对象，它将被转换为 NumPy 数组。</span></span><br><span class="line">np.asarray(arrs)</span><br></pre></td></tr></table></figure></p><p><strong>生成从a到b指定n个数的数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(a, b, n)</span><br></pre></td></tr></table></figure></p><p><strong>创建全为1的数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p><strong>创建指定形状的未初始化的数组，里面内容是随机的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.empty(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>用于沿指定轴重复数组中的元素,重复一行或者一列后，再重复下一行或列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.repeat(a, repeats, axis=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>用于沿指定轴堆叠数组的副本，构成一个新的数组，数组按整体重复</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(A, reps)</span><br></pre></td></tr></table></figure><h2 id="创建随机数组">创建随机数组</h2><p><strong>用于生成随机整数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于生成服从均匀分布的随机数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(low, high, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于生成服从标准正态分布（均值为0，标准差为1）的随机数的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure></p><p><strong>函数用于随机排列或打乱数组的元素顺序，生成一个新的随机排列的数组或列表。它通常用于数据的随机化，洗牌，或创建随机样本。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.permutation()</span><br></pre></td></tr></table></figure></p><p><strong>生成服从0到1之间均匀分布的随机数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand()</span><br></pre></td></tr></table></figure></p><h2 id="依概率选择数组">依概率选择数组</h2><p><strong>用于从给定的数组或序列中进行随机抽样的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(a, size=<span class="literal">None</span>, replace=<span class="literal">True</span>, p=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于从指定的序列中随机抽取指定k个数量的唯一元素（不重复抽样）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random.sample(population, k)</span><br></pre></td></tr></table></figure></p><h1 id="二数组的操作运算">二、数组的操作运算</h1><h2 id="数组计算相关">数组计算相关</h2><p><strong>矩阵叉乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cross(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>矩阵点乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>两个形状相同的矩阵对应元素的乘法运算</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>两个形状相同的矩阵对应元素的除法运算</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.divide(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>用于计算数组中元素的平均值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="literal">None</span>, dtype=<span class="literal">None</span>, out=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于数组中按行或者列求和</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><strong>计算方差</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.var(a, axis=<span class="literal">None</span>, dtype=<span class="literal">None</span>, out=<span class="literal">None</span>, ddof=<span class="number">0</span>, keepdims=&lt;no value&gt;)</span><br></pre></td></tr></table></figure></p><p><strong>计算数组中每个元素的平方</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于计算向量或矩阵的范数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.norm(x, <span class="built_in">ord</span>=<span class="literal">None</span>, axis=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于可逆矩阵求逆</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.inv()</span><br></pre></td></tr></table></figure></p><p><strong>用于计算不可求逆矩阵的伪逆矩阵</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.pinv()</span><br></pre></td></tr></table></figure></p><p><strong>用于计算一个数组中的元素的指数幂</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.power(base, exponent)</span><br></pre></td></tr></table></figure></p><p><strong>取整</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">abs</span>(arr)</span><br></pre></td></tr></table></figure></p><p><strong>向下取整</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.floor(arr)</span><br></pre></td></tr></table></figure></p><p><strong>自身相乘的n次方</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.matrix_power(A, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p><strong>求矩阵的秩</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rank_A = np.linalg.matrix_rank(A)</span><br></pre></td></tr></table></figure></p><p><strong>求矩阵累加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cumsum(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>求矩阵累乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cumprod(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><strong>数组之间的欧式距离</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.norm(x - y)</span><br></pre></td></tr></table></figure></p><h2 id="数组随机选择">数组随机选择</h2><p><strong>用来从给定的数组中生成随机样本</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(a, size=<span class="literal">None</span>, replace=<span class="literal">True</span>, p=<span class="literal">None</span>, axis=<span class="number">0</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="排序">排序</h2><p><strong>按轴进行排序</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.sort(axis=-<span class="number">1</span>, kind=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于返回数组中元素排序后的索引的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.argsort(a, axis=-<span class="number">1</span>, kind=<span class="string">&#x27;quicksort&#x27;</span>, order=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>对数组进行随机排列</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.shuffle(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于对数组执行间接排序</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.lexsort(arr)</span><br></pre></td></tr></table></figure></p><h2 id="数组查找相关">数组查找相关</h2><p><strong>用于检查给定数组中是否存在任意一个元素满足指定条件。如果数组中有任意一个元素满足条件，则返回True，否则返回 False</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">any</span>()</span><br></pre></td></tr></table></figure><p><strong>在整个数组中查找最小值的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argmin(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于查找数组中元素的最小值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">min</span>(a, axis=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>在整个数组中查找最大值的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argmax(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>在整个数组中查找最大值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure></p><p><strong>数组中对满足条件的元素进行替换</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.where(condition, x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#当只有condition时返回满足条件的索引</span></span><br><span class="line">np.where(condition)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中唯一的元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.unique()</span><br></pre></td></tr></table></figure></p><p><strong>查找数组的空元素，返回布尔值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.isnan(x)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中非零元素的个数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.count_nonzero(a, axis=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中满足条件的元素的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argwhere(a)</span><br></pre></td></tr></table></figure></p><p><strong>删除指定元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = np.delete(arr, np.where(arr == value_to_remove))</span><br><span class="line">arr = np.delete(arr, index_to_remove)</span><br></pre></td></tr></table></figure></p><h2 id="两个数组内部元素比较">两个数组内部元素比较</h2><p><strong>若第一个数组中的元素大于第二个数组中对应位置的元素结果是True</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.greater(x1, x2, /, out=<span class="literal">None</span>, *, where=<span class="literal">True</span>, casting=<span class="string">&#x27;same_kind&#x27;</span>, order=<span class="string">&#x27;K&#x27;</span>, dtype=<span class="literal">None</span>, subok=<span class="literal">True</span>[, signature, extobj])</span><br></pre></td></tr></table></figure></p><p><strong>若第一个数组中的元素小于第二个数组中对应位置的元素结果是True</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.less(x1, x2)</span><br></pre></td></tr></table></figure></p><h2 id="数组维度相关操作">数组维度相关操作</h2><p><strong>用于从数组x中移除所有维度为1的维度</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.squeeze(x)</span><br></pre></td></tr></table></figure></p><p><strong>增加一个新的维度</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[:, np.newaxis]与[np.newaxis, :]</span><br></pre></td></tr></table></figure></p><p><strong>.flatten()用于将多维数组展平为一维数组，创建一个副本</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.asarray(results).flatten()</span><br></pre></td></tr></table></figure></p><p><strong>将多维数组中的所有元素按照一维的顺序排列,不是副本</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ravel() </span><br></pre></td></tr></table></figure></p><p><strong>用于连接（合并）数组的函数。它可以沿指定的轴将多个数组连接在一起</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate((a1, a2, ...), axis=<span class="number">0</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在水平方向堆叠（水平拼接）多个数组或矩阵</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.hstack((array1, array2))</span><br></pre></td></tr></table></figure></p><p><strong>用于垂直堆叠数组的函数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.vstack((array1, array2))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.row_stack((array1, array2))</span><br></pre></td></tr></table></figure><p><strong>用于按列将输入数组堆叠在一起</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.column_stack((arr1, arr2, arr3))</span><br></pre></td></tr></table></figure></p><p><strong>用于将向量按水平方向翻转</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.fliplr(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于沿指定的轴重复数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(A, reps)</span><br></pre></td></tr></table></figure></p><h1 id="三-数组的广播">三、 数组的广播</h1><p><strong>用于创建一个与指定数组具有相同形状的新数组，并填充指定的常量值。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full_like(a, fill_value, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;K&#x27;</span>, subok=<span class="literal">True</span>, shape=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在指定轴上重复数组中的元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.repeat(array, n, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在指定轴上重复整个数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(array, (m, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><h1 id="四数组类型数据的存储与读取">四、数组类型数据的存储与读取</h1><p><strong>数据存储</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 best_individual_ture_fitness_record 包含要保存的数据</span></span><br><span class="line">best_individual_ture_fitness_record = np.array([<span class="number">5012.145430434681</span>, <span class="number">6218.152152733865</span>, <span class="number">3671.3336005601905</span>, <span class="number">1847.8489548514644</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定保存的文件名</span></span><br><span class="line">file_name = <span class="string">&quot;best_individual_ture_fitness.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 np.savetxt 将数据保存到文本文件</span></span><br><span class="line">np.savetxt(file_name, best_individual_ture_fitness_record)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据已保存到 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p><p><strong>数据读取</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件名</span></span><br><span class="line">file_name = <span class="string">&quot;best_individual_ture_fitness.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 np.loadtxt 读取文件中的数据</span></span><br><span class="line">best_individual_ture_fitness_record = np.loadtxt(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印读取的数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取的数组:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(best_individual_ture_fitness_record)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>numpy类型数据转换为列表</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维NumPy数组</span></span><br><span class="line">array_2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二维数组转换为Python列表</span></span><br><span class="line">list_2d = array_2d.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印转换后的列表</span></span><br><span class="line"><span class="built_in">print</span>(list_2d)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">常用的numpy语句</summary>
    
    
    
    <category term="python" scheme="https://xxh1230.online/categories/python/"/>
    
    
    <category term="numpy" scheme="https://xxh1230.online/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxh1230.online/posts/4a17b156.html"/>
    <id>https://xxh1230.online/posts/4a17b156.html</id>
    <published>2024-05-19T05:32:02.000Z</published>
    <updated>2024-06-30T07:43:29.220Z</updated>
    
    <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面 這是測試頁面 這是測試頁面</p></div></div></div><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">閃</span></span></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221809274.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221801733.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221808599.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201332927.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221804001.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405221742286.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201339920.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201336218.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><p>我覺得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><div class="aspect-ratio" data-align="center"><p><iframe    src="https://player.bilibili.com/player.html?bvid=BV1b44y1q7Cb&page=1"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;timeline blue&quot;&gt;&lt;div class=&#39;timeline-item headline&#39;&gt;&lt;div class=&#39;timeline-item-title&#39;&gt;&lt;div class=&#39;item-circle&#39;&gt;&lt;p&gt;2022&lt;/p&gt;
&lt;/div&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
