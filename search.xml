<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr /><p>title: 测试 abbrlink: date: 2025-05-05 21:03:55 top_img:https://uek-1314584698.cos.ap-beijing.myqcloud.com/blog/img/xxh/130015705_p0_scale.jpgcover:https://uek-1314584698.cos.ap-beijing.myqcloud.com/blog/img/xxh/130015705_p0_scale.jpg</p><h1 id="数组">数组</h1><h2 id="二分查找">二分查找</h2><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20241104105642.png"alt="image.png|375" /><figcaption aria-hidden="true">image.png|375</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums, target</span>):  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">        :type nums: List[int]        </span></span><br><span class="line"><span class="string">        :type target: int        </span></span><br><span class="line"><span class="string">        :rtype: int  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>        left = <span class="number">0</span>  </span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span>  </span><br><span class="line">        middle = <span class="literal">None</span>  </span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:  </span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span>  </span><br><span class="line">            <span class="keyword">if</span> target &lt; nums[middle]:  </span><br><span class="line">                right = middle - <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">elif</span> target &gt; nums[middle]:  </span><br><span class="line">                left = middle + <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line"><span class="built_in">print</span>(middle)</span><br><span class="line"><span class="keyword">return</span> middle</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>]  </span><br><span class="line">s = Solution()  </span><br><span class="line">s.search(arr, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h2 id="移除元素">移除元素</h2><p>数组的地址是连续的，如果需要删除元素，则需要对其他元素进行缩进，<strong>双指针，其中一个指针用于遍历全部元素，另一个指针用于记录需要替换的地址。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums, val</span>):  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">        :type nums: List[int]        </span></span><br><span class="line"><span class="string">        :type val: int        </span></span><br><span class="line"><span class="string">        :rtype: int  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>        size = <span class="built_in">len</span>(nums)  </span><br><span class="line">        fast = <span class="number">0</span>  <span class="comment"># 快指针  </span></span><br><span class="line">        slow = <span class="number">0</span>  <span class="comment"># 慢指针  </span></span><br><span class="line">        <span class="keyword">while</span> fast &lt; size:  </span><br><span class="line">            <span class="keyword">if</span> nums[fast] != val:  </span><br><span class="line">                nums[slow] = nums[fast]  </span><br><span class="line">                slow += <span class="number">1</span>  </span><br><span class="line">            fast += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> slow  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>]  </span><br><span class="line">ss = Solution()  </span><br><span class="line">ss.removeElement(arr, <span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><h2 id="有序数组的平方">有序数组的平方</h2><p>因为是有序数组，数组平方后最大值只会在数组的两边，采用双指针，指向数组的两边，哪边大哪边的指针向中间前进一步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortedSquares</span>(<span class="params">self, nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:  </span><br><span class="line">  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">        :type nums: List[int]        </span></span><br><span class="line"><span class="string">        :rtype: List[int]  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>        len_arr = <span class="built_in">len</span>(nums)  </span><br><span class="line">        start = <span class="number">0</span>  </span><br><span class="line">        end = len_arr - <span class="number">1</span>  </span><br><span class="line">        res = [<span class="number">0</span>] * len_arr  </span><br><span class="line">        i = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> start &lt;= end:  </span><br><span class="line">            n1 = nums[start]**<span class="number">2</span>  </span><br><span class="line">            n2 = nums[end]**<span class="number">2</span>  </span><br><span class="line">            <span class="keyword">if</span> n2 &gt; n1:  </span><br><span class="line">                x = len_arr - <span class="number">1</span> - i  </span><br><span class="line">                res[len_arr - <span class="number">1</span> - i] = n2  </span><br><span class="line">                end -= <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                y = len_arr - <span class="number">1</span> - i  </span><br><span class="line">                res[len_arr - <span class="number">1</span> - i] = n1  </span><br><span class="line">                start += <span class="number">1</span>  </span><br><span class="line">            i += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">arr = [-<span class="number">4</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">10</span>]  </span><br><span class="line">S = Solution()  </span><br><span class="line">da = S.sortedSquares(arr)  </span><br><span class="line"><span class="built_in">print</span>(da)</span><br></pre></td></tr></table></figure><h2 id="长度最小的子数组">长度最小的子数组</h2><p>使用<font color="#ff0000">滑动窗口</font>的思想，滑动窗口也是采用了双指针，一个指针指向窗口的结尾，一个指针指向了窗口的开始，通过for循环来改变窗口的结尾，如果窗口内的数据和大于目标值，则通过改变窗口的起始指针来不断缩小窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">        :type target: int        </span></span><br><span class="line"><span class="string">        :type nums: List[int]        </span></span><br><span class="line"><span class="string">        :rtype: int  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>        len_arr = <span class="built_in">len</span>(nums)  </span><br><span class="line">        start = <span class="number">0</span>  </span><br><span class="line">        end = <span class="number">0</span>  </span><br><span class="line">        sum_n = <span class="number">0</span>  </span><br><span class="line">        min_len = len_arr + <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">while</span> end &lt; len_arr:  </span><br><span class="line">            sum_n += nums[end]  </span><br><span class="line">            <span class="keyword">while</span> sum_n &gt;= target:  </span><br><span class="line">                min_len = <span class="built_in">min</span>(min_len, end - start + <span class="number">1</span>)  </span><br><span class="line">                sum_n -= nums[start]  </span><br><span class="line">                start += <span class="number">1</span>  </span><br><span class="line">            end += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> min_len <span class="keyword">if</span> min_len != len_arr + <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]  </span><br><span class="line">tar = <span class="number">15</span>  </span><br><span class="line">S = Solution()  </span><br><span class="line">da = S.minSubArrayLen(tar, arr)  </span><br><span class="line"><span class="built_in">print</span>(da)</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵">螺旋矩阵</h2><p>关键在于采用统一的规则来控制边界，这里采用左闭右开的方法，‘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateMatrix</span>(<span class="params">self, n</span>):  </span><br><span class="line">        <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">        :type n: int        </span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]  </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>        </span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>:  </span><br><span class="line">            <span class="keyword">return</span> []  </span><br><span class="line">        matrix = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  </span><br><span class="line">        top, bottom, left, right = <span class="number">0</span>, n-<span class="number">1</span>, <span class="number">0</span>, n-<span class="number">1</span> <span class="comment"># 将边界统一为数组0-(n-1)的形式</span></span><br><span class="line">        x = <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">while</span> top &lt;= bottom <span class="keyword">and</span> left &lt;= right:  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>-<span class="number">1</span>): <span class="comment"># 控制上边界,+1 表示是从left-right完整的一圈，-1 表示完整的一圈减去 1</span></span><br><span class="line">                matrix[top][i] = x  </span><br><span class="line">                x += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(top, bottom+<span class="number">1</span>-<span class="number">1</span>):  </span><br><span class="line">                matrix[i][right] = x  </span><br><span class="line">                x += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(right, left-<span class="number">1</span>+<span class="number">1</span>, -<span class="number">1</span>):  </span><br><span class="line">                matrix[bottom][i] = x  </span><br><span class="line">                x += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bottom, top-<span class="number">1</span>+<span class="number">1</span>, -<span class="number">1</span>):  </span><br><span class="line">                matrix[i][left] = x  </span><br><span class="line">                x += <span class="number">1</span>  </span><br><span class="line">            top += <span class="number">1</span>  </span><br><span class="line">            right -= <span class="number">1</span>  </span><br><span class="line">            bottom -= <span class="number">1</span>  </span><br><span class="line">            left += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">if</span> (top-<span class="number">1</span>) == (bottom+<span class="number">1</span>):  </span><br><span class="line">            matrix[top-<span class="number">1</span>][left-<span class="number">1</span>] = x  </span><br><span class="line">        <span class="keyword">return</span> matrix  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">da = Solution().generateMatrix(<span class="number">5</span>)  </span><br><span class="line"><span class="built_in">print</span>(da)</span><br></pre></td></tr></table></figure><h2 id="区间和">区间和</h2><p>通过一个记录累加值的数组来求区间和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    data = <span class="built_in">input</span>().split()  </span><br><span class="line">    n = <span class="built_in">int</span>(data[<span class="number">0</span>])  </span><br><span class="line">    val = data[<span class="number">1</span>:(n+<span class="number">1</span>)]  </span><br><span class="line">    idx = data[(n+<span class="number">1</span>):]  </span><br><span class="line">    sum_ = <span class="number">0</span>  </span><br><span class="line">    p = []  </span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> val:  </span><br><span class="line">        sum_ += <span class="built_in">int</span>(v)  </span><br><span class="line">        p.append(sum_)  </span><br><span class="line">    i = <span class="number">0</span>  </span><br><span class="line">    results = []  </span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="built_in">len</span>(idx)-<span class="number">1</span>:  </span><br><span class="line">        a = <span class="built_in">int</span>(idx[i])  </span><br><span class="line">        b = <span class="built_in">int</span>(idx[i+<span class="number">1</span>])  </span><br><span class="line">        i += <span class="number">2</span>  </span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:  </span><br><span class="line">            sum_value = p[b]  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            sum_value = p[b] - p[a - <span class="number">1</span>]  </span><br><span class="line">        results.append(sum_value)  </span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:  </span><br><span class="line">        <span class="built_in">print</span>(result)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="开发商买土地">开发商买土地</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    data = <span class="built_in">input</span>().split()  </span><br><span class="line">    m, n = <span class="built_in">int</span>(data[<span class="number">0</span>]), <span class="built_in">int</span>(data[<span class="number">1</span>])  </span><br><span class="line">    val = data[<span class="number">2</span>:]  </span><br><span class="line">    arr = []  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):  </span><br><span class="line">        row = []  </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            row.append(<span class="built_in">int</span>(val[i*n+j]))  </span><br><span class="line">        arr.append(row)  </span><br><span class="line">    <span class="built_in">print</span>(arr)  </span><br><span class="line">    row_sum = []  </span><br><span class="line">    col_sum = []  </span><br><span class="line">    sum_tmp = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):  </span><br><span class="line">        sum_tmp += arr_add(arr[r])  </span><br><span class="line">        row_sum.append(sum_tmp)  </span><br><span class="line">    sum_tmp = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">        sum_tmp += arr_add([r[c] <span class="keyword">for</span> r <span class="keyword">in</span> arr])  </span><br><span class="line">        col_sum.append(sum_tmp)  </span><br><span class="line">    <span class="built_in">print</span>(row_sum)  </span><br><span class="line">    <span class="built_in">print</span>(col_sum)  </span><br><span class="line">    min_cha = row_sum[-<span class="number">1</span>]  </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m-<span class="number">1</span>):  </span><br><span class="line">        a = row_sum[r]  </span><br><span class="line">        b = row_sum[-<span class="number">1</span>] - a  </span><br><span class="line">        min_cha = <span class="built_in">min</span>(min_cha, <span class="built_in">abs</span>(b - a))  </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-<span class="number">1</span>):  </span><br><span class="line">        a = col_sum[c]  </span><br><span class="line">        b = col_sum[-<span class="number">1</span>] - a  </span><br><span class="line">        min_cha = <span class="built_in">min</span>(min_cha, <span class="built_in">abs</span>(b - a))  </span><br><span class="line">    <span class="built_in">print</span>(min_cha)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_add</span>(<span class="params">arr</span>):  </span><br><span class="line">    res = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> arr:  </span><br><span class="line">        res += v  </span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Linux学习笔记-基础知识篇</title>
      <link href="/posts/9aa43288.html"/>
      <url>/posts/9aa43288.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用命令">常用命令</h1><h2 id="常用命令汇总">常用命令汇总</h2><table><colgroup><col style="width: 15%" /><col style="width: 23%" /><col style="width: 55%" /><col style="width: 5%" /></colgroup><thead><tr><th>命令</th><th>功能</th><th>其他</th><th></th></tr></thead><tbody><tr><td>pwd</td><td>打印当前路径</td><td></td><td></td></tr><tr><td>cd</td><td>切换路径</td><td></td><td></td></tr><tr><td>mkdir</td><td>创建文件夹</td><td></td><td></td></tr><tr><td>rmdir</td><td>删除文件夹</td><td></td><td></td></tr><tr><td>ls</td><td>列出目录内容</td><td>ls -a(显示隐藏文件)；ls -l(显示详细信息)</td><td></td></tr><tr><td>cp</td><td>复制</td><td>cp 1.txt 12.txt; cp -frd</td><td></td></tr><tr><td>rm</td><td>删除</td><td>rm -rf</td><td></td></tr><tr><td>cat</td><td>打印文件内容</td><td></td><td></td></tr><tr><td>mv</td><td>移动文件/重命名</td><td></td><td></td></tr><tr><td>touch</td><td>修改文件时间/创建空文件</td><td></td><td></td></tr><tr><td>find</td><td>按照文件名查找</td><td></td><td></td></tr><tr><td>grep</td><td>按照文件内容名查找</td><td></td><td></td></tr><tr><td>clear</td><td>清屏</td><td></td><td></td></tr><tr><td>sudo</td><td>临时切换 root 用户</td><td></td><td></td></tr><tr><td>ifconfig</td><td>查看网/修改络信息</td><td></td><td></td></tr><tr><td>reboot</td><td>重启系统</td><td></td><td></td></tr><tr><td>poweroff</td><td>关机</td><td></td><td></td></tr><tr><td>man</td><td>打开帮助信息</td><td></td><td></td></tr><tr><td>sync</td><td>数据同步写入磁盘</td><td></td><td></td></tr><tr><td>du</td><td>查看文件大小</td><td></td><td></td></tr><tr><td>df</td><td>磁盘空间检测</td><td></td><td></td></tr><tr><td>ps</td><td>查看当前进程</td><td></td><td></td></tr><tr><td>top</td><td>查看进程实时运行状态</td><td></td><td></td></tr><tr><td>file</td><td>查看文件类型</td><td></td><td></td></tr></tbody></table><h2 id="文件常用操作">文件常用操作</h2><table style="width:100%;"><colgroup><col style="width: 10%" /><col style="width: 24%" /><col style="width: 59%" /><col style="width: 6%" /></colgroup><thead><tr><th>命令</th><th>功能</th><th>其他</th><th></th></tr></thead><tbody><tr><td>pwd</td><td>打印当前路径</td><td></td><td></td></tr><tr><td>cd</td><td>切换路径</td><td></td><td></td></tr><tr><td>mkdir</td><td>创建文件夹</td><td></td><td></td></tr><tr><td>rmdir</td><td>删除文件夹</td><td></td><td></td></tr><tr><td>ls</td><td>列出目录内容</td><td>ls -a(显示隐藏文件)；ls -l(显示详细信息)</td><td></td></tr><tr><td>cp</td><td>复制</td><td>cp 1.txt 12.txt; cp -frd</td><td></td></tr><tr><td>rm</td><td>删除</td><td>rm -rf</td><td></td></tr><tr><td>cat</td><td>打印文件内容</td><td></td><td></td></tr><tr><td>mv</td><td>移动文件/重命名</td><td></td><td></td></tr><tr><td>touch</td><td>修改文件时间/创建空文件</td><td></td><td></td></tr><tr><td>tar</td><td>压缩/解压</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="mv">mv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv file.txt /home/user/Documents/</span><br><span class="line">mv file.txt /home/user/Documents/newfile.txt</span><br><span class="line">mv file1.txt file2.txt /home/user/Documents/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标路径中已经存在同名文件，`<span class="built_in">mv</span>` 会直接覆盖它。如果需要提示，可以加上 `-i` 选项：</span></span><br><span class="line">mv -i file.txt /home/user/Documents/</span><br></pre></td></tr></table></figure><h2 id="文件查找">文件查找</h2><table><thead><tr><th>命令</th><th>功能</th><th></th></tr></thead><tbody><tr><td>find</td><td>按照文件名查找</td><td></td></tr><tr><td>grep</td><td>按照文件内容名查找</td><td></td></tr></tbody></table><h3 id="find">find</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find -name 1.txt</span><br><span class="line">find abc -name 1.txt</span><br><span class="line">find abc -name &quot;*2.txt&quot;</span><br></pre></td></tr></table></figure><h3 id="grep">grep</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;abc&quot; *</span><br><span class="line">grep &quot;abc&quot; * -n # -n 显示 &quot;abc&quot; 所在的行</span><br><span class="line">grep &quot;abc&quot; * -nw # -w 整词查找 </span><br><span class="line">grep &quot;abc&quot; * -nwr # -r 递归查找 </span><br></pre></td></tr></table></figure><h2 id="压缩命令">压缩命令</h2><table><thead><tr><th>命令</th><th>功能</th><th></th></tr></thead><tbody><tr><td>gzip</td><td></td><td></td></tr><tr><td>bzip2</td><td></td><td></td></tr><tr><td>tar</td><td></td><td></td></tr></tbody></table><h3 id="压缩命令-1">压缩命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=test bs=1024 count=1024</span><br><span class="line">gzip -k test # -k 保留之前的文件</span><br><span class="line">bzip2 -k test </span><br><span class="line">tar czf test.tar.gz test # -c 创建压缩包，-z 使用 gzip, -f 表示文件，后面接着一个文件名</span><br><span class="line">tar cjf test.tar.bz2 test # -j 使用 bzip2</span><br><span class="line">tar cjf abc.tar.bz2 abc # 压缩文件夹</span><br></pre></td></tr></table></figure><h3 id="解压命令">解压命令**</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip -dk test.gz # -k 保留之前的文件</span><br><span class="line">bzip2 -dk test.bz2 </span><br><span class="line">tar xzf test.tar.gz # -x 解压，-z 使用 gzip, -f 表示文件，后面接着一个文件名</span><br><span class="line">tar xjf test.tar.bz2 # -j 使用 bzip2</span><br><span class="line">tar xjf abc.tar.bz2 -C temp # 解压到指定文件夹</span><br></pre></td></tr></table></figure><h1 id="vi-编辑器">Vi 编辑器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">gedit 1.txt</span><br><span class="line">vi 1.txt</span><br><span class="line">vi 1.txt +1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi 1.txt 进入编辑模型</span></span><br><span class="line">a 光标前插入</span><br><span class="line">i 光标后插入</span><br><span class="line">ese 退出</span><br><span class="line">x 删除</span><br><span class="line">u 撤销删除</span><br><span class="line">dw 删除一个单词 光标在首字母前输入 dw</span><br><span class="line">D 删除光标之后的所有内容</span><br><span class="line">dd 删除光标所在的1行</span><br><span class="line">4dd 删除光标所在的后4行</span><br><span class="line">o 在当前行添加新的一行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">：进入命令行模型</span></span><br><span class="line">:wq 保存退出</span><br><span class="line">:q! 不保存退出</span><br><span class="line">:set number 显示行号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">快捷键</span></span><br><span class="line">G 跳到结尾</span><br><span class="line">：100 跳到100行</span><br><span class="line">ctrl + f 向前翻页</span><br><span class="line">ctrl + b 向后翻页</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制粘贴</span></span><br><span class="line">yy 复制</span><br><span class="line">p 粘贴</span><br><span class="line">3yy 复制三行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找替换</span></span><br><span class="line">/abc 按 n 查找下一个</span><br><span class="line">：%s/abc/ABC/g 替换</span><br><span class="line">：%s/abc/ABC/gc 替换时加确认</span><br></pre></td></tr></table></figure><h1 id="用户与组">用户与组</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adduser --help</span><br><span class="line">sudo adduser xxh # 创建用户</span><br><span class="line">finger xxh # 查找用户</span><br><span class="line">sudo passwd xxh # 修改用户密码</span><br><span class="line">sudo deluser xxh # 删除用户</span><br><span class="line"></span><br><span class="line">sudo addgroup xxh_group # 添加组</span><br><span class="line">groups xxh_group # 查看组内用户</span><br><span class="line">sudo delgroup xxh_group</span><br></pre></td></tr></table></figure><h1 id="文件权限管理">文件权限管理</h1><ul><li><code>r</code> 可读文件</li><li><code>w</code> 可写文件</li><li><code>x</code> 可执行文件</li><li><code>-rw-rw-r--</code> 本用户-组内其他用户-其他组用户的权限</li></ul><h3 id="修改文件权限">修改文件权限</h3><p><code>rwx</code> 每个权限激活为 <code>1</code> ，二进制表示<code>111</code>，十进制表示为 <code>7</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 664 hello</span><br></pre></td></tr></table></figure><h3 id="修改文件所属的用户">修改文件所属的用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root hello # 修改用户</span><br><span class="line">sudo chown .root hello # 修改用户组</span><br><span class="line">sudo chown root.root hello # 修改用户和用户组</span><br></pre></td></tr></table></figure><h1 id="链接文件">链接文件</h1><ul><li>符号链接<ul><li>符号链接需要使用绝对路径</li><li>原文件删除后符号链接不能使用</li></ul></li><li>硬链接<ul><li>只有硬链接的文件全都删除才算删除该文件</li><li>修改硬链接的随意一个文件，其他文件都被修改</li><li>硬链接不能跨文件系统</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/book/hello ./abc/hello1 # 符号链接</span><br><span class="line">cp -d ./hello ./abc/hello1</span><br><span class="line">ln hello hello1 # 硬链接</span><br></pre></td></tr></table></figure><h1 id="makefile与make">Makefile与make</h1><p><code>Makefile</code> 文件是让 gcc编译工具以一定的规则来进行编译文件</p><ul><li><code>gcc -c</code> 只编译文件，不产生链接</li><li><code>gcc -o</code>指定链接的输出文件名，可以生成可执行文件，也可以指定目标文件名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例子</span></span><br><span class="line">gcc -c main.c # 生成 mian.o</span><br><span class="line">gcc -c input.c # 生成 input.o</span><br><span class="line">gcc -c add.c # 生成 add.o</span><br><span class="line">gcc mian.o input.o add.o -o main</span><br></pre></td></tr></table></figure><p><code>main</code> 需要<code>main.o input.o add.o</code>，都有则执行下一句，<code>gcc main.o input.o add.o -o main</code>，没有的话找下面有<code>main.o</code> 的地方，生成 <code>main.o</code>，以此类推。当<code>input.c</code> 比 <code>input.o</code> 要新时，会重新编译<code>input.c</code> 。</p><ul><li><p>makefile01</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main: main.o input.o add.o </span><br><span class="line">gcc main.o input.o add.o -o main</span><br><span class="line">main.o: main.c</span><br><span class="line">gcc -c main.c</span><br><span class="line">input.o: input.c</span><br><span class="line">gcc -c input.c</span><br><span class="line">add.o: add.c</span><br><span class="line">gcc -c add.c</span><br><span class="line">clear:</span><br><span class="line">rm *.o</span><br><span class="line">rm main</span><br></pre></td></tr></table></figure></p></li><li><p>makefile02</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">object = main.o input.o add.o </span><br><span class="line">main: $(object) </span><br><span class="line">gcc -o $(object) </span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">.o: %.c</span></span><br><span class="line">gcc -c $&lt;</span><br><span class="line">clear:</span><br><span class="line">rm *.o</span><br><span class="line">rm main</span><br></pre></td></tr></table></figure></p></li><li><p>makefile03</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object = main.o input.o add.o </span><br><span class="line">main: $(object) </span><br><span class="line">gcc -o $(object) </span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">.o: %.c</span></span><br><span class="line">gcc -c $&lt;</span><br><span class="line">.PHONY:clear</span><br><span class="line">clean:</span><br><span class="line">rm *.o</span><br><span class="line">rm main</span><br></pre></td></tr></table></figure></p></li><li><p>makefile04</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对象文件列表</span></span><br><span class="line">object := main.o input.o add.o </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成可执行文件</span></span><br><span class="line">main: $(object)</span><br><span class="line">gcc -o $@ $(object)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成依赖文件列表</span></span><br><span class="line">dep_files := $(foreach f, $(object), .$(f).d) # foreach 循环生成 .main.o.d</span><br><span class="line">dep_files := $(wildcard $(dep_files)) # wildcard 把存在的文件列出来</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有依赖文件，包含它们</span></span><br><span class="line">ifneq ($(dep_files),)</span><br><span class="line">include $(dep_files)</span><br><span class="line">endif</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译规则，生成 .o 和 .d 文件</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">.o: %.c</span></span><br><span class="line">    gcc -Wp,-MD,.$@.d -c $&lt; -o $@</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理</span></span><br><span class="line">.PHONY: clean</span><br><span class="line">clean:</span><br><span class="line">    rm *.o</span><br><span class="line">    rm .*.d</span><br><span class="line">rm main</span><br></pre></td></tr></table></figure></p></li><li><p>执行 <code>Makefile</code> 文件，输入以下代码</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make Makefilr</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="makefile-语法">Makefile 语法</h2><ul><li><p><code>变量与引用变量</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object = main.o input.o add.o </span><br><span class="line">main: $(object) </span><br></pre></td></tr></table></figure></p></li><li><p>将变量的最新值进行赋值给其他变量</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = xxh</span><br><span class="line">newname = $(name) # newname = xxh1230</span><br><span class="line">name = xxh1230</span><br></pre></td></tr></table></figure></p></li><li><p><code>:=</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = xxh</span><br><span class="line">newname := $(name) # newname = xxh</span><br><span class="line">name = xxh1230</span><br></pre></td></tr></table></figure></p></li><li><p><code>?=</code> 若变量之前没有赋值，则赋=后的值</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newname ?= xxh1230 # newname = xxh1230</span><br></pre></td></tr></table></figure></p></li><li><p><code>%</code> 通配符，相当于正则表达式里面的 <code>*</code>,</p></li><li><p><code>$@， $&lt;, $^</code> 自动化变量</p><ul><li><code>$@</code> 目标集</li><li><code>$^</code> 所有的依赖对象集</li><li><code>$&lt;</code> 依赖对象集中的第一个</li></ul><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">main : main.o func1.o func2.o</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$@</span> = main</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$^ = main.o func1.o func2.o</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$&lt; = main.o</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">.o: %.c</span></span><br><span class="line">gcc -c $&lt;</span><br></pre></td></tr></table></figure></p></li><li><p><code>.PHONY:clear</code>声明伪目标，防止文件夹里面有同名的文件导致程序没有执行</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY:clear</span><br><span class="line">rm *.o</span><br><span class="line">rm main</span><br></pre></td></tr></table></figure></p></li><li><p><code>$(foreach &lt;var&gt;;,&lt;list&gt;;,&lt;text&gt;;)</code>函数</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object := main.o input.o add.o </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断是否存在依赖文件</span></span><br><span class="line">dep_flies := $(foreach f, $(object), .$(f).d) # foreach 循环生成 .main.o.d </span><br></pre></td></tr></table></figure></p></li><li><p><code>$(wildcard pattern)</code> 函数</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dep_flies := $(foreach f, $(object), .$(f).d)</span><br><span class="line">dep_flies := $(wilcard, $(dep_flies)) # pattern 把存在的文件列出来</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="automake-的用法">Automake 的用法</h2><h1 id="shell">shell</h1><ul><li><p>简单的shell</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure></p></li><li><p>定义变量</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;please input name&quot;</span><br><span class="line">read name</span><br><span class="line">echo &quot;your name:&quot; $name</span><br></pre></td></tr></table></figure></p></li><li><p>定义双变量</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;please input your name and age&quot; name age</span><br><span class="line">echo &quot;your name: $name, your age: $age&quot;</span><br></pre></td></tr></table></figure></p></li><li><p>变量运算</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;please input two int number&quot;</span><br><span class="line">read -p &quot;first number:&quot; x1</span><br><span class="line">read -p &quot;second number:&quot; x2</span><br><span class="line">y=$(($x1+$x2))</span><br><span class="line">echo &quot;$x1 + $x2 = $y&quot;</span><br></pre></td></tr></table></figure></p></li><li><p>test 与 &amp;&amp; 与 ||</p><ul><li><code>test -e</code> 检测文件是否存在</li><li><code>a &amp;&amp; b</code> a 成立则执行 b</li><li><code>a || b</code> a 不成立则执行 b</li></ul><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;please input file name&quot;</span><br><span class="line">read -p &quot;file name:&quot; name</span><br><span class="line">test -e $name &amp;&amp; echo &quot;$name exit&quot; || echo &quot;$name not exit&quot;  #</span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;please input two string&quot;</span><br><span class="line">read -p &quot;file string:&quot; str_1</span><br><span class="line">read -p &quot;second string:&quot; str_2</span><br><span class="line">test $str_1 == $str_2 &amp;&amp; echo &quot;$str_1=$str_2&quot; || echo &quot;$str_1!=$str_2&quot;  # == 两边有空格</span><br></pre></td></tr></table></figure></p></li><li><p><code>[]</code> 判断符</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;please input two string&quot;</span><br><span class="line">read -p &quot;file string:&quot; str_1</span><br><span class="line">read -p &quot;second string:&quot; str_2</span><br><span class="line">[ &quot;$str_1&quot; == &quot;$str_2&quot; ] &amp;&amp; echo &quot;$str_1=$str_2&quot; || echo &quot;$str_1!=$str_2&quot; # 靠近 [] 两边有空格</span><br></pre></td></tr></table></figure></p></li><li><p>默认变量</p><ul><li><code>$0 - $n</code> $0表示 本身命令 $1 - $n 表示传入的参数</li><li><code>$#</code> 表示最后一个参数的序号</li><li><code>$@</code> 表示 $1 - $n 所有传入的参数</li></ul><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;file name&quot; $0</span><br><span class="line">echo &quot;total param num&quot; $#</span><br><span class="line">echo &quot;first param num&quot; $1</span><br><span class="line">echo &quot;second param num&quot; $2</span><br><span class="line">echo &quot;whole param num&quot; $@</span><br></pre></td></tr></table></figure></p></li><li><p>条件判断 <code>if then fi</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;please input [y/n]&quot; val</span><br><span class="line">if [ $val == &quot;y&quot; ] || [ $val == &quot;Y&quot; ]; then</span><br><span class="line">echo &quot;you input is y&quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line">if [ $val == &quot;n&quot; ] || [ $val == &quot;N&quot; ]; then</span><br><span class="line">echo &quot;you input is n&quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p></li><li><p>条件判断 <code>if then else fi</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;please input [y/n]&quot; val</span><br><span class="line">if [ $val == &quot;y&quot; ] || [ $val == &quot;Y&quot; ]; then</span><br><span class="line">echo &quot;you input is y&quot;</span><br><span class="line">exit 0</span><br><span class="line">else</span><br><span class="line">echo &quot;you input is $val&quot;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p></li><li><p>条件判断 <code>if then elif then else fi</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;please input [y/n]&quot; val</span><br><span class="line">if [ $val == &quot;y&quot; ] || [ $val == &quot;Y&quot; ]; then</span><br><span class="line">echo &quot;you input is y&quot;</span><br><span class="line">exit 0</span><br><span class="line">elif [ $val == &quot;n&quot; ] || [ $val == &quot;N&quot; ]; then</span><br><span class="line">echo &quot;you input is n&quot;</span><br><span class="line">exit 0</span><br><span class="line">else</span><br><span class="line">echo &quot;you input can&#x27;t identify&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p></li><li><p><code>case</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;a&quot;)</span><br><span class="line">echo &quot;you input is a&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;b&quot;)</span><br><span class="line">echo &quot;you input is b&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;you input is $1&quot; </span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p></li><li><p><code>函数</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function help()&#123;</span><br><span class="line">echo &quot;this is help cmd&quot;</span><br><span class="line">&#125;</span><br><span class="line">function close()&#123;</span><br><span class="line">echo &quot;this is close cmd&quot;</span><br><span class="line">&#125;</span><br><span class="line">case $1 in</span><br><span class="line">&quot;-h&quot;)</span><br><span class="line">help</span><br><span class="line">;;</span><br><span class="line">&quot;-c&quot;)</span><br><span class="line">close</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p></li><li><p><code>函数传参</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">print()&#123;</span><br><span class="line">echo &quot;param 1: $1&quot;</span><br><span class="line">echo &quot;param 2: $2&quot;</span><br><span class="line">&#125;</span><br><span class="line">print a b</span><br></pre></td></tr></table></figure></p></li><li><p><code>while do done</code> 与 <code>until do done</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">while [ &quot;$val&quot; != &quot;close&quot; ] # 匹配多个字符串需要加&quot;&quot;</span><br><span class="line">do</span><br><span class="line">read -p &quot;please input string:&quot; val</span><br><span class="line">done</span><br><span class="line">echo &quot;stop while!!&quot;</span><br></pre></td></tr></table></figure></p></li><li><p><code>for do done</code></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for name in xxh1 xxh2 xxh3</span><br><span class="line">do</span><br><span class="line">echo &quot;your name: $name&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;please input count:&quot; val</span><br><span class="line">total=0</span><br><span class="line">for ((i=0; i&lt;=$val; i++))</span><br><span class="line">do</span><br><span class="line">total=$(($i+$total))</span><br><span class="line">done</span><br><span class="line">echo &quot;1+2+...+$val=$total&quot;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window系统如何共享文件夹</title>
      <link href="/posts/9c300b3c.html"/>
      <url>/posts/9c300b3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="共享文件夹">共享文件夹</h1><p>参考视频：<ahref="https://www.bilibili.com/video/BV1W5411S7Ft/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c773d6069c8b3deddb846c9cde19f4b1">win7win10win11局域网共享保姆级教程，手机无线访问局域网电脑，共享文件夹高速传输_哔哩哔哩_bilibili</a></p><ol type="1"><li>打开控制面板选择<code>程序-&gt;程序和功能-&gt;启用或者关闭 Windows 功能-&gt;开启 SMB 1.0/CIFS 文件共享支持</code>，这一步可以跳过，该服务主要提高对旧版本操作系统设备共享文件的兼容性。<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831101841.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831101913.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831101945.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831102013.png"alt="image.png|250" /></li><li>在设置里面打开网络和<code>internet-&gt;高级网络设置-&gt;高级共享设置-&gt;所有网络</code>,开启公用文件夹共享以及有密码保护的共享，如果不需要密码保护的共享就不要开启。其他设备访问共享文件夹就不需要账户以及密码。<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831102608.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831102748.png"alt="image.png|475" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831102905.png"alt="image.png|450" /></li><li>选择需要的文件夹右键点击<code>属性-&gt;共享-&gt;高级共享-&gt;点击共享此文件夹</code>，然后点击权限添加<code>everyone</code>后点击确定。如果只给自己共享不需要对<code>安全权限</code>进行更改，如果给所有人共享需要在安全中的<code>组或者用户名</code>添加<code>everyone</code>，如果给指定人共享需要创建新的用户并添加到<code>组或者用户名</code>中,具体方法见 [[如何共享文件夹#创建新的用户|创建新的用户]]。 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831105726.png"alt="image.png|250" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831105836.png"alt="image.png|250" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831105858.png"alt="image.png|250" /></li></ol><h1 id="创建新的用户">创建新的用户</h1><ol type="1"><li><p>右键<code>此电脑-&gt;管理-&gt;本地用户和组-&gt;用户-&gt;右键新用户-&gt;填入用户名和密码，选择用户不能更改密码以及密码用不过期。</code><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831111022.png"alt="image.png|450" /></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831110255.png"alt="image.png|250" /><figcaption aria-hidden="true">image.png|250</figcaption></figure></li><li><p>点击需要共享的文件夹完成 <code>共享此文件夹</code> 后，点击<code>安全-&gt;编辑-&gt;添加-&gt;高级-&gt;立即查找-&gt;选择刚才创建的账户</code><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831111124.png"alt="image.png|250" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831111150.png"alt="image.png|250" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831111211.png"alt="image.png|250" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240831111233.png"alt="image.png|250" /></p></li></ol><h1 id="访问共享的文件夹">访问共享的文件夹</h1><ol type="1"><li><code>win+r</code> 打开运行输入 <code>cmd</code>打开命令提示符窗口，输入<code>ipconfig</code> 在<code>无线局域网适配器 WLAN</code> 处找到 <code>IPV4</code>的地址,或者打开系统设置找到电脑名称。</li><li>在局域网的另一台电脑的文件夹地址栏上输入 <code>\\ip地址</code> 或者<code>\\电脑名称</code> 回车，输入账户与密码即可。</li><li>在局域网手机上访问共享文件夹，需要支持 <code>SMB</code>服务的软件，例如 cx 文件管理器，新建 <code>SMB</code> 服务，输入主机的ip 地址，与账户与密码即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>郝斌数据结构笔记</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<p>数据结构 = 数据的存储 + 数据的操作 (遍历，查找，删除) 数据的存储 =个体的存储 + 个体之间的关系 算法 = 对存储数据的操作</p><h1 id="复习知识">复习知识</h1><h2 id="数组指针">数组指针</h2><ul><li>用指针实现数组的创建，追加，插入，删除，排序，倒置，打印，以及判断空满状态。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>* pBase; <span class="comment">//数组的首地址</span></span><br><span class="line">    <span class="type">int</span> len; <span class="comment">//数组的规定长度</span></span><br><span class="line">    <span class="type">int</span> cnt; <span class="comment">//数组的实际长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">append_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> pos, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">delay_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> pos, <span class="type">int</span>* val)</span>;</span><br><span class="line"><span class="comment">//bool get();</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">inversion_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    parr-&gt;pBase = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * length);  <span class="comment">// 修正类型转换</span></span><br><span class="line">    <span class="keyword">if</span> (parr-&gt;pBase == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;动态内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        parr-&gt;len = length;</span><br><span class="line">        parr-&gt;cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">append_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_full(parr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组已满\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        parr-&gt;pBase[parr-&gt;cnt] = val;</span><br><span class="line">        parr-&gt;cnt++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parr-&gt;cnt == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parr-&gt;cnt == parr-&gt;len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_empty(parr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组为空\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; parr-&gt;cnt; i++) &#123;  <span class="comment">// 修正 for 循环</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, parr-&gt;pBase[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> pos, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((is_full(parr))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; parr-&gt;len<span class="number">-1</span> || pos &gt; parr-&gt;cnt<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;%d&quot;, parr-&gt;cnt);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = (parr-&gt;cnt - <span class="number">1</span>); i &gt;= pos; i--) &#123;</span><br><span class="line">                parr-&gt;pBase[i + <span class="number">1</span>] = parr-&gt;pBase[i];</span><br><span class="line">            &#125;</span><br><span class="line">            parr-&gt;pBase[pos] = val;</span><br><span class="line">            parr-&gt;cnt++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delay_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr, <span class="type">int</span> pos, <span class="type">int</span>* val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((is_empty(parr))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= parr-&gt;len - <span class="number">1</span> || pos &gt; parr-&gt;cnt<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *val = parr-&gt;pBase[pos];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; parr-&gt;cnt<span class="number">-1</span>; i++) &#123;</span><br><span class="line">                parr-&gt;pBase[i] = parr-&gt;pBase[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            parr-&gt;cnt --;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inversion_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = parr-&gt;cnt - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        temp = parr-&gt;pBase[i];</span><br><span class="line">        parr-&gt;pBase[i] = parr-&gt;pBase[j];</span><br><span class="line">        parr-&gt;pBase[j] = temp;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_arr</span><span class="params">(<span class="keyword">struct</span> Arr* parr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; parr-&gt;cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; parr-&gt;cnt; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parr-&gt;pBase[i] &gt; parr-&gt;pBase[j]) &#123;</span><br><span class="line">                temp = parr-&gt;pBase[i];</span><br><span class="line">                parr-&gt;pBase[i] = parr-&gt;pBase[j];</span><br><span class="line">                parr-&gt;pBase[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">arr</span>;</span></span><br><span class="line">    init_arr(&amp;arr, <span class="number">10</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">-8</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">2</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">6</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">4</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">88</span>);</span><br><span class="line">    append_arr(&amp;arr, <span class="number">1</span>);</span><br><span class="line">    insert_arr(&amp;arr, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    insert_arr(&amp;arr, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">    insert_arr(&amp;arr, <span class="number">5</span>, <span class="number">60</span>);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    <span class="keyword">if</span> (delay_arr(&amp;arr, <span class="number">5</span>, &amp;num)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除的元素是%d\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    show_arr(&amp;arr);  </span><br><span class="line">    inversion_arr(&amp;arr);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    sort_arr(&amp;arr);</span><br><span class="line">    show_arr(&amp;arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体重定义">结构体重定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="type">int</span> sid;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line"><span class="type">int</span> sid;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">4</span>];</span><br><span class="line">&#125;* pter; <span class="comment">// ter 为 struct teacher* 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">worker</span> &#123;</span></span><br><span class="line"><span class="type">int</span> sid;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">4</span>];</span><br><span class="line">&#125;*pwer, wer; <span class="comment">// pwer 为 struct worker* 类型, wer为 struct worker 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">stu a = &#123; <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a.sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a.sex);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">b</span> =</span> &#123; <span class="number">20084</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span> &#125;;</span><br><span class="line">pter pb = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pb-&gt;sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pb-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pb-&gt;sex);</span><br><span class="line">wer c = &#123; <span class="number">18419</span>, <span class="string">&quot;李雪&quot;</span>, <span class="string">&quot;女&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c.sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, c.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, c.sex);</span><br><span class="line">pwer pc = &amp;c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pc-&gt;sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pc-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pc-&gt;sex);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表">链表</h1><h2 id="链表相关知识">链表相关知识</h2><ol type="1"><li><p><strong>定义</strong>：n个节点离散分布，彼此通过指针相连，每个节点只有前向节点一个后向节点，首节点没有前向节点，尾节点只有一个前向节点。</p><p>专业术语：</p><ul><li>首节点：第一个有效节点</li><li>尾节点：最优一个有效节点</li><li>头节点：首节点之前的一个节点，把 0 占掉，方便后续操作</li><li>头指针：指向头节点的指针变量</li><li>尾指针：指向尾节点的指针变量</li></ul></li><li><p><strong>分类</strong>：</p><ul><li>单链表</li><li>双链表：每一个节点有两个指针，一个指针指向前一个节点，一个指针指向后一个节点</li><li>循环链表：能通过一个节点找到其他的所有节点</li><li>非循环链表</li></ul></li><li><p><strong>算法</strong></p><ul><li>遍历</li><li>查找</li><li>清空</li><li>销毁</li><li>求长度</li><li>排序</li><li>删除节点 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240827165650.png"alt="image.png" /></li><li>插入节点 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240827165630.png"alt="image.png" /></li></ul></li><li><p><strong>链表的优缺点</strong> 优点：</p><ul><li>没有空间限制</li><li>插入删除很快 缺点：</li><li>存取速度慢</li></ul></li></ol><h2 id="链表的创建与遍历">链表的创建与遍历</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240827181016.png"alt="image.png" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, *PNODE;</span><br><span class="line"></span><br><span class="line">PNODE <span class="title function_">creat_list</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PNODE <span class="title function_">creat_list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需要链表节点的个数：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line"></span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">PNODE ptail = phead;</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;phead内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第%d节点的值：&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;temp);</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = temp;</span><br><span class="line">pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">ptail-&gt;pnext = pnew;</span><br><span class="line">ptail = pnew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p_temp-&gt;data);</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">PNODE phead = <span class="literal">NULL</span>;</span><br><span class="line">phead = creat_list(); <span class="comment">//创建一个非循环单链表</span></span><br><span class="line">traverse_list(phead);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="链表是否为空">链表是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">list_is_empty</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_is_empty</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> phead-&gt;pnext == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的长度">链表的长度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">len += <span class="number">1</span>;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表插入">链表插入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span> val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">PNODE p = phead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i &lt; pos - <span class="number">1</span>) &#123; <span class="comment">// 在 pos 大于 0 的情况下，找到 pos 前一个节点 或者最后一个节点</span></span><br><span class="line">p = p-&gt;pnext;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; pos - <span class="number">1</span> || p == <span class="literal">NULL</span>) &#123; <span class="comment">// 去除一些非法的 pos</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = p-&gt;pnext;</span><br><span class="line">p-&gt;pnext = pnew;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表删除">链表删除</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span>* val)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">PNODE p = phead;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;pnext != <span class="literal">NULL</span> &amp;&amp; i &lt; pos - <span class="number">1</span>) &#123; <span class="comment">// 只有一个数的链表不能移除，找到 pos 前一个节点</span></span><br><span class="line">p = p-&gt;pnext;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; pos - <span class="number">1</span> || p-&gt;pnext == <span class="literal">NULL</span>) &#123; <span class="comment">// </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE prm;</span><br><span class="line">prm = p-&gt;pnext;</span><br><span class="line">*val = prm-&gt;data;</span><br><span class="line">p-&gt;pnext = p-&gt;pnext-&gt;pnext;</span><br><span class="line"><span class="built_in">free</span>(prm);</span><br><span class="line">prm = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表追加">链表追加</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">append_list</span><span class="params">(PNODE phead, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">PNODE p_temp = phead;</span><br><span class="line"><span class="keyword">while</span> (p_temp-&gt;pnext != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">p_temp-&gt;pnext = pnew;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表排序">链表排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(PNODE phead, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">PNODE p1_temp, p2_temp;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, p1_temp = phead-&gt;pnext; i &lt; len<span class="number">-1</span>; i++, p1_temp = p1_temp-&gt;pnext) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = i+<span class="number">1</span>, p2_temp = p1_temp-&gt;pnext; j &lt; len; j++, p2_temp = p2_temp-&gt;pnext) &#123;</span><br><span class="line"><span class="keyword">if</span> (p1_temp-&gt;data &gt; p2_temp-&gt;data) &#123;</span><br><span class="line">temp = p1_temp-&gt;data;</span><br><span class="line">p1_temp-&gt;data = p2_temp-&gt;data;</span><br><span class="line">p2_temp-&gt;data = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表查找">链表查找</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">find_list</span><span class="params">(PNODE phead, <span class="type">int</span> val, PNODE pos)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p_temp-&gt;data == val) &#123;</span><br><span class="line">append_list(pos, p);</span><br><span class="line">&#125;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表替换">链表替换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">replace_list</span><span class="params">(PNODE phead, <span class="type">int</span> org_num, <span class="type">int</span> re_num)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p_temp-&gt;data == org_num) &#123;</span><br><span class="line">p_temp-&gt;data = re_num;</span><br><span class="line">&#125;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p!=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码">完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, *PNODE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PNODE <span class="title function_">creat_list</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_is_empty</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(PNODE phead)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span>* val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">append_list</span><span class="params">(PNODE phead, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(PNODE phead, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">find_list</span><span class="params">(PNODE phead, <span class="type">int</span> val, PNODE pos)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">replace_list</span><span class="params">(PNODE phead, <span class="type">int</span> org_num, <span class="type">int</span> re_num)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PNODE <span class="title function_">creat_list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入需要链表节点的个数：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line"></span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">PNODE ptail = phead;</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;phead内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">phead-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入第%d节点的值：&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;temp);</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = temp;</span><br><span class="line">pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">ptail-&gt;pnext = pnew;</span><br><span class="line">ptail = pnew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PNODE <span class="title function_">creat_list_v2</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;phead内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">phead-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p_temp-&gt;data);</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_is_empty</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> phead-&gt;pnext == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(PNODE phead)</span> &#123;</span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">len += <span class="number">1</span>;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(PNODE phead, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">PNODE p1_temp, p2_temp;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, p1_temp = phead-&gt;pnext; i &lt; len<span class="number">-1</span>; i++, p1_temp = p1_temp-&gt;pnext) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = i+<span class="number">1</span>, p2_temp = p1_temp-&gt;pnext; j &lt; len; j++, p2_temp = p2_temp-&gt;pnext) &#123;</span><br><span class="line"><span class="keyword">if</span> (p1_temp-&gt;data &gt; p2_temp-&gt;data) &#123;</span><br><span class="line">temp = p1_temp-&gt;data;</span><br><span class="line">p1_temp-&gt;data = p2_temp-&gt;data;</span><br><span class="line">p2_temp-&gt;data = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">PNODE p = phead;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i &lt; pos - <span class="number">1</span>) &#123; <span class="comment">// 在 pos 大于 0 的情况下，找到 pos 前一个节点 或者最后一个节点</span></span><br><span class="line">p = p-&gt;pnext;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; pos - <span class="number">1</span> || p == <span class="literal">NULL</span>) &#123; <span class="comment">// 去除一些非法的 pos</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = p-&gt;pnext;</span><br><span class="line">p-&gt;pnext = pnew;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(PNODE phead, <span class="type">int</span> pos, <span class="type">int</span>* val)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">PNODE p = phead;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;pnext != <span class="literal">NULL</span> &amp;&amp; i &lt; pos - <span class="number">1</span>) &#123; <span class="comment">// 只有一个数的链表不能移除，找到 pos 前一个节点</span></span><br><span class="line">p = p-&gt;pnext;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; pos - <span class="number">1</span> || p-&gt;pnext == <span class="literal">NULL</span>) &#123; <span class="comment">// </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE prm;</span><br><span class="line">prm = p-&gt;pnext;</span><br><span class="line">*val = prm-&gt;data;</span><br><span class="line">p-&gt;pnext = p-&gt;pnext-&gt;pnext;</span><br><span class="line"><span class="built_in">free</span>(prm);</span><br><span class="line">prm = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append_list</span><span class="params">(PNODE phead, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">PNODE p_temp = phead;</span><br><span class="line"><span class="keyword">while</span> (p_temp-&gt;pnext != <span class="literal">NULL</span>) &#123;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew内存分配失败,程序终止&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">p_temp-&gt;pnext = pnew;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">find_list</span><span class="params">(PNODE phead, <span class="type">int</span> val, PNODE pos)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p_temp-&gt;data == val) &#123;</span><br><span class="line">append_list(pos, p);</span><br><span class="line">&#125;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">replace_list</span><span class="params">(PNODE phead, <span class="type">int</span> org_num, <span class="type">int</span> re_num)</span> &#123;</span><br><span class="line">PNODE p_temp = phead-&gt;pnext;</span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p_temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p_temp-&gt;data == org_num) &#123;</span><br><span class="line">p_temp-&gt;data = re_num;</span><br><span class="line">&#125;</span><br><span class="line">p_temp = p_temp-&gt;pnext;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p!=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int main() &#123;</span></span><br><span class="line"><span class="comment">//PNODE phead = NULL;</span></span><br><span class="line"><span class="comment">//PNODE pos = NULL;</span></span><br><span class="line"><span class="comment">//int len;</span></span><br><span class="line"><span class="comment">//int rm_num;</span></span><br><span class="line"><span class="comment">//int find_num = 5;</span></span><br><span class="line"><span class="comment">//phead = creat_list(); //创建一个非循环单链表</span></span><br><span class="line"><span class="comment">//pos = creat_list_v2();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if (list_is_empty(phead)) &#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;链表为空\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else &#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;链表非空\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//len = length_list(phead);  //求链表的长度</span></span><br><span class="line"><span class="comment">//printf(&quot;链表长度是%d\n&quot;, len);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//insert_list(phead, len, 99); //在链表任意位置插入 val </span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sort_list(phead, len); //在链表排序</span></span><br><span class="line"><span class="comment">//printf(&quot;链表排序后的顺序是\n&quot;);</span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//delete_list(phead, 2, &amp;rm_num); //删除指定位置的链表</span></span><br><span class="line"><span class="comment">//printf(&quot;移除的数字是%d\n&quot;, rm_num);</span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//append_list(phead, 100); //在链表末尾追加 val</span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (find_list(phead, find_num, pos)) &#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;链表中找到的 %d 的位置是：&quot;,  find_num);</span></span><br><span class="line"><span class="comment">//traverse_list(pos);</span></span><br><span class="line"><span class="comment">//free(pos);</span></span><br><span class="line"><span class="comment">//replace_list(phead, find_num, -1);</span></span><br><span class="line"><span class="comment">//traverse_list(phead);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else &#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;链表中不存在 %d \n&quot;, find_num);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="栈">栈</h1><h2 id="栈相关知识">栈相关知识</h2><ol type="1"><li>定义：一种先进后出的存储结构</li><li>分类：<ul><li>静态栈，以数组的存储方法</li><li>动态栈，以数链表的存储方法</li></ul></li><li>算法<ul><li>初始化 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240829212622.png"alt="image.png|275" /></li><li>出栈</li><li>入栈 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240829212705.png"alt="image.png|275" /></li></ul></li><li>应用<ul><li>函数调用</li><li>中断</li><li>表达式求值</li><li>内存分配</li><li>缓冲处理</li><li>迷宫</li></ul></li></ol><h2 id="栈初始化">栈初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, * PNODE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">PNODE ptop;</span><br><span class="line">PNODE pbottom;</span><br><span class="line">&#125;STACK, *PSTACK;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;phead 内存分配失败&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pstack-&gt;pbottom = phead;</span><br><span class="line">pstack-&gt;ptop = phead;</span><br><span class="line">pstack-&gt;ptop-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆栈">堆栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span> val)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew 内存分配失败&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = pstack-&gt;ptop;</span><br><span class="line">pstack-&gt;ptop = pnew;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出栈">出栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">pop_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span>* val)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">pop_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span>* val)</span> &#123;</span><br><span class="line">PNODE ptemp= pstack-&gt;ptop;</span><br><span class="line"><span class="keyword">if</span> (is_empty_stack(pstack)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pstack-&gt;ptop = pstack-&gt;ptop-&gt;pnext;</span><br><span class="line">*val = ptemp-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(ptemp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈是否为空">栈是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pstack-&gt;ptop == pstack-&gt;pbottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的遍历">栈的遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">traverse_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE ptop = pstack-&gt;ptop;</span><br><span class="line"><span class="keyword">while</span> (ptop != pstack-&gt;pbottom) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptop-&gt;data);</span><br><span class="line">ptop = ptop-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的清空">栈的清空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">clear_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE ptop = pstack-&gt;ptop;</span><br><span class="line">PNODE ptemp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (is_empty_stack(pstack)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (ptop != pstack-&gt;pbottom) &#123;</span><br><span class="line">ptemp = ptop;</span><br><span class="line">ptop = ptop-&gt;pnext;</span><br><span class="line"><span class="built_in">free</span>(ptemp);</span><br><span class="line">&#125;</span><br><span class="line">pstack-&gt;ptop = pstack-&gt;pbottom;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码-1">完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pnext</span>;</span></span><br><span class="line">&#125;NODE, * PNODE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">PNODE ptop;</span><br><span class="line">PNODE pbottom;</span><br><span class="line">&#125;STACK, *PSTACK;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">pop_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span>* val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_stack</span><span class="params">(PSTACK pstack)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;phead 内存分配失败&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pstack-&gt;pbottom = phead;</span><br><span class="line">pstack-&gt;ptop = phead;</span><br><span class="line">pstack-&gt;ptop-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pstack-&gt;ptop == pstack-&gt;pbottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pnew 内存分配失败&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;pnext = pstack-&gt;ptop;</span><br><span class="line">pstack-&gt;ptop = pnew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">pop_stack</span><span class="params">(PSTACK pstack, <span class="type">int</span>* val)</span> &#123;</span><br><span class="line">PNODE ptemp= pstack-&gt;ptop;</span><br><span class="line"><span class="keyword">if</span> (is_empty_stack(pstack)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pstack-&gt;ptop = pstack-&gt;ptop-&gt;pnext;</span><br><span class="line">*val = ptemp-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(ptemp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE ptop = pstack-&gt;ptop;</span><br><span class="line"><span class="keyword">while</span> (ptop != pstack-&gt;pbottom) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptop-&gt;data);</span><br><span class="line">ptop = ptop-&gt;pnext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_stack</span><span class="params">(PSTACK pstack)</span> &#123;</span><br><span class="line">PNODE ptop = pstack-&gt;ptop;</span><br><span class="line">PNODE ptemp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (is_empty_stack(pstack)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (ptop != pstack-&gt;pbottom) &#123;</span><br><span class="line">ptemp = ptop;</span><br><span class="line">ptop = ptop-&gt;pnext;</span><br><span class="line"><span class="built_in">free</span>(ptemp);</span><br><span class="line">&#125;</span><br><span class="line">pstack-&gt;ptop = pstack-&gt;pbottom;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">STACK S;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">init_stack(&amp;S);</span><br><span class="line">push_stack(&amp;S, <span class="number">1</span>);</span><br><span class="line">push_stack(&amp;S, <span class="number">2</span>);</span><br><span class="line">push_stack(&amp;S, <span class="number">3</span>);</span><br><span class="line">push_stack(&amp;S, <span class="number">4</span>);</span><br><span class="line">push_stack(&amp;S, <span class="number">5</span>);</span><br><span class="line">push_stack(&amp;S, <span class="number">6</span>);</span><br><span class="line">traverse_stack(&amp;S);</span><br><span class="line"><span class="keyword">if</span> (pop_stack(&amp;S, &amp;val)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 出栈成功\n&quot;</span>, val);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出栈失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">traverse_stack(&amp;S);</span><br><span class="line"></span><br><span class="line">clear_stack(&amp;S);</span><br><span class="line"><span class="keyword">if</span> (pop_stack(&amp;S, &amp;val)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 出栈成功\n&quot;</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;出栈失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">traverse_stack(&amp;S);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列">队列</h1><h2 id="队列相关知识">队列相关知识</h2><ol type="1"><li>定义：一种前进先出的存储结构</li><li>分类<ul><li>链式队列</li><li>静态（数组）队列，通常都必须是循环队列<ul><li><strong>静态队列为什么必须是循环队列？</strong><ul><li>答：静态队列的长度是固定的，插入元素 front 增加与删除元素 rear增加，只能增加会导致内存浪费，以及溢出。</li></ul></li><li><strong>循环队列需要几个参数来确定，以及这些参数的含义？</strong><ul><li>答：2 个参数，front， rear；初始化 front=rear=0；队列非空 front表示队列第一个有效的元素，rear 表示队列最后一个有效的元素；队列为空front=rear；</li></ul></li><li>入队</li><li>出队</li><li>判断队列是否为空</li><li>判断队列是否为满 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240829224733.png"alt="image.png" /> 在循环队列中 rear 与 front 无大小关系，rear 可能比front 也可能比 front 小</li></ul></li></ul></li><li>算法<ul><li>队列初始化</li><li>入队</li><li>出队</li><li>队列的遍历</li></ul></li><li>队列的应用<ul><li>所有和时间有关的操作</li></ul></li></ol><h2 id="队列初始化">队列初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">init_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line">pq-&gt;pbase = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len_queue);</span><br><span class="line">pq-&gt;front = <span class="number">0</span>;</span><br><span class="line">pq-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列是否为空">队列是否为空</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pq-&gt;rear == pq-&gt;front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列是否为满">队列是否为满</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_full_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((pq-&gt;rear + <span class="number">1</span>)% len_queue) == pq-&gt;front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入队">入队</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span> val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!is_full_queue(pq)) &#123;</span><br><span class="line">pq-&gt;pbase[pq-&gt;rear] = val;</span><br><span class="line">pq-&gt;rear = (pq-&gt;rear + <span class="number">1</span>) % len_queue;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出队">出队</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span>* val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span>* val)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(pq)) &#123;</span><br><span class="line">*val = pq-&gt;pbase[pq-&gt;front];</span><br><span class="line">pq-&gt;front = (pq-&gt;front + <span class="number">1</span>) % len_queue;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列的遍历">队列的遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="type">int</span> n = pq-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (n != pq-&gt;rear) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pq-&gt;pbase[n]);</span><br><span class="line">n = (n + <span class="number">1</span>) % len_queue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整体代码">整体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="type">int</span>* pbase;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len_queue = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span>* val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE* pq)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pq-&gt;rear == pq-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line">pq-&gt;pbase = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len_queue);</span><br><span class="line">pq-&gt;front = <span class="number">0</span>;</span><br><span class="line">pq-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_full_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((pq-&gt;rear + <span class="number">1</span>)% len_queue) == pq-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!is_full_queue(pq)) &#123;</span><br><span class="line">pq-&gt;pbase[pq-&gt;rear] = val;</span><br><span class="line">pq-&gt;rear = (pq-&gt;rear + <span class="number">1</span>) % len_queue;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE* pq, <span class="type">int</span>* val)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_empty_queue(pq)) &#123;</span><br><span class="line">*val = pq-&gt;pbase[pq-&gt;front];</span><br><span class="line">pq-&gt;front = (pq-&gt;front + <span class="number">1</span>) % len_queue;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE* pq)</span> &#123;</span><br><span class="line"><span class="type">int</span> n = pq-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (n != pq-&gt;rear) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pq-&gt;pbase[n]);</span><br><span class="line">n = (n + <span class="number">1</span>) % len_queue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int main(void) &#123;</span></span><br><span class="line"><span class="comment">//QUEUE Q;</span></span><br><span class="line"><span class="comment">//int val;</span></span><br><span class="line"><span class="comment">//init_queue(&amp;Q);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 1);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 2);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 3);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 4);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 5);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 6);</span></span><br><span class="line"><span class="comment">//en_queue(&amp;Q, 7);</span></span><br><span class="line"><span class="comment">//traverse_queue(&amp;Q);</span></span><br><span class="line"><span class="comment">//if(out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//if (out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//if (out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//if (out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//if (out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//if (out_queue(&amp;Q, &amp;val)) printf(&quot;%d 出队\n&quot;, val);</span></span><br><span class="line"><span class="comment">//else printf(&quot;出队失败\n&quot;);</span></span><br><span class="line"><span class="comment">//traverse_queue(&amp;Q);</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="递归">递归</h1><h2 id="递归相关知识">递归相关知识</h2><ol type="1"><li>定义：函数直接或者间接调用自己，递归的思想是把一个问题不断分割为子问题，当子问题规模很小不需要继续分割时，可以反过来求出原来问题的答案。</li><li>例子<ul><li>求阶乘</li><li>汉诺塔</li><li>走迷宫</li></ul></li><li>递归必须满足的三个条件<ul><li>递归必须得有一个明确的终止条件</li><li>该函数所处理的数据规模必须在递减</li><li>这个转化必须是可解的</li></ul></li><li>递归与循环的优缺点<ul><li>递归：易于理解，速度慢，所需存储空间大</li><li>循环：不易理解，速度快，所需存储空间小</li></ul></li></ol><h2 id="汉诺塔代码">汉诺塔代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  <span class="comment">// 用于 malloc 和 free</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hannota</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 把 a 柱子上的 n-1 个盘子 通过 c 柱子 移动到 b 柱子</span></span><br><span class="line"><span class="comment">2. a 柱子上的盘子移动到 c 柱子</span></span><br><span class="line"><span class="comment">3. 把 b 柱子上 n-1 个盘子 通过 a 柱子 移动到 c 柱子</span></span><br><span class="line"><span class="comment">// 这里的 n 既是 剩余盘子的个数又是最下面一个盘子的编号</span></span><br><span class="line"><span class="comment">递归的终止并不意味着整个递归过程结束，而是意味着当前的递归层级结束。首先要理解递归的执行过程：</span></span><br><span class="line"><span class="comment">每次出现 --------end-------- 出现意味着当前递归的结束，但外层的递归还没结束，只有最外层的的递归 n == 1，整个程序才终止</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-end-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;把编号为 %d 的盘子从 %c 柱子移动到 % c 柱子\n&quot;</span>, n, a, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">hannota(n - <span class="number">1</span>, a, c, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;把编号为 %d 的盘子从 %c 柱子移动到 % c 柱子\n&quot;</span>, n, a, c);</span><br><span class="line">hannota(n - <span class="number">1</span>, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">hannota(<span class="number">5</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter的使用</title>
      <link href="/posts/93a4bc9e.html"/>
      <url>/posts/93a4bc9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="一tkinter-简单介绍">一、Tkinter 简单介绍</h1><p>Tkinter 是使用 python 进行窗口视窗设计的模块。tkinter是python自带的，可以编辑的GUI界面，我们可以用GUI 实现很多直观的功能。</p><h2 id="tkinter-模块元素简要说明"> Tkinter 模块元素简要说明</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716101319.png" /></p><p>Tkinter支持16个核心的窗口部件，这个16个核心窗口部件类简要描述如下：</p><ul><li><p><strong>Button：</strong>一个简单的按钮，用来执行一个命令或别的操作。</p></li><li><p><strong>Canvas：</strong>组织图形。这个部件可以用来绘制图表和图，创建图形编辑器，实现定制窗口部件。</p></li><li><p><strong>Checkbutton：</strong>代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换。</p></li><li><p><strong>Entry：</strong> 文本输入域。</p></li><li><p><strong>Frame：</strong>一个容器窗口部件。帧可以有边框和背景，当创建一个应用程序或dialog(对话）版面时，帧被用来组织其它的窗口部件。</p></li><li><p><strong>Label：</strong> 显示一个文本或图象。</p></li><li><p><strong>Listbox：</strong>显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。</p></li><li><p><strong>Menu：</strong>菜单条。用来实现下拉和弹出式菜单。</p></li><li><p><strong>Menubutton：</strong>菜单按钮。用来实现下拉式菜单。</p></li><li><p><strong>Message：</strong>显示一文本。类似label窗口部件，但是能够自动地调整文本到给定的宽度或比率。</p></li><li><p><strong>Radiobutton：</strong>代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。</p></li><li><p><strong>Scale：</strong> 允许你通过滑块来设置一数字值。</p></li><li><p><strong>Scrollbar：</strong> 为配合使用canvas, entry, listbox,and text窗口部件的标准滚动条。</p></li><li><p><strong>Text：</strong>格式化文本显示。允许你用不同的样式和属性来显示和编辑文本。同时支持内嵌图象和窗口。</p></li><li><p><strong>Toplevel：</strong>一个容器窗口部件，作为一个单独的、最上面的窗口显示。</p></li><li><p><strong>messageBox</strong>：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox)</p></li></ul><p>注意在Tkinter中窗口部件类没有分级；所有的窗口部件类在树中都是兄弟关系。</p><p>所有这些窗口部件提供了Misc和几何管理方法、配置管理方法和部件自己定义的另外的方法。此外，Toplevel类也提供窗口管理接口。这意味一个典型的窗口部件类提供了大约150种方法。</p><h1 id="二代码实践">二、代码实践</h1><h2 id="label">1. Label</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window  </span></span><br><span class="line">window = tk.Tk()  </span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字  </span></span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)  </span></span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定标签  </span></span><br><span class="line">l = tk.Label(window, text=<span class="string">&#x27;你好，世界&#x27;</span>, bg=<span class="string">&#x27;#97FFFF&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">13</span>), width=<span class="number">20</span>, height=<span class="number">2</span>)  </span><br><span class="line"><span class="comment"># 第5步，放置标签  </span></span><br><span class="line">l.pack()  </span><br><span class="line"><span class="comment"># 第6步，主窗口循环显示  </span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102007.png" /></p><h2 id="button">2.Button</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义一个函数功能  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():  </span><br><span class="line">    <span class="keyword">global</span> on_hit  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> on_hit:  </span><br><span class="line">        on_hit = <span class="literal">True</span>  </span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;你好，世界!&#x27;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        on_hit = <span class="literal">False</span>  </span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">on_hit = <span class="literal">False</span>  </span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window  </span></span><br><span class="line">window = tk.Tk()  </span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字  </span></span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)  </span></span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定标签  </span></span><br><span class="line">var = tk.StringVar()  <span class="comment"># 将label标签的内容设置为字符类型，用var来接收hit_me函数的传出内容用以显示在标签上  </span></span><br><span class="line"><span class="comment"># 说明： bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高  </span></span><br><span class="line">l = tk.Label(window, textvariable=var, bg=<span class="string">&#x27;#97FFFF&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">12</span>), width=<span class="number">30</span>, height=<span class="number">2</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line"><span class="comment"># 第5步，在窗口界面设置放置Button按键  </span></span><br><span class="line">b = tk.Button(window, text=<span class="string">&#x27;点我&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">12</span>), width=<span class="number">10</span>, height=<span class="number">1</span>, command=hit_me)  </span><br><span class="line">b.pack()  </span><br><span class="line"><span class="comment"># 第6步，主窗口循环显示  </span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102126.png" /></p><h2 id="entry">3.Entry</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window  </span></span><br><span class="line">window = tk.Tk()  </span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字  </span></span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)  </span></span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定输入框控件entry并放置控件  </span></span><br><span class="line">e1 = tk.Entry(window, show=<span class="string">&#x27;*&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">14</span>))  <span class="comment"># 显示成密文形式  </span></span><br><span class="line">e2 = tk.Entry(window, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">14</span>))  <span class="comment"># 显示成明文形式  </span></span><br><span class="line">e1.pack()  </span><br><span class="line">e2.pack()  </span><br><span class="line"><span class="comment"># 第5步，主窗口循环显示  </span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102519.png" /></p><h2 id="text">4.Text</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 第7步，创建并放置两个按钮分别触发两种情况  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_point</span>():  </span><br><span class="line">    var = e.get()  </span><br><span class="line">    t.insert(<span class="string">&#x27;insert&#x27;</span>, var)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_end</span>():  </span><br><span class="line">    var = e.get()  </span><br><span class="line">    t.insert(<span class="string">&#x27;end&#x27;</span>, var)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 第1步，实例化object，建立窗口window  </span></span><br><span class="line">window = tk.Tk()  </span><br><span class="line"><span class="comment"># 第2步，给窗口的可视化起名字  </span></span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第3步，设定窗口的大小(长 * 宽)  </span></span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line"><span class="comment"># 第4步，在图形界面上设定输入框控件entry框并放置  </span></span><br><span class="line">e = tk.Entry(window, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">14</span>))  </span><br><span class="line">e.pack()  </span><br><span class="line"><span class="comment"># 第5步，创建并放置两个按钮分别触发两种情况  </span></span><br><span class="line">b1 = tk.Button(window, text=<span class="string">&#x27;insert point&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">12</span>), width=<span class="number">10</span>, height=<span class="number">2</span>, command=insert_point)  </span><br><span class="line">b1.pack()  </span><br><span class="line">b2 = tk.Button(window, text=<span class="string">&#x27;insert end&#x27;</span>, font=(<span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="number">12</span>), width=<span class="number">10</span>, height=<span class="number">2</span>, command=insert_point)  </span><br><span class="line">b2.pack()  </span><br><span class="line"><span class="comment"># 第6步，创建并放置一个多行文本框text用以显示，指定height=3为文本框是三个字符高度  </span></span><br><span class="line">t = tk.Text(window, height=<span class="number">3</span>)  </span><br><span class="line">t.pack()  </span><br><span class="line"><span class="comment"># 第8步，主窗口循环显示  </span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102634.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="listbox">5.Listbox</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():  </span><br><span class="line">    value = lb.get(lb.curselection())  </span><br><span class="line">    var1.<span class="built_in">set</span>(value)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line">var1 = tk.StringVar()  </span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;green&#x27;</span>, fg=<span class="string">&#x27;yellow&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>), width=<span class="number">10</span>, textvariable=var1)  </span><br><span class="line">l.pack()  </span><br><span class="line">b1 = tk.Button(window, text=<span class="string">&#x27;print selection&#x27;</span>, width=<span class="number">15</span>, height=<span class="number">2</span>, command=print_selection)  </span><br><span class="line">b1.pack()  </span><br><span class="line"><span class="comment"># 方法1：创建Listbox并为其添加内容  </span></span><br><span class="line">var2 = tk.StringVar()  </span><br><span class="line">var2.<span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))  </span><br><span class="line">lb = tk.Listbox(window, listvariable=var2)  </span><br><span class="line"><span class="comment"># 方法2：创建一个list并将值循环添加到Listbox控件中  </span></span><br><span class="line">list_items = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]  </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_items:  </span><br><span class="line">    lb.insert(<span class="string">&#x27;end&#x27;</span>, item)  </span><br><span class="line"><span class="comment"># 方法3：  </span></span><br><span class="line">lb.insert(<span class="number">1</span>, <span class="string">&#x27;first&#x27;</span>)  </span><br><span class="line">lb.insert(<span class="number">2</span>, <span class="string">&#x27;second&#x27;</span>)  </span><br><span class="line">lb.delete(<span class="number">2</span>)  </span><br><span class="line">lb.pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102730.png" /></p><h2 id="radiobutton">6.Radiobutton</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():  </span><br><span class="line">    l.config(text=<span class="string">&#x27;you have selected &#x27;</span> + var.get())  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">var = tk.StringVar()  <span class="comment"># 定义var为字符串类型变量用来存放返回值  </span></span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line"><span class="comment"># 创建三个radiobutton选项，其中variable=var, value=&#x27;A&#x27;的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable  </span></span><br><span class="line">r1 = tk.Radiobutton(window, text=<span class="string">&#x27;Option A&#x27;</span>, variable=var, value=<span class="string">&#x27;A&#x27;</span>, command=print_selection)  </span><br><span class="line">r1.pack()  </span><br><span class="line">r2 = tk.Radiobutton(window, text=<span class="string">&#x27;Option B&#x27;</span>, variable=var, value=<span class="string">&#x27;B&#x27;</span>, command=print_selection)  </span><br><span class="line">r2.pack()  </span><br><span class="line">r3 = tk.Radiobutton(window, text=<span class="string">&#x27;Option C&#x27;</span>, variable=var, value=<span class="string">&#x27;C&#x27;</span>, command=print_selection)  </span><br><span class="line">r3.pack()  </span><br><span class="line">window.mainloop()  </span><br><span class="line"><span class="built_in">print</span>(var.get())</span><br></pre></td></tr></table></figure><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102823.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h2 id="checkbutton">7.Checkbutton</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():  </span><br><span class="line">    <span class="keyword">if</span> (var1.get() == <span class="number">1</span>) &amp; (var2.get() == <span class="number">0</span>):  </span><br><span class="line">        l.config(text=<span class="string">&#x27;I love only Python&#x27;</span>)  </span><br><span class="line">    <span class="keyword">elif</span> (var1.get() == <span class="number">0</span>) &amp; (var2.get() == <span class="number">0</span>):  </span><br><span class="line">        l.config(text=<span class="string">&#x27;I love only C++&#x27;</span>)  </span><br><span class="line">    <span class="keyword">elif</span> (var1.get() == <span class="number">0</span>) &amp; (var2.get() == <span class="number">0</span>):  </span><br><span class="line">        l.config(text=<span class="string">&#x27;I do not love either&#x27;</span>)  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        l.config(text=<span class="string">&#x27;I love both&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 定义两个Checkbutton选项并放置  </span></span><br><span class="line">var1 = tk.IntVar()  <span class="comment"># 定义var1和var2整型变量用来存放选择行为返回值  </span></span><br><span class="line">var2 = tk.IntVar()  </span><br><span class="line">c1 = tk.Checkbutton(window, text=<span class="string">&#x27;python&#x27;</span>, variable=var1, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>, command=print_selection)  </span><br><span class="line">c2 = tk.Checkbutton(window, text=<span class="string">&#x27;C++&#x27;</span>, variable=var2, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>, command=print_selection)  </span><br><span class="line">c1.pack()  </span><br><span class="line">c2.pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716102935.png" /></p><h2 id="scale">8.Scale</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>(<span class="params">v</span>):  </span><br><span class="line">    l.config(text=<span class="string">&#x27;you have selected &#x27;</span> + v)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x200&#x27;</span>)  </span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0.01，触发调用print_selection函数  </span></span><br><span class="line"><span class="comment"># orient=tk.HORIZONTAL：表示滑块是水平放置的，从左到右滑动。  </span></span><br><span class="line"><span class="comment"># orient=tk.VERTICAL：表示滑块是垂直放置的，从上到下滑动。  </span></span><br><span class="line">s = tk.Scale(  </span><br><span class="line">    window,  </span><br><span class="line">    <span class="comment"># label=&#x27;try me&#x27;,  </span></span><br><span class="line">    from_=<span class="number">0</span>,  </span><br><span class="line">    to=<span class="number">100</span>,  </span><br><span class="line">    orient=tk.HORIZONTAL,  </span><br><span class="line">    length=<span class="number">200</span>,  </span><br><span class="line">    showvalue=<span class="literal">True</span>,  <span class="comment"># 是否显示当前滑块的值  </span></span><br><span class="line">    tickinterval=<span class="number">20</span>,  </span><br><span class="line">    resolution=<span class="number">1</span>,  </span><br><span class="line">    command=print_selection)  </span><br><span class="line">s.<span class="built_in">set</span>(<span class="number">85</span>)  </span><br><span class="line">s.pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716103051.png" /></p><h2 id="canvas">9.Canvas</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moveit</span>():  </span><br><span class="line">    canvas.move(rect, <span class="number">2</span>, <span class="number">2</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建画布  </span></span><br><span class="line">canvas = tk.Canvas(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">400</span>, height=<span class="number">200</span>)  </span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">r&#x27;D:\图片\头像\thumbnail.jpg&#x27;</span>)  </span><br><span class="line">image_file = ImageTk.PhotoImage(image)  </span><br><span class="line">image = canvas.create_image(<span class="number">200</span>, <span class="number">20</span>, anchor=<span class="string">&#x27;n&#x27;</span>, image=image_file)  </span><br><span class="line">rect = canvas.create_rectangle(<span class="number">330</span>, <span class="number">30</span>, <span class="number">330</span>+<span class="number">20</span>, <span class="number">30</span>+<span class="number">20</span>)  </span><br><span class="line">canvas.pack()  </span><br><span class="line">b = tk.Button(window, text=<span class="string">&#x27;move item&#x27;</span>, command=moveit)  </span><br><span class="line">b.pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716103313.png" /></p><h2 id="frame">10.Frame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;on the window&#x27;</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个主frame，长在主window窗口上  </span></span><br><span class="line">frame = tk.Frame(window)  </span><br><span class="line">frame.pack()  </span><br><span class="line"><span class="comment"># 创建一个主frame，长在主window窗口上  </span></span><br><span class="line">frame_l = tk.Frame(frame)  <span class="comment"># 第二层frame，左frame，长在主frame上  </span></span><br><span class="line">frame_r = tk.Frame(frame)  <span class="comment"># 第二层frame，右frame，长在主frame上  </span></span><br><span class="line">frame_l.pack(side=<span class="string">&#x27;left&#x27;</span>)  </span><br><span class="line">frame_r.pack(side=<span class="string">&#x27;right&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">tk.Label(frame_l, text=<span class="string">&#x27;on the frame_l1&#x27;</span>, bg=<span class="string">&#x27;#FFBBFF&#x27;</span>).pack()  </span><br><span class="line">tk.Label(frame_l, text=<span class="string">&#x27;on the frame_l2&#x27;</span>, bg=<span class="string">&#x27;#FFBBFF&#x27;</span>).pack()  </span><br><span class="line">tk.Label(frame_l, text=<span class="string">&#x27;on the frame_l3&#x27;</span>, bg=<span class="string">&#x27;#FFBBFF&#x27;</span>).pack()  </span><br><span class="line">tk.Label(frame_r, text=<span class="string">&#x27;on the frame_r1&#x27;</span>, bg=<span class="string">&#x27;#FFE1FF&#x27;</span>).pack()  </span><br><span class="line">tk.Label(frame_r, text=<span class="string">&#x27;on the frame_r2&#x27;</span>, bg=<span class="string">&#x27;#FFE1FF&#x27;</span>).pack()  </span><br><span class="line">tk.Label(frame_r, text=<span class="string">&#x27;on the frame_r3&#x27;</span>, bg=<span class="string">&#x27;#FFE1FF&#x27;</span>).pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716103520.png" /></p><h2 id="menu">11.Menu</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_job</span>():  </span><br><span class="line">    <span class="keyword">global</span> counter  </span><br><span class="line">    l.config(text=<span class="string">&#x27;do &#x27;</span> + <span class="built_in">str</span>(counter))  </span><br><span class="line">    counter += <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">counter = <span class="number">0</span>  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;    &#x27;</span>)  </span><br><span class="line">l.pack()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方  </span></span><br><span class="line">menubar = tk.Menu(window)  </span><br><span class="line"><span class="comment"># 创建一个File菜单项（默认不下拉，下拉内容包括New，Open，Save，Exit功能项）  </span></span><br><span class="line">file_menu = tk.Menu(menubar, tearoff=<span class="number">0</span>)  </span><br><span class="line"><span class="comment"># 将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中  </span></span><br><span class="line">menubar.add_cascade(label=<span class="string">&#x27;File&#x27;</span>, menu=file_menu)  </span><br><span class="line"><span class="comment"># 在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。  </span></span><br><span class="line">file_menu.add_command(label=<span class="string">&#x27;New&#x27;</span>, command=do_job)  </span><br><span class="line">file_menu.add_command(label=<span class="string">&#x27;Open&#x27;</span>, command=do_job)  </span><br><span class="line">file_menu.add_command(label=<span class="string">&#x27;Save&#x27;</span>, command=do_job)  </span><br><span class="line">file_menu.add_separator()  <span class="comment"># 添加一条分隔线  </span></span><br><span class="line">file_menu.add_command(label=<span class="string">&#x27;Exit&#x27;</span>, command=window.quit)  </span><br><span class="line">  </span><br><span class="line">edit_menu = tk.Menu(menubar, tearoff=<span class="number">0</span>)  </span><br><span class="line">menubar.add_cascade(label=<span class="string">&#x27;Edit&#x27;</span>, menu=edit_menu)  </span><br><span class="line">edit_menu.add_command(label=<span class="string">&#x27;Cut&#x27;</span>, command=do_job)  </span><br><span class="line">edit_menu.add_command(label=<span class="string">&#x27;Cope&#x27;</span>, command=do_job)  </span><br><span class="line">edit_menu.add_command(label=<span class="string">&#x27;Paste&#x27;</span>, command=do_job)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建第二级菜单，即菜单项里面的菜单  </span></span><br><span class="line">sub_menu = tk.Menu(file_menu)  </span><br><span class="line">sub_menu.add_command(label=<span class="string">&#x27;Sub menu 1&#x27;</span>, command=do_job)  </span><br><span class="line"><span class="comment"># 在菜单项里面的菜单项里面的菜单命令  </span></span><br><span class="line">file_menu.add_cascade(label=<span class="string">&#x27;Import&#x27;</span>, menu=sub_menu, underline=<span class="number">0</span>)  </span><br><span class="line"><span class="comment"># 配置让菜单栏menubar显示出来  </span></span><br><span class="line">menubar.add_command(label=<span class="string">&#x27;Exit&#x27;</span>, command=window.quit)  </span><br><span class="line">window.config(menu=menubar)  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716103622.png" /></p><h2 id="messagebox">12.MessageBox</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> tm  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():  </span><br><span class="line">    <span class="keyword">global</span> v  </span><br><span class="line">    v += <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">6</span>:  </span><br><span class="line">        v = <span class="number">0</span>  </span><br><span class="line">    show(v)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">a</span>):  </span><br><span class="line">    <span class="keyword">match</span> a:  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            tm.showinfo(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;你好！&#x27;</span>)  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">            tm.showwarning(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;有警告&#x27;</span>)  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:  </span><br><span class="line">            tm.showerror(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;出错了&#x27;</span>)  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:  </span><br><span class="line">            <span class="built_in">print</span>(tm.askquestion(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;你好！&#x27;</span>))  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:  </span><br><span class="line">            <span class="built_in">print</span>(tm.askyesno(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;你好！&#x27;</span>))  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:  </span><br><span class="line">            <span class="built_in">print</span>(tm.askokcancel(title=<span class="string">&#x27;Hi&#x27;</span>, message=<span class="string">&#x27;你好！&#x27;</span>))  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">v = <span class="number">0</span>  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">tk.Button(window, text=<span class="string">&#x27;hit me&#x27;</span>, bg=<span class="string">&#x27;#76EEC6&#x27;</span>, command=hit_me).pack()  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716103833.png" /></p><h2 id="pack">13.Pack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;P&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>).pack(side=<span class="string">&#x27;top&#x27;</span>)  </span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;P&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>).pack(side=<span class="string">&#x27;bottom&#x27;</span>)  </span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;P&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>).pack(side=<span class="string">&#x27;left&#x27;</span>)  </span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;P&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>).pack(side=<span class="string">&#x27;right&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716104020.png" /></p><h2 id="place">14.Place</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">tk.Label(window, text=<span class="string">&#x27;P&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>).place(x=<span class="number">100</span>, y=<span class="number">100</span>, anchor=<span class="string">&#x27;nw&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716104119.png" /></p><h2 id="grid">15.Grid</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">window = tk.Tk()  </span><br><span class="line">window.title(<span class="string">&#x27;hello world&#x27;</span>)  </span><br><span class="line">window.geometry(<span class="string">&#x27;400x300&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  </span><br><span class="line">        tk.Label(window, text=<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;j&#125;</span>&#x27;</span>, bg=<span class="string">&#x27;#76EEC6&#x27;</span>).grid(row=i, column=j, padx=<span class="number">10</span>, pady=<span class="number">10</span>, ipadx=<span class="number">10</span>, ipady=<span class="number">10</span>)  </span><br><span class="line">  </span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716104243.png" /></p><h1 id="三项目实践">三、项目实践</h1><p>利用 Tkinter 做了一个图片处理的小工具，主要功能有两个：1.在保证图片分辨率不变的情况下进行图片压缩，使图片占用空间变小。2.对图片的的分辨率进行调整，对图片的高和宽的进行等比例的缩放。3.打开默认输出文件夹位置与对输出的文件夹进行清理。界面如下： <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240716105432.png" /></p><p>使用说明： - <strong>图片压缩：</strong>需要事先调整图片的压缩率（默认是85）再点击运行。每次运行前都会清空一次默认输出文件夹，自己选择的保存路径则不会清空。- <strong>图片缩小：</strong>先点击一下文件，选择单张图片，会自动显示图片的分辨率，与按照比例缩放进行后的图片的分辨率（默认50%缩放），选择好缩放比例后点击运行，会自动打开文件所在文件夹。</p><p>项目具体的代码可在 Github 仓库 <ahref="https://github.com/uek2233/Image-Processing-Toolbox">uek2233/Image-Processing-Toolbox(github.com)</a> 下载。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传算法</title>
      <link href="/posts/9cfaa3ca.html"/>
      <url>/posts/9cfaa3ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="一算法流程">一、算法流程</h1><ul><li><p>算法流程图 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202308052102542.png"alt="image.png|450" /></p></li><li><p>编码</p><ul><li>精度的计算 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307252347535.png"alt="image.png|500" /></li><li>编码方式<ul><li>二进制编码</li><li>浮点编码</li><li>符号编码</li></ul></li></ul></li><li><p>解码 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307252353317.png"alt="image.png|525" /></p></li><li><p>选择</p><ul><li>轮盘赌选择</li><li>随机竞争选择</li><li>最佳保留选择</li><li>无回放随机选择</li><li>确定式选择</li><li>无回放余数随机选择</li><li>均匀排序</li><li>最佳保存策略</li><li>随机联赛选择</li><li>排挤选择</li></ul></li><li><p>适应度</p><p>为了使遗传算法有通用性，最大、最小值问题宜统一表达。通常都统一按最大值问题处理，而且<strong>不允许适应度小于0</strong>。 <strong>对于最小值问题，其适应度按下式转换：</strong><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304034.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304455.png"alt="image.png|450" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202307262304848.png"alt="image.png|475" /></p></li></ul><h1 id="二代码">二、代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gap</span>):  </span><br><span class="line">        self.pop = <span class="literal">None</span>  </span><br><span class="line">        self.max_iter = gap[<span class="string">&#x27;max_iter&#x27;</span>]  </span><br><span class="line">        self.pc = <span class="number">0.8</span>  </span><br><span class="line">        self.pm = <span class="number">0.005</span>  </span><br><span class="line">        self.pop_n = gap[<span class="string">&#x27;pop_n&#x27;</span>]  </span><br><span class="line">        self.pop_d = gap[<span class="string">&#x27;pop_d&#x27;</span>]  </span><br><span class="line">        self.<span class="built_in">len</span> = gap[<span class="string">&#x27;len&#x27;</span>]  </span><br><span class="line">        self.lb = gap[<span class="string">&#x27;lb&#x27;</span>]  </span><br><span class="line">        self.ub = gap[<span class="string">&#x27;ub&#x27;</span>]  </span><br><span class="line">        self.mm = gap[<span class="string">&#x27;mm&#x27;</span>]  </span><br><span class="line">        self.fan = gap[<span class="string">&#x27;gf&#x27;</span>]  </span><br><span class="line">        self.sf = gap[<span class="string">&#x27;sf&#x27;</span>]  </span><br><span class="line">        self.best_i = []  </span><br><span class="line">        self.best_if = []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):  </span><br><span class="line">        n = self.pop_n  </span><br><span class="line">        d = self.pop_d  </span><br><span class="line">        l = self.<span class="built_in">len</span>  </span><br><span class="line">        pop = np.ones((n, d, l))  </span><br><span class="line">        <span class="keyword">for</span> n_ <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> d_ <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                pop[n_, d_] = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, l, dtype=<span class="built_in">int</span>)  </span><br><span class="line">        self.pop = pop  </span><br><span class="line">        <span class="keyword">return</span> self.pop  </span><br><span class="line">  </span><br><span class="line"><span class="meta">    @staticmethod  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b2d</span>(<span class="params">pop_b, lb, ub</span>):  </span><br><span class="line">        <span class="keyword">if</span> np.ndim(pop_b) == <span class="number">2</span>:  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">        <span class="keyword">elif</span> np.ndim(pop_b) == <span class="number">1</span>:  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">            pop_b = pop_b[np.newaxis, :]  </span><br><span class="line">  </span><br><span class="line">        n = pop_b.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop_b.shape[<span class="number">1</span>]  </span><br><span class="line">        l = pop_b.shape[<span class="number">2</span>]  </span><br><span class="line">        temp_1 = np.zeros((n, d))  </span><br><span class="line">        <span class="keyword">for</span> n_ <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> d_ <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                <span class="keyword">for</span> l_ <span class="keyword">in</span> <span class="built_in">range</span>(l):  </span><br><span class="line">                    temp_1[n_, d_] += pop_b[n_, d_, l_]*np.power(<span class="number">2</span>, l_)  </span><br><span class="line">        temp_2 = (ub - lb)/(np.power(<span class="number">2</span>, l) - <span class="number">1</span>)  </span><br><span class="line">        temp_1 = lb + temp_1*temp_2  </span><br><span class="line">        <span class="keyword">return</span> temp_1  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roulette</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        sort_idx = <span class="literal">None</span>  </span><br><span class="line">        sort_pop = <span class="literal">None</span>  </span><br><span class="line">        sort_fit = <span class="literal">None</span>  </span><br><span class="line">        n = self.pop_n  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            sort_idx = np.argsort(fitness)  </span><br><span class="line">            sort_pop = pop[sort_idx]  </span><br><span class="line">            sort_fit = fitness[sort_idx]  </span><br><span class="line">        <span class="keyword">elif</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            sort_idx = np.argsort(-fitness)  </span><br><span class="line">            sort_pop = pop[sort_idx]  </span><br><span class="line">            sort_fit = <span class="number">1</span>/fitness[sort_idx]  </span><br><span class="line">        fit_sum = np.<span class="built_in">sum</span>(sort_fit)  </span><br><span class="line">        rou = np.zeros(pop.shape[<span class="number">0</span>])  </span><br><span class="line">        rou[<span class="number">0</span>] = sort_fit[<span class="number">0</span>]/fit_sum  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pop.shape[<span class="number">0</span>]):  </span><br><span class="line">            rou[i] = rou[i-<span class="number">1</span>] + sort_fit[i]/fit_sum  </span><br><span class="line">        rou[-<span class="number">1</span>] = <span class="number">1</span>  </span><br><span class="line">        new_idx = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            rand = np.random.uniform()  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pop.shape[<span class="number">0</span>]):  </span><br><span class="line">                <span class="keyword">if</span> rou[j] &gt;= rand:  </span><br><span class="line">                    new_idx.append(j)  </span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line">  </span><br><span class="line">        new_pop = sort_pop[new_idx]  </span><br><span class="line">        new_fit = fitness[sort_idx][new_idx]  </span><br><span class="line">        new_idx = <span class="literal">None</span>  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            new_idx = np.argsort(new_fit)  </span><br><span class="line">        <span class="keyword">elif</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            new_idx = np.argsort(-new_fit)  </span><br><span class="line">        new_pop = new_pop[new_idx]  </span><br><span class="line">        new_fit = new_fit[new_idx]  </span><br><span class="line">        self.best_i.append(self.b2d(new_pop[-<span class="number">1</span>], self.lb, self.ub))  </span><br><span class="line">        self.best_if.append(new_fit[-<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> new_pop, new_fit  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">best</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        new_pop = <span class="literal">None</span>  </span><br><span class="line">        new_fit = <span class="literal">None</span>  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;min&#x27;</span>:  </span><br><span class="line">            idx = np.argsort(-fitness)  </span><br><span class="line">            new_pop = pop[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">            new_fit = fitness[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">if</span> self.mm == <span class="string">&#x27;max&#x27;</span>:  </span><br><span class="line">            idx = np.argsort(fitness)  </span><br><span class="line">            new_pop = pop[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">            new_fit = fitness[idx][:(self.pop_n+<span class="number">1</span>):-<span class="number">1</span>]  </span><br><span class="line">        self.best_i.append(self.b2d(new_pop[-<span class="number">1</span>], self.lb, self.ub))  </span><br><span class="line">        self.best_if.append(new_fit[-<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> new_pop, new_fit  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">self, pop, fitness</span>):  </span><br><span class="line">        <span class="keyword">if</span> self.sf == <span class="string">&#x27;roulette&#x27;</span>:  </span><br><span class="line">            <span class="keyword">return</span> self.roulette(pop, fitness)  </span><br><span class="line">        <span class="keyword">elif</span> self.sf == <span class="string">&#x27;best&#x27;</span>:  </span><br><span class="line">            <span class="keyword">return</span> self.best(pop, fitness)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self, pop</span>):  </span><br><span class="line">        n = pop.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop.shape[<span class="number">1</span>]  </span><br><span class="line">        new_pop = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            idx_1 = np.arange(n)  </span><br><span class="line">            rand = np.random.uniform()  </span><br><span class="line">            <span class="keyword">if</span> rand &lt;= self.pc:  </span><br><span class="line">                idx_1 = np.delete(idx_1, i)  </span><br><span class="line">                k = np.random.choice(idx_1)  </span><br><span class="line">                idx_2 = np.arange(<span class="number">1</span>, self.<span class="built_in">len</span>)  </span><br><span class="line">                ran_p = np.random.choice(idx_2, <span class="number">2</span>)  </span><br><span class="line">                cp1, cp2 = ran_p[<span class="number">0</span>], ran_p[<span class="number">1</span>]  </span><br><span class="line">                cp1, cp2 = np.minimum(cp1, cp2),  np.maximum(cp1, cp2)  </span><br><span class="line">                new_pop1, new_pop2 = [], []  </span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                    temp1, temp2 = [], []  </span><br><span class="line">                    temp1.extend(pop[i, j][<span class="number">0</span>:cp1])  </span><br><span class="line">                    temp1.extend(pop[k, j][cp1:cp2])  </span><br><span class="line">                    temp1.extend(pop[i, j][cp2:])  </span><br><span class="line">                    temp2.extend(pop[k, j][<span class="number">0</span>:cp1])  </span><br><span class="line">                    temp2.extend(pop[i, j][cp1:cp2])  </span><br><span class="line">                    temp2.extend(pop[k, j][cp2:])  </span><br><span class="line">                    new_pop1.append(temp1)  </span><br><span class="line">                    new_pop2.append(temp2)  </span><br><span class="line">                new_pop.append(new_pop1)  </span><br><span class="line">                new_pop.append(new_pop2)  </span><br><span class="line">        new_pop = np.array(new_pop)  </span><br><span class="line">        <span class="keyword">return</span> new_pop  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self, pop</span>):  </span><br><span class="line">        n = pop.shape[<span class="number">0</span>]  </span><br><span class="line">        d = pop.shape[<span class="number">1</span>]  </span><br><span class="line">        new_pop = pop.copy()  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(d):  </span><br><span class="line">                rand = np.random.uniform()  </span><br><span class="line">                <span class="keyword">if</span> rand &lt;= self.pm:  </span><br><span class="line">                    cp = np.random.randint(<span class="number">0</span>, self.<span class="built_in">len</span>)  </span><br><span class="line">                    new_pop[i, j, cp] = <span class="number">1</span> - pop[i, j, cp]  </span><br><span class="line">        <span class="keyword">return</span> new_pop  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  </span><br><span class="line">        pop = self.init()  </span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(self.max_iter),  desc=<span class="string">&quot;GA_Processing&quot;</span>):  </span><br><span class="line">            pop1 = self.crossover(pop)  </span><br><span class="line">            pop2 = self.mutation(pop1)  </span><br><span class="line">            pop2 = np.unique(pop2, axis=<span class="number">0</span>)  </span><br><span class="line">            pop3 = self.b2d(pop2, self.lb, self.ub)  </span><br><span class="line">            fit = self.fan(pop3)  </span><br><span class="line">            pop, fit = self.select(pop2, fit)  </span><br><span class="line">        <span class="keyword">return</span> self.best_i, self.best_if  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fitness</span>(<span class="params">pop</span>):  </span><br><span class="line">    res = np.<span class="built_in">sum</span>(pop**<span class="number">2</span>, axis=<span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    dim = <span class="number">10</span>  </span><br><span class="line">    ga_init = &#123;  </span><br><span class="line">        <span class="string">&#x27;max_iter&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;pop_n&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;pop_d&#x27;</span>: dim,  </span><br><span class="line">        <span class="string">&#x27;len&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;lb&#x27;</span>: -<span class="number">5.12</span> * np.ones(dim),  </span><br><span class="line">        <span class="string">&#x27;ub&#x27;</span>: <span class="number">5.12</span> * np.ones(dim),  </span><br><span class="line">        <span class="string">&#x27;mm&#x27;</span>: [<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>][<span class="number">0</span>],  </span><br><span class="line">        <span class="string">&#x27;gf&#x27;</span>: get_fitness,  </span><br><span class="line">        <span class="string">&#x27;sf&#x27;</span>: [<span class="string">&#x27;roulette&#x27;</span>, <span class="string">&#x27;best&#x27;</span>][<span class="number">0</span>],  </span><br><span class="line">    &#125;  </span><br><span class="line">    ga = GA(ga_init)  </span><br><span class="line">    ga.run()  </span><br><span class="line">    x = np.arange(ga_init[<span class="string">&#x27;max_iter&#x27;</span>])  </span><br><span class="line">    y = ga.best_if  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plt.plot(x, y)  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 优化算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Git将项目上传到Github</title>
      <link href="/posts/51f321c6.html"/>
      <url>/posts/51f321c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-的安装">1. Git 的安装</h1><ul><li>git 下载地址：<a href="https://git-scm.com/">Git(git-scm.com)</a></li><li>安装的时候除了选择安装位置，其他的都点击 next # 2. 上传 GIithub</li></ul><p>上传 Github 的方法有两种，一种是通过 Https 协议另一种是通过 SSH密钥，两种方法略有差别。参考教学视频：<ahref="https://www.bilibili.com/video/BV1ZP4y1H78r/?buvid=XX877108FAAB05B2E71B7A3245E713F3F0BA8&amp;from_spmid=search.search-result.0.0&amp;is_story_h5=false&amp;mid=ZyPMggz0zboUuglZBilcvg%3D%3D&amp;p=1&amp;plat_id=114&amp;share_from=ugc&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=f0a43c90-8569-4691-94b8-a393d3feeb76&amp;share_source=COPY&amp;share_tag=s_i&amp;spmid=united.player-video-detail.0.0&amp;timestamp=1719970637&amp;unique_k=kdgl29u&amp;up_id=191063080&amp;vd_source=c773d6069c8b3deddb846c9cde19f4b1">用Git上传代码_哔哩哔哩_bilibili</a>。视频中的分支为 <code>master</code> 现在 GitHub 默认的是<code>main</code> 分支，我们需要略微改一下命令。</p><h2 id="通过-https-协议首次上传">通过 Https 协议首次上传</h2><ol type="1"><li><p>通过 Https 协议我们最好是要在 Github 上新建一个 token具体方法参考：[[如何获取github的token]]</p></li><li><p>新建仓库</p></li><li><p>在需要上传的文件夹右键选择 <strong>Open Git Bashhere</strong></p></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702231512.png"alt="image.png|300" /> 4. 在 Git 窗口执行下面命令</p><ul><li>完成最后一个命令后会弹出一个窗口，我们选择 token登录，之后就可以完成上传了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 main 分支，现在 Github 默认使用 main</span></span><br><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交文件</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置远程仓库 URL, 这里选择你仓库的 URL</span></span><br><span class="line">git remote add origin https://github.com/your-username/your-repository.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首次推送，选择这个</span></span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非首次推送，选择这个</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送，如果本地仓库比较旧会报错不然上传，强推送选择这个</span></span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><h2 id="通过-ssh-协议-首次上传">通过 SSH 协议 首次上传</h2><ol type="1"><li><p>通过 SSH 协议方法我们需要新建一个 SSH 密钥 参考方法：<ahref="https://blog.csdn.net/fish_skyyyy/article/details/119213714">如何生成SSHkey？_ssh key生成-CSDN博客</a></p></li><li><p>通过 SSH密钥使用下面的命令，最后上传不会弹出登录界面可以直接上传。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 main 分支，现在 Github 默认使用 main</span></span><br><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交文件</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置远程仓库 SSH</span></span><br><span class="line">git remote add origin git@github.com:your-username/your-repository.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首次推送，选择这个</span></span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">非首次推送，选择这个</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制推送，如果本地仓库比较旧会报错不然上传，强推送选择这个</span></span><br><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure><h2 id="非首次上传">非首次上传</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;second commit&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><h1 id="常见问题">常见问题</h1><p><strong>1. 如果电脑上已经有一个 Github 账户的 SSH密钥了，可以使用这个密钥来生成另一个 Github 账户的 SSH密钥吗？</strong></p><ul><li><p>答案是不行，需要重新生成一对密钥文件，我们需要将原来的密钥文件保存下来，不然新生成的密钥文件会将原来的文件覆盖。当然可以选择保存到另外的位置。</p></li><li><p>如果需要同一台电脑管理多个 GitHub 账户具体方法参考:<ahref="https://kangzhiheng.top/post/11-more-ssh-in-one-laptop/">多个SSH密钥并存且连接到Github| adoredee (kangzhiheng.top)</a> 。</p></li><li><p>简单总结一下上面的这个网页的操作，</p><ol type="1"><li>生成两个 GitHub 账户的密钥然后分别保存下来，公钥用于配置 SSH,私钥就是电脑的身份证，连接不同 GitHub账户就需要不同的身份证。常用的账户的 <code>id_rsa</code> 重命名为<code>id_rsa_normal_github</code> ，不常用的账户的 <code>id_rsa</code>重命名为 <code>id_rsa_hugo_github</code> ，更多的账户的<code>id_rsa</code> 取不同的名称就行。</li><li>将两个密钥保存在路径 <code>用户名/.ssh/</code> 下，并新建一个<code>config</code> 文件，输入以下内容。第二个 <code>Host</code> 后面的<code>xxx</code> 自己取名，记得保存以下。</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_normal_github</span><br><span class="line">Host xxx.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_hugo_github</span><br></pre></td></tr></table></figure></p><ol start="3" type="1"><li>验证,打开 <code>cmd</code> 输入下面命令，如果提示成功就可以了</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@xxx.github.com</span><br></pre></td></tr></table></figure></p><ol start="4" type="1"><li>常用的 GitHub 账户上传没有任何改变，不常用的 GitHub 账户在<code>git init</code> 并在完成除了推送的命令后，项目里会生成<code>.git</code> 文件夹，如果没有打开显示隐藏文件夹。将里面的<code>config</code> 文件进行修改。将 <code>[remote "origin"]</code> 下的<code>url</code> 后面加上你的 <code>xxx.</code> 其他的不用该。</li></ol><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">url = git@xxx.github.com:your-username/your-repository.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p><ol start="5" type="1"><li>上传</li></ol></li></ul><p><strong>2. 已经采用 <code>masrer</code> 分支上传了，怎么改回<code>main</code> 分支。</strong></p><ul><li>可以删除仓库，重新上传一次</li><li>也可以采用下面的方法改为 <code>main</code> 分支，就是需要新建一个<code>main</code> 分支，其他的不变。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前所在分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前分支不是 `main` 分支且 `main` 分支存在，切换到 `main` 分支</span></span><br><span class="line">git checkout main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前分支不是 `main` 分支且 `main` 分支不存在</span></span><br><span class="line">git checkout -b main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><strong>3.如果自己在远程仓库进行过修改，而本地仓库未进行修改，这时上传会出现错误，不让上传。</strong></p><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/blog/img/xxh/20240703095932.png"alt="image.png|300" /><figcaption aria-hidden="true">image.png|300</figcaption></figure><ul><li>一种方法是本地仓库同步远程的仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.将远程仓库修改的内容更新到本地仓库:</span></span><br><span class="line">git pull --rebase origin main</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.再进行提交</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><ul><li>另一种方法是强制上传</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github获取生成token的方法</title>
      <link href="/posts/a817377e.html"/>
      <url>/posts/a817377e.html</url>
      
        <content type="html"><![CDATA[<h1 id="登录github点击右上角头像选中settings-设置">1.登录GitHub，点击右上角头像，选中Settings (设置)。</h1><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702225954.png" /></p><h1 id="选择-developer-settings-这一项">2. 选择 Developer settings这一项</h1><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230059.png" /></p><h1 id="依次按照下面的选项选择">3. 依次按照下面的选项选择</h1><ol type="1"><li>选择 <strong>Personal access tokens</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230209.png" /></p><ol start="2" type="1"><li>选择 <strong>Tokens (classic)</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230256.png" /></p><ol start="3" type="1"><li>选择 <strong>Creat new token</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230339.png" /></p><ol start="4" type="1"><li>选择 <strong>NOexpiration(无时间限制)</strong>，下面的选项<strong>全选</strong></li></ol><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240702230420.png" /></p><h1id="生成的token只显示一次需要保存好">4.生成的token只显示一次需要保存好</h1>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中Latex公式的使用</title>
      <link href="/posts/4232bc1d.html"/>
      <url>/posts/4232bc1d.html</url>
      
        <content type="html"><![CDATA[<h1 id="一解决方法">一、解决方法</h1><p>在 hexo 中使用 Latex公式会报错，无法渲染。针对这个问题可以用下面的方法解决。</p><ol type="1"><li>卸载<code>npm un hexo-renderer-marked</code> 与安装<code>hexo-renderer-pandoc</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked</span><br><span class="line">npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>配置主题文件配置文件下的 <code>mathjax</code> 设置，我的是主题配置文件是 <code>_config.butterfly.yml</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MathJax</span></span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>安装 <code>pandoc</code> 不然 <code>hexo g</code> 会报<code>pandoc exited with code null</code> 的错误</li></ol><p>下载链接：<a class="btn-beautify green larger" href="https://github.com/jgm/pandoc/releases/tag/3.2.1'"   title="pandoc"><i class="far fa-hand-point-right"></i><span>pandoc</span></a></p><ol start="4" type="1"><li>将 <code>pandoc</code> 添加到环境变量中，然后重启电脑。</li></ol><p>打开命令行窗口，输入以下命令。来检验是否安装成功，安装成功会有下面的版本信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandoc -v</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-09%20192047.png" /></p><ol start="5" type="1"><li>创建文档， 输入公式，运行命令 hexo 命令</li></ol><h1 id="二latex公式的使用">二、Latex公式的使用</h1><p><strong>Latex 公式学习网站：</strong><a class="btn-beautify green larger" href="https://www.cnblogs.com/1024th/p/11623258.html'"   title="Latex公式手册"><i class="far fa-hand-point-right"></i><span>Latex公式手册</span></a></p><p><strong>Latex 公式使用格式：</strong></p><ul><li><p>行内公式 <span class="math inline">\(X_i\)</span> 行内公式</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">行内公式 $X_i$ 行内公式</span><br></pre></td></tr></table></figure></p></li><li><p>行公式</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$ y = f(x)$$</span></span><br></pre></td></tr></table></figure></p></li></ul><p><span class="math display">\[y = f(x)\]</span></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分进化算法</title>
      <link href="/posts/c8d982b8.html"/>
      <url>/posts/c8d982b8.html</url>
      
        <content type="html"><![CDATA[<p>参考原文：<a class="btn-beautify green larger" href="https://blog.csdn.net/myf_666/article/details/129278838"   title="差分进化算法"><i class="far fa-hand-point-right"></i><span>差分进化算法</span></a></p><h1 id="一差分进化算法de原理">一、差分进化算法（DE）原理</h1><p>差分进化算法同其它进化算法一样（尤其和遗传算法，具有很强的相似性），差分进化算法，也是对候选解的种群进行操作，具体地说，它包含了三个主要的操作：</p><p>变异：通过把种群中两个成员之间的加权差向量加到第三个成员上来产生新的参数向量，该操作称为“变异”；交叉：将变异向量的参数与另外预先确定的目标向量参数按照一定的规则混合来产生试验向量。选择：如果试验向量的目标函数比目标向量的代价函数低，那么就利用试验向量替换掉目标向量。种群中所有成成员必须要当作目标向量进行一次这样的操作，以便在下一代中出现相同个数的竞争者。在进化过程中，对每一代的向量都进行评价，记录最小化过程。</p><p>这种利用随机偏差扰动产生新个体的方式，可以获得一个收敛性非常好的结果，引导搜索过程向全局最优解逼近。</p><h1 id="二算法具体流程">二、算法具体流程</h1><h2 id="整体流程">整体流程</h2><ol type="1"><li>初始化</li><li>变异</li><li>交叉</li><li>选择</li><li>边界条件处理、</li></ol><p>算法流程图如下：</p><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625182316.png" /></p><h3 id="初始化">初始化</h3><p>初始化就是给种群中的每个个体的每个维度进行一个赋值，实现一个初始化的操作。每个个体表示如下：</p><p><span class="math display">\[x_{i,G}\left(i=1,2,...,NP\right)\]</span> 其中，<span class="math inline">\(i\)</span>表示个体在种群中的编号，<span class="math inline">\(G\)</span>表示进化代数，<span class="math inline">\(NP\)</span>代表种群规模。在差分进化算法中，一般假定所有随机初始化种群均符合均匀分布。设个体<span class="math inline">\(x_{i,G}\)</span> 第 <spanclass="math inline">\(j\)</span> 维的界限为: <spanclass="math display">\[x_{j}^{L}&lt;x_{j}&lt;x_{j}^{U}\]</span>所有个体通过下式生产： <span class="math display">\[x_{j i,0}\,=\,r a nd[0,1]\,\times\,\left(x_{j}^{(U)}\,-\,x_{j}^{(L)}\right)+x_{j}^{L},j=1,2,...,D\]</span></p><p>其中 <span class="math inline">\(rand[0,1]\)</span> 表示在 <spanclass="math inline">\([0,1]\)</span>之间的实数。当然，均匀产生随机数只是一种可能，如果可以预先知道解的概率分布，就不需要均匀产生，可以通过其分布规律，产生涵盖更多信息的解，进而提高重建效果。</p><h3 id="变异">变异</h3><p>产生完初始种群后，进行变异操作，对于每个目标 <spanclass="math inline">\(x_{i,G}(i=1,2,...,N P)\)</span>基本差分进化算法的变异向量产生方式如下： <spanclass="math display">\[v_{i,G+1}=x_{r_{1},G}+F\cdot(x_{r_{2},G}-x_{r_{3},G})\]</span>其中，要求随机选择的个体序号 <spanclass="math inline">\(r_{1}\,,r_{2}\,,r_{3}\)</span>互不相同，且与目标向量序号 <span class="math inline">\(i\)</span>也不能相同，所以必须满足 <span class="math inline">\(N P&gt;4\)</span>； 变异算子 <span class="math inline">\(F\in[0,2]\)</span>是一个实常数因数，它控制偏差变量的缩放。</p><h3 id="交叉">交叉</h3><p>这一步进行变异向量和目标向量的总体交叉。为了增加干扰参数向量的多样性，引入交叉操作，测试向量变为：</p><p><spanclass="math display">\[u_{i,G+1}\,=\,\left(u_{1_{i},G+1},\,u_{2_{i},G+1}\,,\ldots,\,u_{D_{i},G+1}\right)\]</span><span class="math display">\[u_{j i,G+1} =\begin{cases}v_{j i,G+1} , &amp; \text{if randb(j) &lt;= CR or j = rnbr(i)}\\x_{j i,G+1}, &amp; \text{x!= 0 and j != rnbr(i)}\\\end{cases}\]</span> 其中, <span class="math inline">\(randb(j)\)</span> 表示产生<span class="math inline">\([0,1]\)</span>之间的随机数发生器的第j个估计值。<spanclass="math inline">\(rnbr(i)\in\left(1,2,\ldots,D\right)\)</span>示一个随机选择的序列。，用它来确保 <spanclass="math inline">\(u_{1_{i},G+1}\)</span> 至少从 <spanclass="math inline">\(v_{1_{i},G+1}\)</span> 获得一个参数; <spanclass="math inline">\(CR\)</span>表示交叉算子（表示一个概率），其取值范围为 <spanclass="math inline">\([0,1]\)</span> 。</p><h3 id="选择">选择</h3><p>经过上面的变异、交叉操作，差分进化算法按照贪婪准则将试验向量与当前种群中的目标向量<span class="math inline">\(x_{i,G}\)</span>进行比较，在下一代中，如果目标向量好，就选择目标向量，如果试验向量好，就选择试验向量。值得注意的实，试验向量只与目标向量进行个体比较，而不是现有种群中的所有个体（锦标赛选择）。</p><h3 id="边界条件的处理">边界条件的处理</h3><p>如果在变异过程中，我们编译出了可行域外的解， 即 <spanclass="math inline">\(u_{ji,G+1}&lt; x_{j}^{L}\)</span> 或 <spanclass="math inline">\(u_{j i,G+1}&gt;x_{j}^{U}\)</span> 那么 <spanclass="math display">\[u_{j i,G+1}=r a nd[0,1]\cdot(x_{j}^{(U)}-x_{j}^{(L)})+x_{j}^{(L)}\qquad\quad(i=1,2,...,NP;j=1,2,...,D)\]</span></p><h1 id="相关参数">相关参数</h1><h2 id="种群数量-np">种群数量 NP</h2><p><span class="math inline">\(NP\)</span>越大，说明个体越多，种群多样性越好，寻优能力也越强，但同时也增加了计算难度。所以<span class="math inline">\(NP\)</span> 不能无限取大。一般取 <spanclass="math inline">\(5 D ≤ N P ≤ 10 D\)</span> 之间，必须满足的是 <spanclass="math inline">\(N P ≥ 4\)</span>，因为只有 <spanclass="math inline">\(NP\)</span> 大于4，才能有空间进行变异和杂交。</p><h2 id="变异算子-f">变异算子 F</h2><p>变异算子 <span class="math inline">\(F ∈ [ 0 , 2 ]\)</span>是一个实常数因数，它决定偏差向量的放大比例。 -如果太小，容易“早熟”，即陷入局部最优解。 - 如果太大，不容易“收敛”。当<span class="math inline">\(F &gt; 1\)</span>的时候，算法收敛到最优值变得十分困难，因为差分向量的扰动已经大于两个个体之间的距离了。</p><p>目前研究表面标明，<span class="math inline">\(F\)</span> 小于 <spanclass="math inline">\(0.4\)</span> 和 <spanclass="math inline">\(F\)</span> 大于 <spanclass="math inline">\(1\)</span> 的值仅偶尔有效，通常，<spanclass="math inline">\(F = 0.5\)</span>是一个较好的初始选择。如果种群收敛过早，那么应该增大 <spanclass="math inline">\(F\)</span> 或 <spanclass="math inline">\(NP\)</span>。</p><h2 id="交叉算子-cr">交叉算子 CR</h2><p>一个 <span class="math inline">\([0,1]\)</span>之间的数，它控制着试验向量参数来自于随机选择的目标向量，还是变异向量。<spanclass="math inline">\(CR\)</span> 越大，发生交叉的可能性就越大，<spanclass="math inline">\(CR\)</span> 的一个较好的选择实 <spanclass="math inline">\(0.1\)</span>，但较大的 <spanclass="math inline">\(CR\)</span> 通常会加速收敛。可以先尝试 <spanclass="math inline">\(CR = 0.9\)</span> 或 <spanclass="math inline">\(CR=1.0\)</span>，查看是否可以快速产生一个快速解。</p><h2 id="最大进化代数-g">最大进化代数 G</h2><p>最大进化代数 <span class="math inline">\(G\)</span>表示差分进化算法运行结束的一个参数，最多更新 <spanclass="math inline">\(G\)</span>代后就结束了，并将当前群体中最佳个体作为最优解输出。一般，<spanclass="math inline">\(100 ≤ G ≤ 500\)</span> 。</p><h2 id="终止条件">终止条件</h2><p>除最大进化代数可作为差分进化算法的终止条件外，还可以增加其他判定准则。一般当目标函数值小于阈值时程序终止，阈值常选为<span class="math inline">\(10^{-6}\)</span> 。</p><h1 id="三一些改进方法">三、一些改进方法</h1><h2 id="变异算子-f-1">变异算子 F</h2><p>对于变异算子 <span class="math inline">\(F\)</span>的设置，可以采用如下模型：</p><p><span class="math display">\[\lambda=e^{1-\frac{G_m}{G_m+1-G}}, F=F_0 \times 2^\lambda\]</span></p><p>其中 <span class="math inline">\(G_m\)</span> 是最大迭代次数， <spanclass="math inline">\(G\)</span>是当前迭代次数。这个模型的好处是，在初期 <spanclass="math inline">\(F\)</span> 具有较大值为 <spanclass="math inline">\(2F_0\)</span>，可以保持个体多样性，避免早熟，在后期变异率接近 <spanclass="math inline">\(F_0\)</span>保留优良信息，避免最优解遭到破坏，增加全局最优解的概率。</p><h2 id="变异算子-f-2">变异算子 F</h2><p>还可以设计随机范围的交叉算子，比如 <spanclass="math inline">\(CR:0.5×[1+rand(0,1)]\)</span>，这样交叉算子的平均值维持在 <span class="math inline">\(0.75\)</span>附近，考虑到了差分向量放大中可能的随机变化，有助于在搜索过程中保持群体多样性。</p><h1 id="四python-代码">四、Python 代码</h1><ul><li>解函数 <spanclass="math inline">\(f(x)=\sum_{i=1}^{n}x_{i}^{2}\left(-20\leq x_{i}\\leq20\right)\)</span> 的最小值，其中个体 <spanclass="math inline">\(x\)</span> 的维数 <spanclass="math inline">\(n=10\)</span> 。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DE</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param_de</span>):  </span><br><span class="line">        self.NP = param_de[<span class="string">&#x27;NP&#x27;</span>]  </span><br><span class="line">        self.size = param_de[<span class="string">&#x27;size&#x27;</span>]  </span><br><span class="line">        self.xMin = param_de[<span class="string">&#x27;xMin&#x27;</span>]  </span><br><span class="line">        self.xMax = param_de[<span class="string">&#x27;xMax&#x27;</span>]  </span><br><span class="line">        self.F = param_de[<span class="string">&#x27;F&#x27;</span>]  </span><br><span class="line">        self.CR = param_de[<span class="string">&#x27;CR&#x27;</span>]  </span><br><span class="line">        self.pop_mut = <span class="literal">None</span>  </span><br><span class="line">        self.pop_cro = <span class="literal">None</span>  </span><br><span class="line">        self.best_archive = []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop_init</span>(<span class="params">self</span>):  </span><br><span class="line">        pop_de = self.xMin + np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, (self.NP, self.size)) * (self.xMin - self.xMax)  </span><br><span class="line">        <span class="keyword">return</span> pop_de  </span><br><span class="line">  </span><br><span class="line"><span class="meta">    @staticmethod  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calfitness</span>(<span class="params">pop_de</span>):  </span><br><span class="line">        res = fan(pop_de)  </span><br><span class="line">        <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mutation</span>(<span class="params">self, pop_de, f_de</span>):  </span><br><span class="line">        self.pop_mut = np.zeros((self.NP, self.size))  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):  </span><br><span class="line">            index = np.arange(self.NP)  </span><br><span class="line">            index = np.delete(index, i)  </span><br><span class="line">            r1, r2, r3 = pop_de[np.random.choice(index, <span class="number">3</span>, replace=<span class="literal">False</span>)]  </span><br><span class="line">            self.pop_mut[i] = r1 + f_de * (r2 - r3)  </span><br><span class="line">        <span class="keyword">return</span> self.pop_mut  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">self, pop_de</span>):</span><br><span class="line">        self.pop_cro = pop_de.copy()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):</span><br><span class="line">            rn = np.random.randint(<span class="number">0</span>, self.size, <span class="number">1</span>)</span><br><span class="line">            rand = np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, self.size)</span><br><span class="line">            self.pop_cro[i, rn] = self.pop_mut[i, rn]</span><br><span class="line">            condition = (rand &lt;= self.CR)</span><br><span class="line">            self.pop_cro[i] = np.where(condition, self.pop_mut[i], self.pop_cro[i])</span><br><span class="line">        <span class="keyword">return</span> self.pop_cro</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_bound</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.NP):  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.size):  </span><br><span class="line">                condition = (self.pop_cro[i, j] &lt; self.xMin) <span class="keyword">or</span> (self.pop_cro[i, j] &gt; self.xMax)  </span><br><span class="line">                <span class="keyword">if</span> condition:  </span><br><span class="line">                    self.pop_cro[i, j] = self.xMin + np.random.uniform(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>) * (self.xMax - self.xMin)  </span><br><span class="line">        <span class="keyword">return</span> self.pop_cro  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">selection</span>(<span class="params">self, pop_de, fit</span>):  </span><br><span class="line">        pop_c = self.check_bound()  </span><br><span class="line">        fit_c = self.calfitness(self.pop_cro)  </span><br><span class="line">        condition = fit_c &lt; fit  </span><br><span class="line">        fit[condition] = fit_c[condition]  </span><br><span class="line">        pop_de[condition] = pop_c[condition]  </span><br><span class="line">        index = np.argsort(fit.flatten())  </span><br><span class="line">        best_de = fit[index[<span class="number">0</span>]]  </span><br><span class="line">        self.best_archive.append(best_de)  </span><br><span class="line">        <span class="keyword">return</span> pop_de, fit, best_de  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fan</span>(<span class="params">pop_f</span>):  </span><br><span class="line">    res = np.<span class="built_in">sum</span>(pop_f**<span class="number">2</span>, axis=<span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">return</span> res  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    param = &#123;  </span><br><span class="line">        <span class="string">&#x27;NP&#x27;</span>: <span class="number">100</span>,  </span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;xMin&#x27;</span>: -<span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;xMax&#x27;</span>: <span class="number">10</span>,  </span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: <span class="number">0.5</span>,  </span><br><span class="line">        <span class="string">&#x27;CR&#x27;</span>: <span class="number">0.8</span>,  </span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: <span class="number">200</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    G = param[<span class="string">&#x27;G&#x27;</span>]  </span><br><span class="line">    F = param[<span class="string">&#x27;F&#x27;</span>]  </span><br><span class="line">    de = DE(param)  </span><br><span class="line">    pop = de.pop_init()  </span><br><span class="line">    fitness = de.calfitness(pop)  </span><br><span class="line">    <span class="keyword">for</span> gen <span class="keyword">in</span> <span class="built_in">range</span>(G):  </span><br><span class="line">        lamda = np.exp(<span class="number">1</span> - G / (G + <span class="number">1</span> - gen))  </span><br><span class="line">        f = F * np.power(<span class="number">2</span>, lamda)  </span><br><span class="line">        de.mutation(pop, f)  </span><br><span class="line">        de.crossover(pop)  </span><br><span class="line">        pop, fitness, best = de.selection(pop, fitness)  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;gen&#125;</span>代最优值&quot;</span>, best)  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plot_x = np.arange(G)  </span><br><span class="line">    plot_y = de.best_archive  </span><br><span class="line">    plt.plot(plot_x, plot_y)  </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="结果">结果</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625202858.png" /></p><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240625202930.png" /></p>]]></content>
      
      
      <categories>
          
          <category> 优化算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch的安装</title>
      <link href="/posts/77731701.html"/>
      <url>/posts/77731701.html</url>
      
        <content type="html"><![CDATA[<p>参考视频：<ahref="https://www.bilibili.com/video/BV1XD421n7yF/?spm_id_from=333.337.search-card.all.click">手把手教你安装Pytorch环境_哔哩哔哩_bilibili</a></p><h1 id="安装-anaconda">安装 Anaconda</h1><ol type="1"><li><p>下载 Anaconda</p><p><a href="https://www.anaconda.com/">Anaconda | The Operating Systemfor AI</a></p></li><li><p>安装</p></li></ol><ul><li><p>Just me 和 All Users，选择 Just me； <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210243.png"alt="image.png|350" /></p></li><li><p>安装路径选 我的安装位置是<code>F:\Support\Anaconda\install</code></p></li><li><p>最后一个分岔口，不勾选第一个方框 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210333.png"alt="image.png" /></p></li></ul><ol start="3" type="1"><li>环境配置</li></ol><ul><li><p>设置里面搜索 <code>环境变量</code> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210510.png"alt="image.png" /></p></li><li><p>点击环境变量 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210653.png"alt="image.png" /></p></li><li><p>选择 Path 点击编辑 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210820.png"alt="image.png" /></p></li><li><p>选择新建，参考下面三个路径把你Anaconda安装文件夹下的三个路径添加到Path 里面，保存后再次打开 Path 里面还有新添加的路径说明成功了。 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609210938.png"alt="image.png" /></p></li><li><p>创建下面两个应用快捷方式到桌面 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211500.png"alt="image.png" /></p></li></ul><h1 id="安装-cuda">安装 Cuda</h1><ol type="1"><li>查看 GPU 支持的 Cuda 版本，</li></ol><ul><li><p>打开 NVIDA 控制面板 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211632.png"alt="image.png" /></p></li><li><p>选择帮助-系统信息-组件，可以看到当前支持的 Cuda 版本 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609211822.png"alt="image.png" /></p></li></ul><ol start="2" type="1"><li><p>安装 Cuda，只能选择比自己支持 Cuda 版本低的 Cuda</p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDAToolkit Archive | NVIDIA Developer</a> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212143.png"alt="image.png" /></p><p>下载好之后，选择安装位置进行解压，解压好后，进入下面的安装界面。选择自定义安装仅仅选择4 大项中的 CUDA，并取消 CUDA 中关于 VS 的选项。 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212438.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212524.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212538.png"alt="image.png" /></p></li><li><p>配置环境,类似上面的步骤 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212739.png"alt="image.png" /></p></li><li><p>检查，打开 cmd 窗口输入一下命令，会出现下面的代码说明安装好了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609212919.png"alt="image.png" /></p></li></ol><h1 id="安装-pytorch">安装 pytorch</h1><ol type="1"><li>打开 Anaconda Prompt 下面是相关指令<br /></li></ol><ul><li><p>清屏 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure></p></li><li><p>base 环境下的操作</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有的环境</span> </span><br><span class="line">conda env list </span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名为“环境名”的虚拟环境，并指定 Python 的版本</span> </span><br><span class="line">conda create -n 环境名 python=3.9 </span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名为“环境名”的虚拟环境，并指定 Python 的版本与安装路径</span> </span><br><span class="line">conda create --prefix=F:\Project\Anaconda\Pytorch_2_3_0 python=3.10.11 </span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除名为“环境名”的虚拟环境</span> </span><br><span class="line">conda remove -n 环境名 --all </span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入名为“环境名”的虚拟环境</span></span><br><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure></p></li><li><p>虚拟环境内的操作</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前环境下的所有库</span> </span><br><span class="line">conda list</span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装库，并指定版本 1.21.5</span> </span><br><span class="line">pip install numpy==1.21.5 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前环境下某个库的版本（以 numpy 为例）径</span> </span><br><span class="line">pip show numpy</span><br></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出虚拟环境</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure></p></li></ul><ol start="2" type="1"><li><p>根据下面指令创建并激活虚拟环境，成功的话如下图所示</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.创建名为“环境名”的虚拟环境，并指定 Python 的版本</span> </span><br><span class="line">conda create -n 环境名 python=3.9 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.进入名为“环境名”的虚拟环境</span></span><br><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609213705.png"alt="image.png" /></p></li><li><p>进入 pytorch 官网根据 Cuda 选择 pytorch版本，复制代码并在虚拟环境里面执行。 <ahref="https://pytorch.org/get-started/previous-versions/">PreviousPyTorch Versions | PyTorch</a></p></li><li><p>验证，依次输入一下代码，如果结果为 <code>True</code>则说明安装成功</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure></p></li></ol><h1 id="遇到问题">遇到问题</h1><h2 id="菜单栏没有-anaconda">菜单栏没有 Anaconda</h2><ol type="1"><li><p>进入 Anaconda 安装的文件夹</p></li><li><p>在文件夹地址栏输入cmd，进入命令行窗口化可以看到地址为当前的安装地址 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/20240609192138.png"alt="image.png" /></p></li><li><p>输入以下命令后回车</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\Lib\_nsis.py mkmenus</span><br></pre></td></tr></table></figure></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32学习</title>
      <link href="/posts/81737f40.html"/>
      <url>/posts/81737f40.html</url>
      
        <content type="html"><![CDATA[<h1 id="一gpio的使用">一、GPIO的使用</h1><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403212340810.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>RCC配置 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCC_AHBPeriphClockCmd() %外设时钟控制</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE) %GPIOA时钟控制</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE) %AFIO时钟控制</span><br><span class="line">RCC_APB1PeriphClockCmd() %APB1时钟控制</span><br></pre></td></tr></table></figure></li></ul><h2 id="gpio配置">GPIO配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GPIO_DeInit(GPIOA) %GPIO复位</span><br><span class="line">GPIO_AFIODeInit() %AFIO复位</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_Init(GPIOA， GPIO_InitStructure) %GPIO初始化</span><br><span class="line"></span><br><span class="line">GPIO_Mode_Out_PP %推挽输出</span><br><span class="line">GPIO_Mode_Out_OD %开漏输出</span><br><span class="line">GPIO_Mode_AF_OD %复用开漏输出</span><br><span class="line">GPIO_Mode_AF_PP %复用推挽输出</span><br><span class="line"></span><br><span class="line">GPIO_Mode_IPU %上拉输入</span><br><span class="line">GPIO_Mode_IPD %下拉输入</span><br><span class="line">GPIO_Mode_IN_FLOATING %浮空输入</span><br><span class="line">GPIO_Mode_AIN %模拟输入</span><br><span class="line"></span><br><span class="line">GPIO_Pin_8</span><br><span class="line">GPIO_Speed_50MHz</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_8) %GPIO读取单个引脚</span><br><span class="line">GPIO_ReadInputData() %GPIO读取整个引脚</span><br><span class="line">GPIO_ReadOutputDataBit() %GPIO读取单个引脚输出数据</span><br><span class="line">GPIO_ReadOutputData() %GPIO读取整个引脚输出数据</span><br><span class="line"></span><br><span class="line"> %GPIO写入%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">GPIO_SetBits(GPIOx, GPIO_Pin_8);  %GPIOx写<span class="number">1</span></span><br><span class="line">GPIO_ResetBits(GPIOx, GPIO_Pin_8); %GPIOx写<span class="number">0</span></span><br><span class="line">GPIO_WriteBit(GPIOx, GPIO_Pin_8, Bit_RESET\Bit_SET);%GPIOx写<span class="number">0</span>或<span class="number">1</span></span><br><span class="line">GPIO_Write(GPIOx,  PortVal);</span><br></pre></td></tr></table></figure><h2 id="gpio重映射">GPIO重映射</h2><ul><li>开启AFIO时钟，开启重映射，参数1参考stmf10xx参考手册完全重映射与部分重映射映射的引脚不同，有些引脚有默认功能不能重映射，需要先重映射解除默认功能，下面的调试端口不能同时解除默认功能，使用PA15,PB3,PB4解除JTAG，保留SWD<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403262237276.png"alt="image.png" /></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE) %AFIO时钟控制</span><br><span class="line"><span class="comment">//RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE)</span></span><br><span class="line"><span class="comment">//GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);</span></span><br><span class="line"><span class="comment">//GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span></span><br></pre></td></tr></table></figure><ul><li>初始化重映射之后的GPIO</li></ul><h1 id="二系统中断">二、系统中断</h1><p>NVIC是内部用于中断排序的系统，stm32f10系列有68个可屏蔽中断通道，16个可屏蔽通道</p><h2 id="中断优先级">中断优先级</h2><p>抢占优先级可以进行嵌套，可以不等程序完成，直接让CPU执行中断程序。响应优先级是必须等程序执行完成，在响应中断程序。</p><p>NVIC的中断优先级由优先级寄存器的4位（0~15）决定，这4位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403240038083.png"alt="image.png" /></p><h2 id="exti外部中断">EXTI外部中断</h2><p>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序- 支持的触发方式：上升沿/下降沿/双边沿/软件触发 -支持的GPIO口：所有GPIO口，但相同的Pin不能同时触发中断 -通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒 -触发响应方式：中断响应/事件响应（转到外设处理中断）</p><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403240043103.png"alt="image.png|650" />AFIO只能选择一组GPIO口所以不能同时触发相同Pin的中断。EXTI9-5，EXTI15-10会触发同一个中断函数。20是触发外部中断</p><p>配置步骤 -配置RCC，打开外设时钟,只用打开GPIO与AFIO时钟，EXTI与NVIC已经默认打开 -配置GPIO,设置为输入模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure><ul><li>配置AFIO，选择GPIO口</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_EXTILineConfig( GPIO_PortSourceGPIOC, GPIO_PinSource1);</span><br></pre></td></tr></table></figure><ul><li>配置EXTI，选择边沿触发方式，触发响应方式，中断响应或者事件响应</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EXTI_InitTypeDef EXTI_InitStruct;</span><br><span class="line"></span><br><span class="line">EXTI_InitStruct.EXTI_Line = EXTI_Linex;</span><br><span class="line"><span class="comment">// EXTI_Linex 使用的pin口</span></span><br><span class="line">EXTI_InitStruct.EXTI_LineCmd = ENABLE;</span><br><span class="line">EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EXTI_Mode_Interrupt 中断模式</span></span><br><span class="line"><span class="comment">// EXTI_Mode_Event 事件模式</span></span><br><span class="line"></span><br><span class="line">EXTI_InitStruct.EXTI_Trigger = ;</span><br><span class="line"><span class="comment">// EXTI_Trigger_Rising 上升沿触发</span></span><br><span class="line"><span class="comment">// EXTI_Trigger_Falling 下升沿触发</span></span><br><span class="line"><span class="comment">// EXTI_Trigger_Rising_Falling 上下沿都触发</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStruct);</span><br></pre></td></tr></table></figure><ul><li>配置NVIC，设置优先级</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_x); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line"><span class="comment">// NVIC_PriorityGroup_x</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>中断函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//每个通道的中断函数名确定的，从启动文件里找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line1) == SET) <span class="comment">//判断通道标志位是否为1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line14); <span class="comment">//清除标志位</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="定时器">定时器</h1><h2 id="定时器介绍">定时器介绍</h2><p>定时器可以对输入的时钟进行计数，并在计数值达到设定值时触发中断16位计数器、预分频器、自动重装寄存器的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时不仅具备基本的定时中断功能，而且还包含内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等多种功能根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250033831.png"alt="image.png" /></p><p>STM32F103C8T6定时器资源：TIM1、TIM2、TIM3、TIM4</p><p><strong>定时器结构图</strong> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250038939.png"alt="image.png" /></p><p>基本定时器，接受系统主频时钟72MHZ,经过分频后，上升沿触发计数器计数，当计数器达到自动重装载寄存器的储存值的时候，会触发定时器中断(ui)。预分配器可设为0-65535，对应1-65536分频。基本定时器只能向上触发。</p><p>主模式触发功能是指当计数器达到自动重装载寄存器的储存值的时候，定时器进行事件更新(u),然后映射到触发输出TRGO，TRGO触发DAC,不需要cup参与<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250048214.png"alt="image.png" /></p><p>通用/高级定时器有三种计数模式 - 向上计数，从0增加到设定值触发中断 -向下计数，从设定值增减小到0触发中断 -中央对齐模式，从0增加到设定值触发中断，从设定值增减小到0再次触发中断</p><p>ETR可以作为外部时钟输入，被称为外部时钟模式2，经过极性选择，输入滤波等处理后，作为系统时钟，引脚定义可以看哪些引脚有ETR。</p><p>TRGI可以作为外部时钟输入，被称为外部时钟模式1，TRGI的输入有 -ETR，ITR1-ITR3,ITR1-ITR3是来自其他定时器的触发器输出TRG0,从而实现定时器的级联。- CH1, CH2 - TL1FP1, TL1FP2</p><p>下面的功能是输入捕获，输出比较，二者不能同时使用，公用寄存器 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250108037.png"alt="image.png" /></p><ul><li>重复次数计数器，实现每隔几个周期再进行更新</li><li>驱动三相无刷电路，互补PWM输出</li><li>刹车输入</li></ul><p><strong>计数器时序图</strong> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250113029.png"alt="image.png" /></p><ul><li>CK_PSC 时钟信号</li><li>CNT_EN 计数器使能，为1计数器打开</li><li>CK_CNT 分频后的时钟信号</li><li>计数器寄存器上升沿计数，达到FC重新装载</li><li>预分频寄存器是用户写入的分配系数，当前计数未达到更新值前，就算改变了分频系数，下次计数才会生效。</li></ul><p>计数器计数频率：CK_CNT = CK_PSC / (PSC + 1)<strong>计数器溢出频率：CK_CNT_OV = CK_CNT / (ARR + 1) = (72MHZ / (PSC +1) ) * (ARR + 1)</strong> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250125837.png"alt="image.png" /></p><ul><li>无预装值，在计数到33更改计数器重装载值为36，在36处触发中断 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250127889.png"alt="image.png" /></li><li>有预装值，在计数到F2时计数器重装载值从F5更改为36，但还是在F5处触发中断，并下个周期更改为36</li></ul><h2 id="定时器中断">定时器中断</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403250110503.png"alt="image.png" /> - 开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p><ul><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_ClearFlag(TIM2, TIM_FLAG_Update); <span class="comment">// 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStruct);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输出中断控制，允许更新中断输出到NVIC <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); <span class="comment">//允许更新中断输出到NVIC</span></span><br><span class="line"><span class="comment">// TIMx</span></span><br><span class="line"><span class="comment">// TIM_IT_Update 更新中断模式</span></span><br><span class="line"><span class="comment">// ENABLE</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置NVIC，打开定时器中断通道，分配优先级 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_x); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line"><span class="comment">// NVIC_PriorityGroup_x</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>使能定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_Cmd(TIMx, ENABLE); <span class="comment">// 使能定时器</span></span><br></pre></td></tr></table></figure></p></li><li><p>定时器中断函数，一般放在使用它的地方而不是在定时器函数中<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">TIM_ClearITPendingBit(TIM2, TIM_IT_Update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="定时器外部时钟">定时器外部时钟</h2><ul><li><p>开启外部GPIO口 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择外部时钟源 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TIM_ETRClockMode2Config(TIM2, TIM_ExtTRGPSC_OFF, TIM_ExtTRGPolarity_Inverted, <span class="number">0x02</span>); <span class="comment">//选择ETR通过外部时钟模式2的输入时钟</span></span><br><span class="line"><span class="comment">//TIMx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_OFF 不分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV2 2分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV4 4分频</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPSC_DIV8 8分频</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TIM_ExtTRGPolarity_Inverted 上升沿触发</span></span><br><span class="line"><span class="comment">//TIM_ExtTRGPolarity_NonInverted 下升沿触发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x00 and 0x0F 设置采样频率，几次采样一致后再作为时钟源输入</span></span><br></pre></td></tr></table></figure></p></li><li><p>其他参考上面的</p></li></ul><h2 id="定时器输出pwm">定时器输出PWM</h2><p>### 原理 OC（Output Compare）输出比较 -输出比较可以通过比较CNT(计数器寄存器)与CCR(捕获比较寄存器)寄存器值的关系，来对输出电平进行置1、置0或翻转的操作，用于输出一定频率和占空比的PWM波形- 每个高级定时器和通用定时器都拥有4个输出比较通道 -高级定时器的前3个通道额外拥有死区生成和互补输出的功能</p><p>周期：(ARR+1) * PSC/72000000 频率：72000000/(ARR+1) * PSC <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260025800.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260027909.png"alt="image.png" /></p><p><strong>工作流程：</strong>:当CNT&gt;=CCR时oc1ref会输出信号，给CC1P寄存器写0，从上面输出，电平信号不反转，给CCIP寄存器写1，从下面输出，电平信号反转。CC1E控制输出使能，要不要输出。</p><p><strong>输出控制寄存器模式：</strong> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260032829.png"alt="image.png" /></p><ul><li>冻结： CNT，CCR无效，PWM输出停止，保持为暂停时刻状态</li><li>CNT=CCR时，置高电平，用途不大，只能一次性使用</li><li>CNT=CCR时，置低电平，用途不大，只能一次性使用</li><li>CNT=CCR时，电平翻转，PWM占空比设置为50%时适合使用</li><li>CNT，CCR无效，PWM输出停止，保持为低电平状态</li><li>CNT，CCR无效，PWM输出停止，保持为高电平状态</li><li>PWM频率和占空比都可调模式，多用向上计数模式</li><li>PWM频率和占空比都可调模式</li></ul><h3 id="代码">代码</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260039769.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403260044509.png"alt="image.png|500" /></p><p>PWM频率： Freq = CK_PSC / (PSC + 1) / (ARR + 1) PWM占空比： Duty =CCR / (ARR + 1) PWM分辨率： Reso = 1 / (ARR + 1)</p><ul><li><p>开启外部GPIO口为复用推挽输出,看文档哪个口有定时器功能<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>开启RCC时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB1Periph_TIM1, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line"><span class="comment">//TIM_ClearFlag(TIM2, TIM_FLAG_Update); // 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输出控制寄存器模式 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TIM_OCInitTypeDef TIM_OCInitStucture</span><br><span class="line"><span class="title function_">TIM_OCStructInit</span><span class="params">(&amp;TIM_OCInitStucture)</span>; <span class="comment">//结构体赋默认值，防止使用高级定时器某些变量没赋值</span></span><br><span class="line">TIM_OCInitStucture.TIM_OCMode = TIM_OCMode_PWM1; <span class="comment">//输出比较模式</span></span><br><span class="line"><span class="comment">// TIM_OCMode_PWM1 PWM输出模式1</span></span><br><span class="line">TIM_OCInitStucture.TIM_OCNPolarity = TIM_OCNPolarity_High; <span class="comment">//输出比较极性</span></span><br><span class="line"><span class="comment">// TIM_OCNPolarity_High 输出高电平</span></span><br><span class="line"><span class="comment">// TIM_OCNPolarity_Low 输出低电平</span></span><br><span class="line">TIM_OCInitStucture.TIM_OutputState = TIM_OutputState_Enable; <span class="comment">//输出使能</span></span><br><span class="line"><span class="comment">// TIM_OutputState_Enable 使能</span></span><br><span class="line"><span class="comment">// TIM_OutputState_Disable 不使能</span></span><br><span class="line">TIM_OCInitStucture.TIM_Pulse = ; <span class="comment">//CCR配置</span></span><br><span class="line"><span class="comment">// 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_OC1Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道1初始化，频率相同，占空比不同</span></span><br><span class="line">TIM_OC2Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道2初始化，</span></span><br><span class="line">TIM_OC3Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道3初始化，</span></span><br><span class="line">TIM_OC4Init(TIM1, &amp;TIM_OCInitStucture); <span class="comment">//TIM1的通道4初始化，</span></span><br></pre></td></tr></table></figure></p></li><li><p>使能定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TIM_CtrlPWMOutputs(TIM1, ENABLE); 高级定时器输出使能</span></span><br><span class="line">TIM_Cmd(TIM1, ENABLE); <span class="comment">// 使能定时器</span></span><br></pre></td></tr></table></figure></p></li><li><p>单独配置CCR <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIM_SetCompare1(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare1); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare2(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare2); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare3(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare3); <span class="comment">//通道1CCR配置</span></span><br><span class="line">TIM_SetCompare4(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Compare4); <span class="comment">//通道1CCR配置</span></span><br></pre></td></tr></table></figure></p></li></ul><h2 id="定时器输入捕获">定时器输入捕获</h2><p>IC（Input Capture）输入捕获 -输入捕获模式下，当通道输入引脚出现指定电平跳变时，当前CNT的值将被锁存到CCR中，可用于测量PWM波形的频率、占空比、脉冲间隔、电平持续时间等参数- 每个高级定时器和通用定时器都拥有4个输入捕获通道 -可配置为PWMI模式，同时测量频率和占空比 -可配合主从触发模式，实现硬件全自动测量 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270044777.png"alt="image.png" /> - 测频法适合高频信号 - 测周法适合低频信号, <spanclass="math inline">\(t = 1/f_c\)</span>, <span class="math inline">\(T= N/f_c\)</span> , <span class="math inline">\(F = f_c/N\)</span><br />- 中界频率区别高低频频率的零界点</p><h3 id="硬件电路">硬件电路</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270101384.png"alt="image.png" /> - ICF配置滤波器的频率以及采样次数 -CC1P配置是上升沿还是下降沿触发，得到TT1P1信号 -CC1S是数据选择器，选择输入数据 - ICPS配置分配器 - CC1E使能输出 -通过主从触发模式可以自动重装载CCR，TI1FP1,可以作为触发源触发定时器的从模式功能，只能在通道1和通道2使用-这里定时器的通道1与通道2的TI2FP1，TI2FP2可以选择交叉还是直连模式，交叉是通道1的TI2FP1接到通道2的TI1</p><h3 id="主从触发模式">主从触发模式</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270109527.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="代码-1">代码</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270111109.png"alt="image.png" /> - 开启RCC与GPIO时钟 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB1Periph_TIM1, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//开启时钟</span></span><br></pre></td></tr></table></figure></p><ul><li><p>选择时基时钟单元的时钟源（内部时钟源） <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_InternalClockConfig(TIM2); <span class="comment">//内部时钟</span></span><br></pre></td></tr></table></figure></p></li><li><p>GPIO初始化，输入模式，上拉模式或者浮空输入模式<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置预分频器，自动重装载器，计数模式等 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV1,配置采样分配,随便选一个就行</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV2</span></span><br><span class="line"><span class="comment">// TIM_CKD_DIV4</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Up 向上计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_Down 向下计数</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式1</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式2</span></span><br><span class="line"><span class="comment">// TIM_CounterMode_CenterAligned1 中央对其模式3</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">10000</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line"><span class="comment">//ARR自动重装载值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">7200</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line"><span class="comment">//PSC预分频值 0x0000 and 0xFFFF</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line"><span class="comment">// 重复计数器的值只有TIM1有 0x0000 and 0xFFFF</span></span><br><span class="line"><span class="comment">//TIM_ClearFlag(TIM2, TIM_FLAG_Update); // 上电后立即清除定时器中断标志位，防止上电进入中断</span></span><br><span class="line">TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseInitStructure);</span><br></pre></td></tr></table></figure></p></li><li><p>配置输入捕获单元 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TIM_ICInitTypeDef TIM_ICInitStructture</span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_1; <span class="comment">//配置输入捕获通道</span></span><br><span class="line"><span class="comment">// TIM_Channel_1 输入通道1</span></span><br><span class="line"><span class="comment">// TIM_Channel_2 输入通道2</span></span><br><span class="line"><span class="comment">// TIM_Channel_3 输入通道3</span></span><br><span class="line"><span class="comment">// TIM_Channel_4 输入通道4</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line"><span class="comment">// 0x0-0xF</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising 上升沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 下降沿触发</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_BothEdge 都触发</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPrescaler = TIM_ICPSC_DIV1; <span class="comment">//分频器</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV1 不分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV2 2分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV4 4分频</span></span><br><span class="line"><span class="comment">// TIM_ICPSC_DIV8 8分频</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICSelection = TIM_ICSelection_DirectTI; <span class="comment">//配置数字选择器，选择是交叉还是直连通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_DirectTI 直连通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_IndirectTI 交叉通道</span></span><br><span class="line"><span class="comment">// TIM_ICSelection_TRC</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br></pre></td></tr></table></figure></p></li><li><p>选择从模式触发源为TL1FP1 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIM_SelectInputTrigger(TIM3, TIM_TS_TI1FP1);</span><br><span class="line"><span class="comment">//  TIM_TS_ITR0</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR1</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR2</span></span><br><span class="line"><span class="comment">//  TIM_TS_ITR3</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI1F_ED</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI1FP1</span></span><br><span class="line"><span class="comment">//  TIM_TS_TI2FP2</span></span><br><span class="line"><span class="comment">//  TIM_TS_ETRF</span></span><br></pre></td></tr></table></figure></p></li><li><p>配置从模式为reset <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Reset);</span><br><span class="line"><span class="comment">// TIM_SlaveMode_Reset  </span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_Gated</span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_Trigger</span></span><br><span class="line"><span class="comment">// TIM_SlaveMode_External1</span></span><br></pre></td></tr></table></figure></p></li><li><p>开启定时器 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TIM_Cmd(TIM3, ENABLE); <span class="comment">// 使能定时器; //内部时钟</span></span><br></pre></td></tr></table></figure> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403270115704.png"alt="image.png" /></p></li><li><p>PWMI是使用了两个通道，通道1采用上升沿触发，通道2采用下降沿触发，下降沿触发时不会清零CNT，CNT计入CCR2，上升沿到来，CNT计入CCR1同时CNT清零。CCR2/CCR1即使占空比。</p></li></ul><h2 id="定时器编码器接口">定时器编码器接口</h2><p>编码器接口 -编码器接口可接收增量（正交）编码器的信号，根据编码器旋转产生的正交信号脉冲，自动控制CNT自增或自减，从而指示编码器的位置、旋转方向和旋转速度- 每个高级定时器和通用定时器都拥有1个编码器接口 -两个输入引脚借用了输入捕获的通道1和通道2 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280029123.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280033594.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280037254.png"alt="image.png" /> -仅在TI1计数是，只在A相的上升沿或者下降沿进行计数，正向都向上计数，反向都向下计数- 仅在TI2计数是，只在A相的上升沿或者下降沿进行计数 -TI1和TI2计数是，在A相的上升沿以及B相的上升沿进行计数或者，最常使用的模式</p><ul><li>当TI1FP1为上升沿有效时，TI1FP2为低电平，CCR计数器加一，对应正转。TI1FP2为高电平，CCR计数器减一，对应反转转。通道1设置为上升沿有效，通道2设置为上升沿有效，</li></ul><h3 id="代码-2">代码</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403280035185.png"alt="image.png" /> - 开启GPIO与定时器时钟 - 配置GPIO -配置时基单元，不分频，ACC为65536 - 配置输入捕获单元，滤波器与极性 -配置编码器接口模式 - 启动定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">TIM_ICInitTypeDef TIM_ICInitStructture;</span><br><span class="line"></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//开启时钟</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//配置采样分配,随便选一个就行</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up; <span class="comment">//计数模式</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Period = <span class="number">65536</span> <span class="number">-1</span>; <span class="comment">//ARR自动重装载值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler = <span class="number">1</span> - <span class="number">1</span>; <span class="comment">//PSC预分频值</span></span><br><span class="line">TIM_TimeBaseInitStructure.TIM_RepetitionCounter = <span class="number">0</span>; <span class="comment">// 重复计数器的值只有TIM1有</span></span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseInitStructure);</span><br><span class="line"></span><br><span class="line">TIM_ICStructInit(&amp;TIM_ICInitStructture);</span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_1; <span class="comment">//配置输入捕获通道</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br><span class="line"></span><br><span class="line">TIM_ICInitStructture.TIM_Channel = TIM_Channel_2; <span class="comment">//配置输入捕获通道</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICFilter = <span class="number">0xF</span>; <span class="comment">//配置输入捕获滤波器</span></span><br><span class="line">TIM_ICInitStructture.TIM_ICPolarity = TIM_ICPolarity_Rising; <span class="comment">//配置输入极性，上升沿触发还是下降沿触发</span></span><br><span class="line">TIM_ICInit(TIM3, &amp;TIM_ICInitStructture);</span><br><span class="line"></span><br><span class="line">TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);</span><br><span class="line"><span class="comment">// TIMx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI1 TI1计数</span></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI2 TI1计数</span></span><br><span class="line"><span class="comment">// TIM_EncoderMode_TI12 TI1与TI2都计数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising  通道不反向，配置通道1的触发模式，和配置输入捕获寄存器一样</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 通道反向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Falling 配置通道2的计数模式</span></span><br><span class="line"><span class="comment">// TIM_ICPolarity_Rising</span></span><br><span class="line">TIM_Cmd(TIM3, ENABLE); <span class="comment">// 使能定时器; //内部时钟</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="adc">ADC</h1><p>ADC（Analog-Digital Converter）模拟-数字转换器 -ADC可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁- 12位逐次逼近型ADC，1us转换时间输入电压范围：0<sub>3.3V，转换结果范围：0</sub>4095 -18个输入通道，可测量16个外部和2个内部信号源 - 规则组和注入组两个转换单元- 模拟看门狗自动监测输入电压范围，自动监测某些传感器的值，达到条件申请中断，不需要主动if - STM32F103C8T6ADC资源：ADC1、ADC2，10个外部输入通道 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302348606.png"alt="image.png" /></p><h2 id="adc原理与结构">ADC原理与结构</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302332442.png"alt="image.png|500" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302338852.png"alt="image.png" /> -规则通道可以一次性可以选择16个需要ADC转换的通道，转换完成后返回对应数字量，但规则通道只有16位，放一个数，需要配合DMA来使用。-注入通道，一次性可以选择4个需要ADC转换的通道，有4个对应寄存器存放对应值，使用较少- ADC时钟只能选择6，8分频 - 转换完成标志位置1，可以申请中断 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302347603.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302348606.png"alt="image.png" /></p><h3 id="四种转换模式">四种转换模式</h3><p>连续转换，单次转换，扫描模式，非扫描模式 -连续转换，扫描模式，选取多个通道，转换每一个通道，标志位置不置1，一直转换-连续转换，非扫描模式，选取一个通道，一直转换通道，然后标志位不置1，一直转换- 单次转换，扫描模式，选取多个通道，只能保留转换的最后一个通道， -单次转换，非扫描模式，选取一个通道，只能转换一个通道，只转换一次</p><h3 id="adc触发方式">ADC触发方式</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403302359641.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="数据对齐">数据对齐</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403310000860.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="采样时间">采样时间</h3><figure><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202403310002471.png"alt="image.png|550" /><figcaption aria-hidden="true">image.png|550</figcaption></figure><h3 id="校准">校准</h3><ul><li>ADC有一个内置自校准模式。校准可大幅减小因内部电容器组的变化而造成的准精度误差。校准期间，在每个电容器上都会计算出一个误差修正码(数字值)，这个码用于消除在随后的转换中每个电容器上产生的误差<br /></li><li>建议在每次上电后执行一次校准<br /></li><li>启动校准前， ADC必须处于关电状态超过至少两个ADC时钟周期</li></ul><h2 id="代码-3">代码</h2><h3 id="单次转换非扫描模式">单次转换，非扫描模式</h3><ul><li>开启GPIO,ADC的时钟，分频器</li><li>配置GPIO模拟输入</li><li>配置多路开关</li><li>配置ADC转换器</li><li>开启ADC</li><li>ADC校准</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6); </span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line"><span class="comment">// ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2,  ADC_SampleTime_55Cycles5);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; <span class="comment">//连续还是单次转换</span></span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; <span class="comment">//数据对其模式</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; <span class="comment">//外部触发控制源选择</span></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; <span class="comment">//ADC独立工作模式或者双ADC模式</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">1</span>; <span class="comment">//扫描模式下的通道数</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = DISABLE; <span class="comment">//扫描模式还是非扫描模式</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连续转换非扫描模式">连续转换，非扫描模式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;</span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;</span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;</span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;</span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">1</span>;</span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE; <span class="comment">// 启动连续扫描</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="单次转换非扫描模式来实现读取多个传感器">单次转换，非扫描模式来实现读取多个传感器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">uint8_t</span> ADC_Channel)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);</span><br><span class="line"><span class="keyword">return</span> ADC_GetConversionValue(ADC1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dma">DMA</h2><h3 id="原理">原理</h3><p>DMA（Direct Memory Access）直接存储器存取 -DMA可以提供外设和存储器或者存储器和存储器之间的高速数据传输，无须CPU干预，节省了CPU的资源- 12个独立可配置的通道： DMA1（7个通道）， DMA2（5个通道）每个通道都支持软件触发和特定的硬件触发<br />- STM32F103C8T6 DMA资源：DMA1（7个通道） <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012154146.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012158730.png"alt="image.png|500" /> -DMA1有7个通道，每个通道可以设置访问地址，但只有一个DMA总线，只能分时复用，如果两个通道访问同一个地址，则会由仲裁器决定哪一个先访问。-AHB从设备是CUP来配置DMA，主设备能写从设备，从设备不能写主设备，寄存器啥的都是从设备<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012203613.png"alt="image.png" /> - 数据宽度：字节8位，半字16位，字32位 -传输寄存器：每传输一次后计数器自动减一，减到0，会触发重装，可以设置是否重装-M2M控制是软件触发还是硬件触发，软件触发多用于从存储器到存储器，不需要等待存储器数据采集到数据- DMA启动有三个条件 1.启动开关控制，2.传输计数器的值大于0， 3.选择触发源- 写传输寄存器时必须先关闭开关控制，在写入传输计数器，最后打开开关控制<imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012220213.png"alt="image.png" /> - 触发源需要开启DMA，用到DMA函数，例如ADC_DMACMD <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404012225534.png"alt="image.png" /></p><h3 id="代码-4">代码</h3><ul><li>开启RCC时钟</li><li>DMA初始化</li><li>通道使能</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyDMA.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> MYDMA = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MyDMA_Init</span><span class="params">(<span class="type">uint32_t</span> AddrA, <span class="type">uint32_t</span> AddrB, <span class="type">uint16_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">DMA_InitTypeDef DMAy_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); </span><br><span class="line">DMAy_InitStructure.DMA_PeripheralBaseAddr = AddrA; <span class="comment">//起始地址</span></span><br><span class="line">DMAy_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; <span class="comment">//数据宽度</span></span><br><span class="line">DMAy_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable; <span class="comment">//是否自增</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryBaseAddr = AddrB; <span class="comment">//存储器起始地址</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte; <span class="comment">//存储器数据宽度</span></span><br><span class="line">DMAy_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; <span class="comment">//存储器是否自增</span></span><br><span class="line">DMAy_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; <span class="comment">//传输方向</span></span><br><span class="line">DMAy_InitStructure.DMA_BufferSize = size; <span class="comment">//传输计数器</span></span><br><span class="line">DMAy_InitStructure.DMA_M2M = DMA_M2M_Enable; <span class="comment">//选择硬件还是软件触发</span></span><br><span class="line">DMAy_InitStructure.DMA_Mode = DMA_Mode_Normal; <span class="comment">//是否启用自动重装</span></span><br><span class="line">DMAy_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级</span></span><br><span class="line"></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMAy_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">MYDMA = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyDMA_Transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">DMA_SetCurrDataCounter(DMA1_Channel1, MYDMA); </span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(DMA_GetFlagStatus(DMA1_FLAG_TC1) == RESET);</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="扫描模式单次转换代码">扫描模式+单次转换代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); </span><br><span class="line"></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6); </span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_1, <span class="number">2</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_2, <span class="number">3</span>,  ADC_SampleTime_55Cycles5);</span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;</span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;</span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;</span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; <span class="comment">//单次转换模式</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE; <span class="comment">//开启扫描模式</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">3</span>;</span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC1-&gt;DR; <span class="comment">//起始地址</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; <span class="comment">//数据宽度</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; <span class="comment">//是否自增</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value; <span class="comment">//存储器起始地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; <span class="comment">//存储器数据宽度</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; <span class="comment">//存储器是否自增</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; <span class="comment">//传输方向</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = <span class="number">3</span>; <span class="comment">//传输计数器</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal; <span class="comment">//是否启用自动重装</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; <span class="comment">//选择硬件还是软件触发</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级</span></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line">ADC_DMACmd(ADC1, ENABLE); <span class="comment">//开启ADC的DMA通道</span></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_GatValue</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//主函数需要一直调用</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_Cmd(DMA1_Channel1, DISABLE);</span><br><span class="line">DMA_SetCurrDataCounter(DMA1_Channel1, <span class="number">3</span>); </span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(DMA_GetFlagStatus(DMA1_FLAG_TC1) == RESET);</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描模式多次转换代码">扫描模式+多次转换代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//只需要调用初始会函数，需要的时候直接读取AD_Value的值就行</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);<span class="comment">//开启ADC1的时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//开启GPIOA的时钟</span></span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>, ADC_SampleTime_55Cycles5);<span class="comment">//规则组序列1的位置，配置为通道0</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_1, <span class="number">2</span>, ADC_SampleTime_55Cycles5);<span class="comment">//规则组序列2的位置，配置为通道1</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_2, <span class="number">3</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line"></span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;<span class="comment">//模式，选择独立模式，即单独使用ADC1</span></span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;<span class="comment">//数据对齐，选择右对齐</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;<span class="comment">//外部触发，使用软件触发，不需要外部触发</span></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;<span class="comment">//连续转换，使能，每转换一次规则组序列后立刻开始下一次转换</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = ENABLE;<span class="comment">//扫描模式，使能，扫描规则组的序列，扫描数量由ADC_NbrOfChannel确定</span></span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = <span class="number">3</span>;<span class="comment">//通道数，为4，扫描规则组的前4个通道</span></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC1-&gt;DR;<span class="comment">//外设基地址，给定形参AddrA</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;<span class="comment">//外设数据宽度，选择半字，对应16为的ADC数据寄存器</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;<span class="comment">//外设地址自增，选择失能，始终以ADC数据寄存器为源</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value;<span class="comment">//存储器基地址，给定存放AD转换结果的全局数组AD_Value</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;<span class="comment">//存储器数据宽度，选择半字，与源数据宽度对应</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;<span class="comment">//存储器地址自增，选择使能，每次转运后，数组移到下一个位置</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;<span class="comment">//数据传输方向，选择由外设到存储器，ADC数据寄存器转到数组</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = <span class="number">3</span>;<span class="comment">//转运的数据大小（转运次数），与ADC通道数一致</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;<span class="comment">//模式，选择循环模式，与ADC的连续转换一致</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;<span class="comment">//存储器到存储器，选择失能，数据由ADC外设触发转运到存储器</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;<span class="comment">//优先级，选择中等</span></span><br><span class="line">DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel1, ENABLE);<span class="comment">//DMA1的通道1使能</span></span><br><span class="line">ADC_DMACmd(ADC1, ENABLE);<span class="comment">//ADC1触发DMA1的信号使能</span></span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">ADC_ResetCalibration(ADC1);<span class="comment">//固定流程，内部有电路会自动执行校准</span></span><br><span class="line"><span class="keyword">while</span> (ADC_GetResetCalibrationStatus(ADC1) == SET);</span><br><span class="line">ADC_StartCalibration(ADC1);</span><br><span class="line"><span class="keyword">while</span> (ADC_GetCalibrationStatus(ADC1) == SET);</span><br><span class="line"></span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="串口通信">串口通信</h1><h2 id="串口通信相关知识">串口通信相关知识</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022331545.png"alt="image.png" /> - 全双工是两个设备可以同时通信 -有单独的时钟线是同步的，异步没有时钟线，需要事先约定一个采样频率 -单端信号需要公地，差分信号是两个引脚的电压差来通信的</p><p><strong>电平标准</strong></p><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：<br />- TTL电平：+3.3V或+5V表示1，0V表示0 -RS232电平：-3<sub>-15V表示1，+3</sub>+15V表示0 -RS485电平：两线压差+2<sub>+6V表示1，-2</sub>-6V表示0（差分信号）</p><p><strong>串口参数及时序</strong></p><ul><li>波特率：串口通信的速率 bit/s</li><li>起始位：标志一个数据帧的开始，固定为低电平，因为空闲状态是高电平，发送数据置0表示要发送数据</li><li>数据位：数据帧的有效载荷，1为高电平，0为低电平，低位先行</li><li>校验位：用于数据验证，根据数据位计算得来</li><li>停止位：用于数据帧间隔，固定为高电平，恢复默认高电平状态 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022345311.png"alt="image.png" /></li></ul><h2 id="usart串口">USART串口</h2><h3 id="硬件接线图">硬件接线图</h3><ul><li>简单双向串口通信有两根通信线（发送端TX和接收端RX）</li><li>TX与RX要交叉连接 当只需单向的数据传输时，可以只接一根通信线</li><li>当电平标准不一致时，需要加电平转换芯片 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404022338084.png"alt="image.png|500" /></li><li>USART（Universal Synchronous/AsynchronousReceiver/Transmitter）通用同步/异步收发器</li><li>USART是STM32内部集成的硬件外设，可根据数据寄存器的一个字节数据自动生成数据帧时序，从TX引脚发送出去，也可自动接收RX引脚的数据帧时序，拼接为一个字节数据，存放在数据寄存器里</li><li>自带波特率发生器，最高达4.5Mbits/s</li><li>可配置数据位长度（8/9）、停止位长度（0.5/1/1.5/2）</li><li>可选校验位（无校验/奇校验/偶校验）</li><li>支持同步模式、硬件流控制、DMA、智能卡、IrDA、LIN<br /></li><li>STM32F103C8T6 USART资源： USART1、 USART2、 USART3 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404030005074.png"alt="image.png|600" /></li></ul><p>中断控制：TXE发送寄存器空标志位，RXNE接受寄存器非空标志位</p><h3 id="发送接受字节程序">发送+接受字节程序</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404030013562.png"alt="image.png" /> - 发送器和接收器的波特率由波特率寄存器BRR里的DIV确定- 计算公式：波特率 = fPCLK2/1 / (16 * DIV)</p><p><strong>步骤:</strong> - 开启GPIO与USART时钟 -GPIO初始化，复用推挽输出，RX配置为输入 - 配置USART -需要发送直接初始化就行，接受需要配置中断，开启中断，配置优先级</p><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>Serial.c</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//配置波特率</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//硬件流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; <span class="comment">//发送或者接受模式</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//检验位设置</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1; <span class="comment">//停止位</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b; <span class="comment">//</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Byte);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Array[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; String[i]!= <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, String[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">Serial_digit</span><span class="params">(<span class="type">uint16_t</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i--)</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">10</span> * res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Serial_Pow</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span> = <span class="number">1</span>;</span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = <span class="built_in">pow</span> * <span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (Number / <span class="built_in">pow</span> != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> num, num_char;</span><br><span class="line"><span class="type">uint16_t</span> i, j = Serial_Pow(Number);</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span>;</span><br><span class="line"><span class="comment">//printf(&quot;% d\n&quot;, j);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = Serial_digit(j - i - <span class="number">1</span>);</span><br><span class="line">num = Number / <span class="built_in">pow</span>;</span><br><span class="line">Number = Number - num * <span class="built_in">pow</span>;</span><br><span class="line">num_char = num + <span class="number">0x30</span>;</span><br><span class="line">USART_SendData(USART1, num_char);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(ch);</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> String[<span class="number">100</span>];</span><br><span class="line">va_list arg;</span><br><span class="line">__va_start(arg, format);</span><br><span class="line"><span class="built_in">vsprintf</span>(String, format, arg);</span><br><span class="line">__va_end(arg);</span><br><span class="line">Serial_SentString(String);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line">Serial_RxData = USART_ReceiveData(USART1);</span><br><span class="line">Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">USART_ClearFlag(USART1, USART_FLAG_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="发送接受数据包程序">发送+接受数据包程序</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404082336377.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404082336569.png"alt="image.png" /></p><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SERIAL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Serial_TxPacket[];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Serial_RxFlag;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxFlag</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendPacket</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><code>Serial.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> Serial_TxPacket[<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure; <span class="comment">//中断初始化</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//配置波特率</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//硬件流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; <span class="comment">//发送或者接受模式</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//检验位设置</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1; <span class="comment">//停止位</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b; <span class="comment">//</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置分组方式，整个工程只设置1个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//设置中断通道，使用哪个引脚使用哪个</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Byte);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentArray</span><span class="params">(<span class="type">uint8_t</span> *Array, <span class="type">uint16_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, Array[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentString</span><span class="params">(<span class="type">char</span> *String)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; String[i]!= <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1, String[i]);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">Serial_digit</span><span class="params">(<span class="type">uint16_t</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i--)</span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">10</span> * res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">Serial_Pow</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span> = <span class="number">1</span>;</span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = <span class="built_in">pow</span> * <span class="number">10</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (Number / <span class="built_in">pow</span> != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SentNumber</span><span class="params">(<span class="type">uint32_t</span> Number)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> num, num_char;</span><br><span class="line"><span class="type">uint16_t</span> i, j = Serial_Pow(Number);</span><br><span class="line"><span class="type">uint32_t</span> <span class="built_in">pow</span>;</span><br><span class="line"><span class="comment">//printf(&quot;% d\n&quot;, j);</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pow</span> = Serial_digit(j - i - <span class="number">1</span>);</span><br><span class="line">num = Number / <span class="built_in">pow</span>;</span><br><span class="line">Number = Number - num * <span class="built_in">pow</span>;</span><br><span class="line">num_char = num + <span class="number">0x30</span>;</span><br><span class="line">USART_SendData(USART1, num_char);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(ch);</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span>  *format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> String[<span class="number">100</span>];</span><br><span class="line">va_list arg;</span><br><span class="line">__va_start(arg, format);</span><br><span class="line"><span class="built_in">vsprintf</span>(String, format, arg);</span><br><span class="line">__va_end(arg);</span><br><span class="line">Serial_SentString(String);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">uint8_t Serial_GeRxFlag(void)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if (Serial_RxFlag == 1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Serial_RxFlag = 0;</span></span><br><span class="line"><span class="comment">return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GeRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendPacket</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_SentByte(<span class="number">0xFF</span>);</span><br><span class="line">Serial_SentArray(Serial_TxPacket, <span class="number">4</span>);</span><br><span class="line">Serial_SentByte(<span class="number">0xFE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> RxState = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> PrxState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> RxData = USART_ReceiveData(USART1);</span><br><span class="line"><span class="keyword">switch</span> (RxState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(RxData == <span class="string">&#x27;@&#x27;</span> &amp;&amp; Serial_RxFlag == <span class="number">0</span>) <span class="comment">//这里加入Serial_RxFlag防止传的太快，导致错位</span></span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">1</span>;</span><br><span class="line">PrxState = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> RxState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(RxData == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Serial_RxPacket[PrxState] = RxData;</span><br><span class="line">PrxState ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (RxData == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">RxState = <span class="number">0</span>;</span><br><span class="line">Serial_RxPacket[PrxState] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">USART_ClearITPendingBit(USART1, USART_IT_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>main.c</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_Init();</span><br><span class="line">Serial_Init();</span><br><span class="line">LED_Init();</span><br><span class="line">OLED_ShowString(<span class="number">1</span>, <span class="number">6</span>, <span class="string">&quot;TEXT&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, Serial_RxPacket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LED_ON&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0_ON();</span><br><span class="line">Serial_SentString(<span class="string">&quot;LED_ON_OK\r\n&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LED_ON_OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LED_OFF&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0_OFF();</span><br><span class="line">Serial_SentString(<span class="string">&quot;LED_ON_OFF\r\n&quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LED_OFF_OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="iic串口">IIC串口</h2><h3 id="硬件与软件原理">硬件与软件原理</h3><ul><li>I2C（Inter IC Bus）是由Philips公司开发的一种通用数据总线</li><li>两根通信线：SCL（Serial Clock）、SDA（Serial Data）</li><li>同步，半双工</li><li>带数据应答</li><li>支持总线挂载多设备（一主多从、多主多从） <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102225583.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102226397.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102232174.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102233008.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102235494.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102244224.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404102248279.png"alt="image.png" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112358611.png"alt="image.png" /></li></ul><h3 id="软件i2c代码">软件I2C代码</h3><p><code>MyI2C.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYI2C_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYI2C_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Stop</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendBit</span><span class="params">(<span class="type">uint8_t</span> Byte)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveByte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendACK</span><span class="params">(<span class="type">uint8_t</span> ACKBit)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveACK</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>MyI2C.h</code> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyI2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_W_SCL</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_10, (BitAction)BitValue);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_W_SDA</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_11, (BitAction)BitValue);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_R_SDA</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> BitValue;</span><br><span class="line">BitValue = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_11);</span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> BitValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 |GPIO_Pin_11;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_WriteBit(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, Bit_SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SDA(<span class="number">0</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(<span class="number">0</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendBit</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(Byte &amp; (<span class="number">0x80</span> &gt;&gt; i));</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint8_t</span> Byte;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(MYI2C_R_SDA()==<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">Byte |= (<span class="number">0x80</span> &gt;&gt; i);</span><br><span class="line">&#125;</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MYI2C_SendACK</span><span class="params">(<span class="type">uint8_t</span> ACKBit)</span></span><br><span class="line">&#123;</span><br><span class="line">MYI2C_W_SDA(ACKBit);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MYI2C_ReceiveACK</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> ACKBit;</span><br><span class="line">MYI2C_W_SDA(<span class="number">1</span>);</span><br><span class="line">MYI2C_W_SCL(<span class="number">1</span>);</span><br><span class="line">ACKBit = MYI2C_R_SDA();</span><br><span class="line">MYI2C_W_SCL(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ACKBit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="硬件i2c代代码">硬件I2C代代码</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112338186.png"alt="image.png|500" /> - 发送数据时当数据寄存器为空 TEX为1 -接受数据时当数据寄存器为非空 RXNE为1 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112343366.png"alt="image.png|600" /> - GPIO为复用开漏输出模式 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112347194.png"alt="image.png" /> - 10位地址帧率头是11110 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202404112347444.png"alt="image.png" /></p><h3 id="代码-5">代码</h3><ul><li>开启I2C外设与GPIO口时钟</li><li>GPIO口初始化为复用开漏输出模型</li><li>I2C配置</li><li>使能IIC</li></ul>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言的基础用法</title>
      <link href="/posts/673b0eac.html"/>
      <url>/posts/673b0eac.html</url>
      
        <content type="html"><![CDATA[<h1 id="初识c语言">初识C语言</h1><p><a href="https://zhuanlan.zhihu.com/p/405106044">C语言中%d，等等%的用法，和意义 - 知乎 (zhihu.com)</a></p><h2 id="常用语句">常用语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="数据类型">数据类型</h2><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401301753648.png"alt="image.png|600" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="comment">//double a = 0;</span></span><br><span class="line"><span class="comment">//scanf_s(&quot;%lf&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//printf(&quot;a = %lf\n&quot;, a);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long long占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;float占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;double占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char占 %lld 个字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021539955.png"alt="image.png" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">scanf_s(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="变量常量">变量、常量</h2><ul><li><code>static</code> 静态变量，在函数中再次使用时不会重新定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>const</code> 修饰的常变量，不能更改但实际上还是一个变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>#define</code> 定义的标识符常量</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max 10</span></span><br></pre></td></tr></table></figure><ul><li>枚举常量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">male,</span><br><span class="line">female,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">c</span> =</span> female;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><ul><li>字符串的结束标志是一个 <code>\0</code> 的转义字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr1 = %s\n&quot;</span>, arr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr2 = %s\n&quot;</span>, arr2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="操作符">操作符</h2><ul><li><code>b = a++</code> 与<code>b = ++a</code>，第一个是b先等于a，然后a再加2，第二个是a先加2，然后b等于a</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*int a = 0, b = 0, c = 0;*/</span></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = a++;</span><br><span class="line">c = ++a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%d%d&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>强制类型转换</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> d = (<span class="type">int</span>)<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><ul><li><code>exp? exp1 : exp2</code> 三目操作符 <code>exp?</code>为真则执行 <code>exp1</code> ,为假则执行 <code>exp2</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> max = a &lt; b ? a + <span class="number">1</span> : b - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><ul><li><code>extern</code> 声明变量或者函数来自其他文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span>  <span class="type">int</span> g_val;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> res = add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>define</code> 与 <code>typedefine</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> g_val 10;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(x, y) (x &gt; y? x : y)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> max = max(a, b);</span><br><span class="line"><span class="type">int</span> res = add(a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>, res);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>, g_val);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="指针">指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="type">int</span>* p = &amp;a; <span class="comment">//p是指针，存放a的地址</span></span><br><span class="line">*p = <span class="number">20</span>; <span class="comment">//利用指针p，对a进行修改</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体">结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">18</span>];</span><br><span class="line"><span class="type">short</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;法国人&quot;</span>, <span class="number">16</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, b1.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, b1.price);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>* <span class="title">p</span> =</span> &amp;b1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, (*p).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, (*p).price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>, p -&gt; name); <span class="comment">//利用指针p，-&gt; 表示指向变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格：%d\n&quot;</span>, p -&gt;price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="分支与循环">分支与循环</h1><h2 id="顺序语句">顺序语句</h2><h3 id="again-goto-again"><code>again: goto again;</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">again:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相等\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不相等\n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> again;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择语句">选择语句</h2><h3 id="if语句">if语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">18</span> &lt;= age &amp;&amp; age &lt; <span class="number">28</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;青年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">28</span> &lt;= age &amp;&amp; age &lt; <span class="number">48</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句">switch语句</h3><p><code>case</code> 是入口，<code>break</code> 是出口，没有<code>break</code> 从符合条件的 <code>case</code>处开始往下执行，<code>switch</code> 的条件只能是整数常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入一个值：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= data &amp;&amp; data &lt;= <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期一\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期二\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期三\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期四\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期五\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期六\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期天\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// case中没出现的情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入正确的数&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请重新输入\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句">循环语句</h2><h3 id="for-循环"><code>for</code> 循环</h3><ul><li>求阶乘的累加</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> num2;</span><br><span class="line"><span class="type">int</span> num3 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> num4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num1; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line">num2 = j + <span class="number">1</span>;</span><br><span class="line">num3 = num3 * num2;</span><br><span class="line">&#125;</span><br><span class="line">num4 = num4 + num3;</span><br><span class="line">num3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num4);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="while-循环"><code>while</code> 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>)<span class="comment">//判断部分  </span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);  </span><br><span class="line">i = i+<span class="number">1</span>;<span class="comment">//调整部分  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while-循环"><code>do while</code> 循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>);  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue-退出本次循环"><code>continue</code> 退出本次循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)  </span><br><span class="line"><span class="keyword">continue</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-退出循环"><code>break</code> 退出循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span>)  </span><br><span class="line"><span class="keyword">break</span>;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数">函数</h1><h2 id="定义函数与头文件">定义函数与头文件</h2><ul><li>通常使用 <code>add.c</code> 与 <code>add.h</code>来定义函数与头文件，<code>add.c</code> 来存放函数，<code>add.h</code>来存放函数 函数与变量的声明</li></ul><h3 id="定义头文件">定义头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AAD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="使用头文件">使用头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的定义与声明">函数的定义与声明</h3><ul><li>函数定义在主函数后可以不用声明</li><li>外部函数与变量用 <code>extern</code> 来声明</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span>  <span class="type">int</span> g_val;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> k)</span>;</span><br></pre></td></tr></table></figure><h2 id="函数的调用">函数的调用</h2><h3 id="传值调用">传值调用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> c;</span><br><span class="line"> c = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = c;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">swap(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传地址调用">传地址调用</h3><ul><li>利用指针可以在函数内部对外部变量进行运算赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> c;</span><br><span class="line"> c = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = c;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">swap(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, x, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传递数组 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">putarr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> arr_size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; arr_size; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, arr[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">num_size = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(num(<span class="number">0</span>));</span><br><span class="line">putarr(num, num_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的递归">函数的递归</h2><ul><li>函数自己调用自己，可以将复杂问题转变为多个重复的小问题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">string_len</span><span class="params">(<span class="type">char</span>* arr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line"><span class="keyword">if</span> (*arr != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + string_len(arr + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;asdf&quot;</span>;</span><br><span class="line"><span class="type">int</span> num_arr = string_len(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num_arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="数组">数组</h1><h2 id="数组相关性质">数组相关性质</h2><ul><li>字符串数组的长度</li><li>一维数组的地址是连续的，每次加上对应数据类型的字节,地址由低到高</li><li><code>char</code> 类型的数组，定义方式不同，<code>sizeof()</code>的结果不同</li><li>通过函数传递数组，传递的只是首元素的地址，不能在函数里面通过<code>sizeof()</code> 来计算元素个数 <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402042218556.png"alt="image.png|450" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[] = <span class="string">&quot;12345&quot;</span>; <span class="comment">// 含有 &#x27;/0&#x27;</span></span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;; <span class="comment">// 不含有 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_sizeof: %d\n&quot;</span>, <span class="keyword">sizeof</span>(arr1)); <span class="comment">// sizeof 包括 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_strlen: %d\n&quot;</span>, <span class="built_in">strlen</span>(arr1)); <span class="comment">// strlen 不包括 &#x27;/0&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_sizeof: %d\n&quot;</span>, <span class="keyword">sizeof</span>(arr2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr_strlen: %d\n&quot;</span>, <span class="built_in">strlen</span>(arr2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401310022649.png"alt="image.png" /></li><li>数组地址与数组首元素地址 数组 <code>arr</code>是数组首元素地址，<code>sizeof(arr)</code> 除外</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr); <span class="comment">//数组首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]); <span class="comment">//数组首元素地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr); <span class="comment">//整个数组地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202401311506129.png"alt="image.png|165" /> ## 二维数组</p><ul><li>二维数组的行可以省略，行不可以省略</li><li>二维数组的地址是连续的，每次加上对应数据类型的字节<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h1 id="操作符-1">操作符</h1><h2 id="运算操作符">运算操作符</h2><ul><li><code>&gt;&gt;</code> <strong>只能作用于整数</strong><ul><li>算术右移 右边丢弃，左边补原来的符号位</li><li>逻辑右移 右边丢弃，左边补0</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>  b =  a &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&lt;</code> <strong>只能作用于整数</strong><ul><li>左移操作 左边丢弃，右边补0,相当于乘以2</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span>  b =  a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>&amp;</code> <strong>按位与，只能作用于整数</strong></p><ul><li>求整数二进制中1的个数</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">int</span>  num, count;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (((num &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>|</code> <strong>按位或，只能作用于整数</strong></p></li><li><p><code>！</code> <strong>按位非，只能作用于整数</strong></p></li><li><p><code>^</code><strong>按位非，只能作用于整数，相异为1，相同为0</strong></p><ul><li>利用异或不创建变量来交换变量</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>  b = <span class="number">5</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = b ^ a;</span><br><span class="line">a = b ^ a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑操作符">逻辑操作符</h2><ul><li><code>&amp;&amp;</code> 逻辑与，<code>a &amp;&amp; b &amp;&amp; c</code>, 若左边为0，则右边不再运算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span> , b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d, d = %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021600462.png"alt="image.png" /> - <code>||</code>逻辑或，<code>a &amp;&amp; b &amp;&amp; c</code>, 若左边为1，则右边不再运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span> , b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ || ++b || d++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d, d = %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="符合运算符">符合运算符</h2><ul><li><code>+=</code> <code>a += 1</code> 等价于<code>a = a + 1</code></li><li><code>-=</code> <code>a -= 1</code> 等价于<code>a = a - 1</code></li></ul><h2 id="单目操作符">单目操作符</h2><ul><li>只有一个操作数，称为单目操作符</li><li><code>!a</code> 非运算</li><li><code>-a</code> 取反</li><li><code>&amp;a</code> 取地址操作符</li><li><code>*a</code> 解引用操作符，a 为地址找到地址对应的内容</li><li><code>&amp;a</code> 取地址操作符</li><li><code>sizeof(a)</code>计算a的大小，单位为字节，<code>sizeof()内部不参与运算</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">short</span>  s = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(s = a + <span class="number">10</span>)); <span class="comment">//结果是2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s); <span class="comment">//结果是0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>~a</code> 按位取反</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">int</span> a = <span class="number">11</span>;</span><br><span class="line">a = a | (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//15,或1得1</span></span><br><span class="line">a = a &amp; (~(<span class="number">1</span> &lt;&lt; <span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//11，与0得0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>++</code> <code>a++</code>, 先使用后加加， <code>++a</code>先加加后使用</li><li><code>(int)</code> 强制类型转换</li></ul><h2 id="条件操作符">条件操作符</h2><ul><li><code>exp? exp1 : exp2</code> , <code>exp?</code> 为1则执行<code>exp1</code>, 为0则执行 <code>exp2</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = (a &gt; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逗号表达式">逗号表达式</h2><ul><li><code>a = (exp0, exp1, exp2)</code>从左到右执行，整个表达式的的结果是最后一个表达式的结果</li></ul><h2 id="表达式求值">表达式求值</h2><h3 id="隐式表达式">隐式表达式</h3><ul><li>字符和短整型操作数在运算前会进行整型提升，即将其转换为普通整形，再进行运算。<strong>整型提升是将其首位扩充到整形的4字节</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a, b, c;</span><br><span class="line">a = <span class="number">127</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c); <span class="comment">//-126</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运算过程</strong></p><ul><li>a = 01111111, 整型提升: a = 00000000 00000000 00000000 01111111</li><li>b = 0000011, 整型提升: b = 00000000 00000000 00000000 0000011</li><li>c = a + b = 00000000 00000000 00000000 1000010 = 10000010</li><li>打印时进行运算c = 1000010，整型提升: c = 11111111 11111111 1111111110000010（补码）</li><li>c = 11111111 11111111 11111111 10000001（反码）</li><li>c = 10000000 00000000 00000000 01111110（原码）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">0xb6</span>;</span><br><span class="line"><span class="type">short</span> b = <span class="number">0xb600</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0xb6000000</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0xb6</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0xb600</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0xb6000000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">//c</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(c)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(+c)); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(!c)); <span class="comment">//1,逻辑运算，不需要整型提升</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运算优先级">运算优先级</h3><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021736670.png"alt="image.png|600" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021736307.png"alt="image.png|600" /> <imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402021737025.png"alt="image.png|600" /> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">0</span>]; vp &lt; values[<span class="number">5</span>])</span><br><span class="line">&#123;</span><br><span class="line">*vp++ = <span class="number">0</span>; <span class="comment">//++优先级高，vp++先运算，++为后置++，结果为vp再进行++，即*vp = 0,然后vp++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> # 指针</p><ul><li>指针+/- 指针为元素的个数</li><li><code>const int* p = &amp;n</code> 表示 <code>*p</code> 不能被修改，<code>int* const p = &amp;n</code> 表示 <code>p</code> 不能被修改</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m = <span class="number">1</span>, <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = &amp;n；</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> pa = &amp;n；</span><br><span class="line">*p = <span class="number">2</span>; <span class="comment">//提示错误</span></span><br><span class="line">pa = &amp;m; <span class="comment">//提示错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的类型">指针的类型</h2><ul><li>指针大小都是4/8个字节</li><li>指针类型决定了解引用对应内存大小，以及指针+1对应地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;n;</span><br><span class="line"><span class="type">char</span>* pb = &amp;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pa + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pb);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pb + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402022104891.png"alt="image.png" /> ## 野指针</p><h3 id="定义">定义</h3><ul><li>指针随机不受控制的情况</li></ul><h3 id="野指针成因">野指针成因</h3><ul><li><p>指针未初始化<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//局部变量指针未初始化，默认为随机值  </span></span><br><span class="line">*p = <span class="number">20</span>;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>指针越界访问</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当指针指向的范围超出数组arr的范围时，p就是野指针</span></span><br><span class="line">*(p++) = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指针指向的空间释放</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">text</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* p = text(); <span class="comment">//a运算完就被释放了 </span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针运算">指针运算</h2><h3 id="指针---整数">指针 +/- 整数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">0</span>]; vp &lt; values[<span class="number">5</span>]) <span class="comment">//给数组所有元素赋0</span></span><br><span class="line">&#123;</span><br><span class="line">*vp++ = <span class="number">0</span>; <span class="comment">//++优先级高，vp++先运算，++为后置++，结果为vp再进行++，即*vp = 0,然后vp++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针---指针">指针 - 指针</h3><ul><li>指针 - 指针是元素的个数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> values[<span class="number">5</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span> num_values = &amp;values[<span class="number">4</span>] - &amp;values[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num_values);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* start = str;</span><br><span class="line"><span class="type">char</span>* end = str;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*end != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">end++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> end - start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="type">int</span> num_arr = my_strlen(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num_arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针的关系运算">指针的关系运算</h3><ul><li><p>指针比较大小</p><p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。即只允许大的指针与小的指针比较</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> values[<span class="number">5</span>];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[<span class="number">5</span>]; vp &gt; values[<span class="number">0</span>]) <span class="comment">//给数组所有元素赋0</span></span><br><span class="line">&#123;</span><br><span class="line">*--vp = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针与数组">指针与数组</h2><ul><li>数组名 <code>arr</code> 是数组首元素地址,有两个例外<ul><li><code>&amp;arr</code> 是数组全部数组元素地址</li><li><code>sizeof(arr)</code> 是整个数组的大小</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, arr + <span class="number">1</span>); <span class="comment">//加了4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;arr + <span class="number">1</span>); <span class="comment">//加了40</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202402022237654.png"alt="image.png" /> ## 二级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* pa = &amp;a;</span><br><span class="line"><span class="type">int</span>** ppa = &amp;pa;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *pa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, **ppa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针数组">指针数组</h2><ul><li><code>int* arr[] = &#123;&amp;a, &amp;b, &amp;b&#125;</code>存放指针的数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>* arr[] = &#123;&amp;a, &amp;b, &amp;b&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p == %p\n&quot;</span>, &amp;a, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *arr[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构体-1">结构体</h1><h2 id="结构体的定义">结构体的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">&#125;stu1, stu2, stu3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">&#125;student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu_001</span> =</span> &#123;<span class="string">&quot;小红&quot;</span>, <span class="number">15</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;;</span><br><span class="line">student stu_002 = &#123; <span class="string">&quot;小红&quot;</span>, <span class="number">15</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;x&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体的嵌套">结构体的嵌套</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="type">char</span> *pc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;小红&quot;</span>, &#123;<span class="string">&quot;小白&quot;</span>, <span class="number">15</span>, <span class="string">&quot;123456789001&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;, arr&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, stu.ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, stu.s.name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体函数传参">结构体函数传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">short</span> age;</span><br><span class="line"><span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line"><span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ptint_struct</span><span class="params">(<span class="keyword">struct</span> stu tmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.tele);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp.sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ptint2_struct</span><span class="params">(<span class="keyword">struct</span> stu* tmp)</span> <span class="comment">//这种方法好，节省空间</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp -&gt; age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; tele);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp -&gt; sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">stu_001</span> =</span> &#123; <span class="string">&quot;小白&quot;</span>, <span class="number">15</span>, <span class="string">&quot;123456789001&quot;</span>, <span class="string">&quot;x&quot;</span> &#125;;</span><br><span class="line">ptint1_struct(stu_001);</span><br><span class="line">ptint2_struct(&amp;stu_001);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib绘图</title>
      <link href="/posts/aa11dae6.html"/>
      <url>/posts/aa11dae6.html</url>
      
        <content type="html"><![CDATA[<p><ahref="https://zhuanlan.zhihu.com/p/634634968">Python使用Matplotlib库绘制双y轴图形（柱状图+折线图）- 知乎 (zhihu.com)</a></p><h1 id="基础用法基础用法">01基础用法基础用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line">x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">50</span>)  </span><br><span class="line"><span class="comment"># y = 2*x + 1  </span></span><br><span class="line">y = x**<span class="number">2</span>  </span><br><span class="line">plt.plot(x, y) <span class="comment">#绘制图像  </span></span><br><span class="line">plt.show() <span class="comment">#图像展示</span></span><br></pre></td></tr></table></figure><h1 id="figure图像">02figure图像</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>))  </span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="设置坐标轴1">03设置坐标轴1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.xlim((-<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">#设置坐标轴范围  </span></span><br><span class="line">plt.ylim((-<span class="number">1</span>, <span class="number">2</span>))  </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>) <span class="comment">#设置x轴标签  </span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">new_ticks = np.linspace(-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)  </span><br><span class="line">plt.xticks(new_ticks) <span class="comment">#设置坐标轴的角标  </span></span><br><span class="line">plt.yticks([-<span class="number">2</span>, -<span class="number">1.8</span>, -<span class="number">1</span>, <span class="number">1.22</span>, <span class="number">3</span>], [<span class="string">r&#x27;$really\ bad$&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;really good&#x27;</span>]) <span class="comment">#r&#x27;$really\ bad$改变字体，空格前加\  </span></span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="设置坐标轴2">04设置坐标轴2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">plt.plot(x, y1)  </span><br><span class="line">plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">ax = plt.gca() <span class="comment"># 创建关于坐标轴的对象  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>) <span class="comment"># 设置坐标轴无色  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&#x27;bottom&#x27;</span>) <span class="comment"># 设置下方为x轴,其实不用改  </span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 设置左方为y轴  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>)) <span class="comment"># &#x27;data&#x27;表示按数值挪动，其后数字代表挪动到Y轴的刻度值，除‘data’以外还有‘outward’和‘axes’  </span></span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图例">05图例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line"><span class="comment"># l1 = plt.plot(x, y1, label=&#x27;up&#x27;)  </span></span><br><span class="line"><span class="comment"># l2 = plt.plot(x, y2, color=&#x27;red&#x27;, linewidth=1.0, linestyle=&#x27;--&#x27;, label=&#x27;down&#x27;)  </span></span><br><span class="line"><span class="comment"># plt.legend() #显示图例  </span></span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">l1, = plt.plot(x, y1)  </span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)  </span><br><span class="line">plt.legend(handles=[l1, l2], labels=[<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>], loc=<span class="string">&#x27;best&#x27;</span>) <span class="comment"># 显示图例 loc=&#x27;best&#x27; 表示图例自动选择最佳位置  </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="添加注解">06添加注解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">l1 = plt.plot(x, y1, label=<span class="string">&#x27;up&#x27;</span>)  </span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;down&#x27;</span>)  </span><br><span class="line">plt.legend() <span class="comment">#显示图例  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标轴  </span></span><br><span class="line">ax = plt.gca()  </span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#添加一个点与一条线  </span></span><br><span class="line">x0 = <span class="number">1</span>  </span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span>  </span><br><span class="line">plt.scatter(x0, y0, <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>) <span class="comment"># 绘制一个点,点的位置，大小，颜色是blue  </span></span><br><span class="line">plt.plot([x0, x0], [y0, <span class="number">0</span>], <span class="string">&#x27;k--&#x27;</span>, lw=<span class="number">1</span>) <span class="comment"># 绘制一条直线，k是黑色，用虚线表示lw=linewidth  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">plt.annotate(<span class="string">&#x27;2X+1=%s&#x27;</span> % y0, xy=(x0, y0), xycoords=<span class="string">&#x27;data&#x27;</span>, xytext=(+<span class="number">30</span>, -<span class="number">30</span>), textcoords=<span class="string">&#x27;offset points&#x27;</span>, fontsize=<span class="number">16</span>, arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&#x27;-&gt;&#x27;</span>, connectionstyle=<span class="string">&#x27;arc3, rad=.2&#x27;</span>))  </span><br><span class="line"><span class="comment">#xycoords=&#x27;data&#x27;表示注释点的坐标以数据的坐标（1，3）为准  </span></span><br><span class="line"><span class="comment">#xytext=(+30, -30)表示注释文本的坐标相对注释点坐标（1，3）的位置  </span></span><br><span class="line"><span class="comment">#textcoords=&#x27;offset points&#x27;表示注释文本的坐标相对注释点坐标（1，3）的位置是以点为单位的，&#x27;offset pixels&#x27;表示以像素为单位  </span></span><br><span class="line"><span class="comment">#fontsize注释字体大小  </span></span><br><span class="line"><span class="comment">#arrowprops=dict(arrowstyle=‘-&gt;’, connectionstyle=‘arc3, rad=.2’)是一个参数，用来指定绘制一个箭头从文本到被注释点的属性12。它是一个字典，包含以下两个键值对：  </span></span><br><span class="line"><span class="comment">#arrowstyle=‘-&gt;‘表示箭头的样式是一个简单的箭头，箭头尾部是一条直线，箭头头部是一个三角形12。你也可以使用其他的箭头样式，比如’-|&gt;’（箭头尾部是一条直线，箭头头部是一个大三角形）或’&lt;-&#x27;（箭头尾部是一个三角形，箭头头部是一条直线）12。  </span></span><br><span class="line"><span class="comment">#connectionstyle=‘arc3, rad=.2’表示箭头的连接方式是一个三次贝塞尔曲线，rad=.2表示曲线的弯曲程度12。你也可以使用其他的连接方式，比如’angle3’（两条直线连接，中间有一个角度）或’bar’（两条直线连接，中间有一段水平或垂直的线段）12。  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">plt.text(-<span class="number">1</span>, <span class="number">10</span>, <span class="string">&#x27;This is the some text&#x27;</span>, fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;y&#x27;</span>&#125;)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="能见度tick">07能见度tick</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span>  </span><br><span class="line">y2 = x**<span class="number">2</span>  </span><br><span class="line">plt.figure() <span class="comment">#创建一个新的图形窗口  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">l1 = plt.plot(x, y1, label=<span class="string">&#x27;up&#x27;</span>)  </span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;down&#x27;</span>)  </span><br><span class="line">plt.legend() <span class="comment">#显示图例  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标轴  </span></span><br><span class="line">ax = plt.gca()  </span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)  </span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#设置坐标的文本框  </span></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():  </span><br><span class="line">label.set_fontsize(<span class="number">12</span>) <span class="comment"># 设置x轴和y轴上的刻度标签的字体大小为12  </span></span><br><span class="line">label.set_bbox(<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;white&#x27;</span>, edgecolor=<span class="string">&#x27;none&#x27;</span>, alpha=<span class="number">0.7</span>)) <span class="comment">#facecolor是文本框的背景颜色， edgecolor是文本框的边框颜色,alpha是文本框的透明度，取值范围是0到1，0表示完全透明，1表示完全不透明  </span></span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="散点图">08散点图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">n = <span class="number">1024</span>  </span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  </span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  </span><br><span class="line">T = np.arctan2(Y, X)  </span><br><span class="line">  </span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">0.5</span>)  </span><br><span class="line"><span class="comment"># plt.scatter(np.arange(5), np.arange(5))  </span></span><br><span class="line">  </span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="柱状图">09柱状图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">n = <span class="number">12</span>  </span><br><span class="line">x = np.arange(n)  </span><br><span class="line">y1 = (<span class="number">1</span>-x/<span class="built_in">float</span>(n))*np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n) <span class="comment">#0.5 到 1.0 的区间内，均匀地抽取 n 个随机数，然后返回一个长度为 n 的一维数组  </span></span><br><span class="line">y2 = (<span class="number">1</span>-x/<span class="built_in">float</span>(n))*np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)  </span><br><span class="line">plt.bar(x, +y1, facecolor=<span class="string">&#x27;#9999ff&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line">plt.bar(x, -y2, facecolor=<span class="string">&#x27;#ff9999&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> x_1, y_1 <span class="keyword">in</span> <span class="built_in">zip</span>(x, y1):  </span><br><span class="line">plt.text(x_1, y_1, <span class="string">&#x27;%.2f&#x27;</span> % y_1, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> x_2, y_2 <span class="keyword">in</span> <span class="built_in">zip</span>(x, y2):  </span><br><span class="line">plt.text(x_2, -y_2-<span class="number">0.12</span>, <span class="string">&#x27;-%.2f&#x27;</span> % y_2, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  </span><br><span class="line"><span class="comment"># plt.xlim(-0.5, n)  </span></span><br><span class="line"><span class="comment"># plt.ylim(-1.25, 1.25)  </span></span><br><span class="line">plt.axis([-<span class="number">0.5</span>, n, -<span class="number">1.25</span>, <span class="number">1.25</span>]) <span class="comment"># 设置 x 轴和 y 轴的显示范围  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="等高线图">10等高线图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):  </span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - y**<span class="number">2</span>)  </span><br><span class="line">n = <span class="number">256</span>  </span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)  </span><br><span class="line">y = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)  </span><br><span class="line">X, Y = np.meshgrid(x, y)  </span><br><span class="line">plt.contourf(X, Y, f(X, Y), <span class="number">8</span>, alpha=<span class="number">0.75</span>, cmap=plt.cm.hot)  </span><br><span class="line"><span class="comment"># 绘制等高线填充图  </span></span><br><span class="line"><span class="comment"># X, Y：表示网格的坐标点  </span></span><br><span class="line"><span class="comment"># f(X, Y)：表示计算每个坐标点的高度值  </span></span><br><span class="line"><span class="comment"># 8：表示将等高线分成8个级别  </span></span><br><span class="line"><span class="comment"># alpha=0.75：表示填充颜色的透明度为0.75  </span></span><br><span class="line"><span class="comment"># cmap=plt.cm.hot：表示使用&quot;hot&quot;颜色映射，即红-黄-白的渐变色  </span></span><br><span class="line">C = plt.contour(X, Y, f(X, Y), <span class="number">8</span>, colors=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">0.5</span>)  </span><br><span class="line"><span class="comment">#绘制的等高线图  </span></span><br><span class="line"><span class="comment">#8表示您希望绘制的等高线数量  </span></span><br><span class="line">plt.clabel(C, inline=<span class="literal">True</span>, fontsize=<span class="number">10</span>)  </span><br><span class="line"><span class="comment">#添加高度标签  </span></span><br><span class="line"><span class="comment">#C: 这是一个等高线对象，通常是通过plt.contour或plt.contourf函数生成的。  </span></span><br><span class="line"><span class="comment">#inline=True: 表示将标签放置在线的中间位置。如果设置为False，标签将被放置在等高线线条旁边。  </span></span><br><span class="line"><span class="comment">#fontsize=10: 这是标签的字体大小，可以根据需要调整。  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图片lmage">11图片lmage</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">a = np.array([<span class="number">0.31</span>, <span class="number">0.36</span>, <span class="number">0.42</span>, <span class="number">0.36</span>, <span class="number">0.43</span>, <span class="number">0.52</span>, <span class="number">0.42</span>, <span class="number">0.52</span>, <span class="number">0.65</span>]).reshape(<span class="number">3</span>, <span class="number">3</span>)  </span><br><span class="line">plt.imshow(a, interpolation=<span class="string">&#x27;nearest&#x27;</span>, cmap=<span class="string">&#x27;bone&#x27;</span>, origin=<span class="string">&#x27;lower&#x27;</span>)  </span><br><span class="line"><span class="comment">#a是要绘制的矩阵或图像数据。  </span></span><br><span class="line"><span class="comment">#interpolation=&#x27;nearest&#x27;指定使用最近邻插值方法来显示图像。  </span></span><br><span class="line"><span class="comment"># cmap=&#x27;bone&#x27;指定使用&#x27;Bone&#x27;颜色映射来渲染图像，这将使图像呈现黑白效果。  </span></span><br><span class="line"><span class="comment"># origin=&#x27;lower&#x27;表示矩阵的原点在左下角。  </span></span><br><span class="line">plt.colorbar(shrink=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#添加颜色条。  </span></span><br><span class="line"><span class="comment"># shrink=1表示将颜色条的尺寸设置为图像的1/1，使其与图像大小一致。  </span></span><br><span class="line">plt.xticks(())  </span><br><span class="line">plt.yticks(())  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="三维数据绘图">12三维数据绘图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import matplotlib  </span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># matplotlib.use(&#x27;Qt5Agg&#x27;)  </span></span><br><span class="line">fig = plt.figure()  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">ax = fig.add_axes(Axes3D(fig)) <span class="comment">#Axes3D类创建一个3D坐标轴对象ax，用来绘制3D图形  </span></span><br><span class="line"><span class="comment"># ax = Axes3D(fig) #不能用了  </span></span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line"><span class="comment"># ax = plt.axes(projection=&#x27;3d&#x27;)  </span></span><br><span class="line">x = np.arange(-<span class="number">4</span>, <span class="number">4</span>, <span class="number">0.25</span>)  </span><br><span class="line">y = np.arange(-<span class="number">4</span>, <span class="number">4</span>, <span class="number">0.25</span>)  </span><br><span class="line">X, Y = np.meshgrid(x, y)  </span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)  </span><br><span class="line">Z = np.sin(R)  </span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.get_cmap(<span class="string">&#x27;rainbow&#x27;</span>))  </span><br><span class="line"><span class="comment">#X，Y，Z 是三维数据的网格，分别表示 x、y 和 z 方向的坐标点。  </span></span><br><span class="line"><span class="comment">#rstride 和 cstride 表示数据之间的步幅，用于控制绘制的密度，rstride 表示行步幅，cstride 表示列步幅。设置为1表示使用所有数据点进行绘制，较小的值会导致更密集的绘制，较大的值会导致更稀疏的绘制。  </span></span><br><span class="line"><span class="comment">#cmap 是用于设置颜色映射的参数，它决定了表面图的颜色样式。在这里使用了 plt.get_cmap(&#x27;rainbow&#x27;)，它表示使用彩虹色的颜色映射，即高值用红色表示，低值用蓝色表示，中间值用绿色表示  </span></span><br><span class="line">plt.contourf(X, Y, Z, zdir=<span class="string">&#x27;z&#x27;</span>, offset=-<span class="number">2</span>, cmap=plt.get_cmap(<span class="string">&#x27;rainbow&#x27;</span>))  </span><br><span class="line"><span class="comment">#zdir 参数指定了绘制的等高线图所在的平面，可以取值为 &#x27;x&#x27;、&#x27;y&#x27; 或 &#x27;z&#x27;，分别表示绘制在 x、y 或 z 轴上。  </span></span><br><span class="line"><span class="comment">#offset 参数用于指定绘制的等高线图所在平面的偏移位置，它是一个数值，用于控制等高线图所在平面的位置。  </span></span><br><span class="line">ax.set_zlim(-<span class="number">2</span>, <span class="number">2</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="多合一显示">13多合一显示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">fig = plt.figure()  </span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 1) #分成两行两列，选第1个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 1])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 2) #分成两行两列，选第2个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 2])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 3) #分成两行两列，选第3个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 3])  </span></span><br><span class="line"><span class="comment"># plt.subplot(2, 2, 4) #分成两行两列，选第4个图  </span></span><br><span class="line"><span class="comment"># plt.plot([0, 1], [0, 4])  </span></span><br><span class="line">  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">#分成两行一列，选第1个图，但占3个位置  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">#分成两行三列，选第4个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">#分成两行三列，选第5个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])  </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>) <span class="comment">#分成两行三列，选第6个图  </span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">4</span>])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="分格显示">14分格显示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec  </span><br><span class="line"><span class="comment">#方法1  </span></span><br><span class="line">plt.figure()  </span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">0</span>), colspan=<span class="number">3</span>, rowspan=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#(3, 3)：表示将图形区域分割为 3 行 3 列的网格。  </span></span><br><span class="line"><span class="comment">#(0, 0)：表示该子图位于第 0 行第 0 列的位置。  </span></span><br><span class="line"><span class="comment">#colspan=3：表示该子图跨越 3 列，即宽度为 3。  </span></span><br><span class="line"><span class="comment">#rowspan=1：表示该子图跨越 1 行，即高度为 1。  </span></span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])  </span><br><span class="line"><span class="comment"># ax1.set_label(&#x27;ax1&#x27;)  </span></span><br><span class="line">ax1.set_title(<span class="string">&#x27;ax1&#x27;</span>)  </span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)  </span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)  </span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))  </span><br><span class="line">ax5 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>))  </span><br><span class="line"><span class="comment">#方法2  </span></span><br><span class="line">plt.figure()  </span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)  </span><br><span class="line">ax6 = plt.subplot(gs[<span class="number">0</span>, :]) <span class="comment">#gs[0, :]：表示将子图放置在 GridSpec 对象 gs 的第 0 行的所有列上  </span></span><br><span class="line">ax7 = plt.subplot(gs[<span class="number">1</span>, :<span class="number">2</span>])  </span><br><span class="line">ax8 = plt.subplot(gs[<span class="number">1</span>:, <span class="number">2</span>])  </span><br><span class="line">ax9 = plt.subplot(gs[-<span class="number">1</span>, <span class="number">0</span>])  </span><br><span class="line">ax10 = plt.subplot(gs[-<span class="number">1</span>, -<span class="number">2</span>])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="图中图">15图中图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec  </span><br><span class="line">fig = plt.figure()  </span><br><span class="line">fig.clf()  </span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  </span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]  </span><br><span class="line">  </span><br><span class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>  </span><br><span class="line">ax1 = fig.add_axes([left, bottom, width, height])  </span><br><span class="line"><span class="comment">#这个方法需要一个由4个元素组成的列表对象，分别对应图形的左、底、宽、高。每个数字必须在0和1之间，表示相对于图形的归一化坐标。  </span></span><br><span class="line"><span class="comment"># 例如，left=0.1表示轴对象的左边缘距离图形的左边缘10%的宽度，width=0.8表示轴对象的宽度占图形的80%的宽度  </span></span><br><span class="line">ax1.plot(x, y, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">ax1.set_title(<span class="string">&#x27;title_1&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span>  </span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])  </span><br><span class="line">ax2.plot(y, x, <span class="string">&#x27;b&#x27;</span>)  </span><br><span class="line">ax2.plot(x, y, <span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">ax2.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">ax2.set_title(<span class="string">&#x27;title_2&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">plt.axes([<span class="number">0.6</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.25</span>])  </span><br><span class="line">plt.plot(y[::-<span class="number">1</span>], x, <span class="string">&#x27;g&#x27;</span>)  </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)  </span><br><span class="line">plt.title(<span class="string">&#x27;title_2&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="次坐标轴">16次坐标轴</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line">  </span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)  </span><br><span class="line">y1 = <span class="number">0.05</span>*x**<span class="number">2</span>  </span><br><span class="line">y2 = -<span class="number">1</span>*y1  </span><br><span class="line"><span class="comment"># 使用plt.subplots()创建一个图形对象fig和一个轴对象ax1,  </span></span><br><span class="line">fig, ax1 = plt.subplots()  </span><br><span class="line"><span class="comment"># 使用ax1.twinx()创建一个与ax1共享x轴的轴对象ax2  </span></span><br><span class="line">ax2 = ax1.twinx()  </span><br><span class="line">ax1.plot(x, y1, <span class="string">&#x27;g-&#x27;</span>)  </span><br><span class="line">ax2.plot(x, y2, <span class="string">&#x27;b--&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;x&#x27;</span>)  </span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;y1&#x27;</span>, c=<span class="string">&#x27;g&#x27;</span>)  </span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;y2&#x27;</span>, c=<span class="string">&#x27;b&#x27;</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="动画">17动画</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation  </span><br><span class="line">  </span><br><span class="line">fig, ax = plt.subplots()  </span><br><span class="line">x = np.arange(<span class="number">0.2</span>*np.pi, <span class="number">0.01</span>)  </span><br><span class="line">line, = ax.plot(x, np.sin(x))  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animations</span>(<span class="params">i</span>):  </span><br><span class="line">line.set_ydata(np.sin(x+i/<span class="number">10</span>))  </span><br><span class="line"><span class="keyword">return</span> line,  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():  </span><br><span class="line">line.set_ydata(np.sin(x))  </span><br><span class="line"><span class="keyword">return</span> line,  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">ani = animation.FuncAnimation(fig=fig, func=animations, frames=<span class="number">100</span>, init_func=init, interval=<span class="number">20</span>, blit=<span class="literal">False</span>)  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy的用法</title>
      <link href="/posts/aa11dae7.html"/>
      <url>/posts/aa11dae7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一数组的创建">一、数组的创建</h1><h2 id="创建数组">创建数组</h2><p><strong>转换为数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 arrs 转换为 NumPy 数组。如果 arr 已经是 NumPy 数组，那么它将保持不变。如果 arr 是列表或其他可迭代对象，它将被转换为 NumPy 数组。</span></span><br><span class="line">np.asarray(arrs)</span><br></pre></td></tr></table></figure></p><p><strong>生成从a到b指定n个数的数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(a, b, n)</span><br></pre></td></tr></table></figure></p><p><strong>创建全为1的数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p><strong>创建指定形状的未初始化的数组，里面内容是随机的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.empty(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>用于沿指定轴重复数组中的元素,重复一行或者一列后，再重复下一行或列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.repeat(a, repeats, axis=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><strong>用于沿指定轴堆叠数组的副本，构成一个新的数组，数组按整体重复</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(A, reps)</span><br></pre></td></tr></table></figure><h2 id="创建随机数组">创建随机数组</h2><p><strong>用于生成随机整数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于生成服从均匀分布的随机数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(low, high, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于生成服从标准正态分布（均值为0，标准差为1）的随机数的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure></p><p><strong>函数用于随机排列或打乱数组的元素顺序，生成一个新的随机排列的数组或列表。它通常用于数据的随机化，洗牌，或创建随机样本。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.permutation()</span><br></pre></td></tr></table></figure></p><p><strong>生成服从0到1之间均匀分布的随机数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.rand()</span><br></pre></td></tr></table></figure></p><h2 id="依概率选择数组">依概率选择数组</h2><p><strong>用于从给定的数组或序列中进行随机抽样的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(a, size=<span class="literal">None</span>, replace=<span class="literal">True</span>, p=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于从指定的序列中随机抽取指定k个数量的唯一元素（不重复抽样）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random.sample(population, k)</span><br></pre></td></tr></table></figure></p><h1 id="二数组的操作运算">二、数组的操作运算</h1><h2 id="数组计算相关">数组计算相关</h2><p><strong>矩阵叉乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cross(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>矩阵点乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>两个形状相同的矩阵对应元素的乘法运算</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>两个形状相同的矩阵对应元素的除法运算</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.divide(arr1, arr2)</span><br></pre></td></tr></table></figure></p><p><strong>用于计算数组中元素的平均值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="literal">None</span>, dtype=<span class="literal">None</span>, out=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于数组中按行或者列求和</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">sum</span>(arr, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><strong>计算方差</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.var(a, axis=<span class="literal">None</span>, dtype=<span class="literal">None</span>, out=<span class="literal">None</span>, ddof=<span class="number">0</span>, keepdims=&lt;no value&gt;)</span><br></pre></td></tr></table></figure></p><p><strong>计算数组中每个元素的平方</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于计算向量或矩阵的范数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.norm(x, <span class="built_in">ord</span>=<span class="literal">None</span>, axis=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于可逆矩阵求逆</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.inv()</span><br></pre></td></tr></table></figure></p><p><strong>用于计算不可求逆矩阵的伪逆矩阵</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.pinv()</span><br></pre></td></tr></table></figure></p><p><strong>用于计算一个数组中的元素的指数幂</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.power(base, exponent)</span><br></pre></td></tr></table></figure></p><p><strong>取整</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">abs</span>(arr)</span><br></pre></td></tr></table></figure></p><p><strong>向下取整</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.floor(arr)</span><br></pre></td></tr></table></figure></p><p><strong>自身相乘的n次方</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.matrix_power(A, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p><strong>求矩阵的秩</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rank_A = np.linalg.matrix_rank(A)</span><br></pre></td></tr></table></figure></p><p><strong>求矩阵累加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cumsum(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>求矩阵累乘</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.cumprod(arr, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><strong>数组之间的欧式距离</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linalg.norm(x - y)</span><br></pre></td></tr></table></figure></p><h2 id="数组随机选择">数组随机选择</h2><p><strong>用来从给定的数组中生成随机样本</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(a, size=<span class="literal">None</span>, replace=<span class="literal">True</span>, p=<span class="literal">None</span>, axis=<span class="number">0</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="排序">排序</h2><p><strong>按轴进行排序</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.sort(axis=-<span class="number">1</span>, kind=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于返回数组中元素排序后的索引的函数</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.argsort(a, axis=-<span class="number">1</span>, kind=<span class="string">&#x27;quicksort&#x27;</span>, order=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>对数组进行随机排列</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.shuffle(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于对数组执行间接排序</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.lexsort(arr)</span><br></pre></td></tr></table></figure></p><h2 id="数组查找相关">数组查找相关</h2><p><strong>用于检查给定数组中是否存在任意一个元素满足指定条件。如果数组中有任意一个元素满足条件，则返回True，否则返回 False</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">any</span>()</span><br></pre></td></tr></table></figure><p><strong>在整个数组中查找最小值的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argmin(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于查找数组中元素的最小值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.<span class="built_in">min</span>(a, axis=<span class="literal">None</span>, keepdims=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>在整个数组中查找最大值的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argmax(a, axis=<span class="literal">None</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>在整个数组中查找最大值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure></p><p><strong>数组中对满足条件的元素进行替换</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.where(condition, x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#当只有condition时返回满足条件的索引</span></span><br><span class="line">np.where(condition)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中唯一的元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.unique()</span><br></pre></td></tr></table></figure></p><p><strong>查找数组的空元素，返回布尔值</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.isnan(x)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中非零元素的个数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.count_nonzero(a, axis=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>查找数组中满足条件的元素的索引</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.argwhere(a)</span><br></pre></td></tr></table></figure></p><p><strong>删除指定元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = np.delete(arr, np.where(arr == value_to_remove))</span><br><span class="line">arr = np.delete(arr, index_to_remove)</span><br></pre></td></tr></table></figure></p><h2 id="两个数组内部元素比较">两个数组内部元素比较</h2><p><strong>若第一个数组中的元素大于第二个数组中对应位置的元素结果是True</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.greater(x1, x2, /, out=<span class="literal">None</span>, *, where=<span class="literal">True</span>, casting=<span class="string">&#x27;same_kind&#x27;</span>, order=<span class="string">&#x27;K&#x27;</span>, dtype=<span class="literal">None</span>, subok=<span class="literal">True</span>[, signature, extobj])</span><br></pre></td></tr></table></figure></p><p><strong>若第一个数组中的元素小于第二个数组中对应位置的元素结果是True</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.less(x1, x2)</span><br></pre></td></tr></table></figure></p><h2 id="数组维度相关操作">数组维度相关操作</h2><p><strong>用于从数组x中移除所有维度为1的维度</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.squeeze(x)</span><br></pre></td></tr></table></figure></p><p><strong>增加一个新的维度</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[:, np.newaxis]与[np.newaxis, :]</span><br></pre></td></tr></table></figure></p><p><strong>.flatten()用于将多维数组展平为一维数组，创建一个副本</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.asarray(results).flatten()</span><br></pre></td></tr></table></figure></p><p><strong>将多维数组中的所有元素按照一维的顺序排列,不是副本</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ravel() </span><br></pre></td></tr></table></figure></p><p><strong>用于连接（合并）数组的函数。它可以沿指定的轴将多个数组连接在一起</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.concatenate((a1, a2, ...), axis=<span class="number">0</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在水平方向堆叠（水平拼接）多个数组或矩阵</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.hstack((array1, array2))</span><br></pre></td></tr></table></figure></p><p><strong>用于垂直堆叠数组的函数</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.vstack((array1, array2))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.row_stack((array1, array2))</span><br></pre></td></tr></table></figure><p><strong>用于按列将输入数组堆叠在一起</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.column_stack((arr1, arr2, arr3))</span><br></pre></td></tr></table></figure></p><p><strong>用于将向量按水平方向翻转</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.fliplr(arr)</span><br></pre></td></tr></table></figure></p><p><strong>用于沿指定的轴重复数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(A, reps)</span><br></pre></td></tr></table></figure></p><h1 id="三-数组的广播">三、 数组的广播</h1><p><strong>用于创建一个与指定数组具有相同形状的新数组，并填充指定的常量值。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full_like(a, fill_value, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;K&#x27;</span>, subok=<span class="literal">True</span>, shape=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在指定轴上重复数组中的元素</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.repeat(array, n, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><strong>用于在指定轴上重复整个数组</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(array, (m, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><h1 id="四数组类型数据的存储与读取">四、数组类型数据的存储与读取</h1><p><strong>数据存储</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 best_individual_ture_fitness_record 包含要保存的数据</span></span><br><span class="line">best_individual_ture_fitness_record = np.array([<span class="number">5012.145430434681</span>, <span class="number">6218.152152733865</span>, <span class="number">3671.3336005601905</span>, <span class="number">1847.8489548514644</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定保存的文件名</span></span><br><span class="line">file_name = <span class="string">&quot;best_individual_ture_fitness.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 np.savetxt 将数据保存到文本文件</span></span><br><span class="line">np.savetxt(file_name, best_individual_ture_fitness_record)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据已保存到 <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p><p><strong>数据读取</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件名</span></span><br><span class="line">file_name = <span class="string">&quot;best_individual_ture_fitness.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 np.loadtxt 读取文件中的数据</span></span><br><span class="line">best_individual_ture_fitness_record = np.loadtxt(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印读取的数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取的数组:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(best_individual_ture_fitness_record)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>numpy类型数据转换为列表</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维NumPy数组</span></span><br><span class="line">array_2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二维数组转换为Python列表</span></span><br><span class="line">list_2d = array_2d.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印转换后的列表</span></span><br><span class="line"><span class="built_in">print</span>(list_2d)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面 這是測試頁面 這是測試頁面</p></div></div></div><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">閃</span></span></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221809274.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221801733.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221808599.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201332927.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221804001.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405221742286.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201339920.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com/open/img/202405201336218.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><p>我覺得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><div class="aspect-ratio" data-align="center"><p><iframe    src="https://player.bilibili.com/player.html?bvid=BV1b44y1q7Cb&page=1"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></p></div>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"小小黑","short_name":"小小黑","theme_color":"#40B2E6","background_color":"#40B2E6","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>闲言碎语</title>
      <link href="/artitalk/index.html"/>
      <url>/artitalk/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈</title>
      <link href="/fcircle/index.html"/>
      <url>/fcircle/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">友情链接</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://butterfly.js.org/link/" title="Butterfly" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221816853.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Butterfly" />              </div>              <div class="flink-item-name">Butterfly</div>               <div class="flink-item-desc" title="Butterfly 主题">Butterfly 主题</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网站框架">快速、简单且强大的网站框架</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://blog.anheyu.com/posts/sdxhu.html" title="安知鱼" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com/blog/img/xxh/QQ%E6%88%AA%E5%9B%BE20240709193243.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼" />              </div>              <div class="flink-item-name">安知鱼</div>               <div class="flink-item-desc" title=""></div>            </a>          </div></div><div class="flink-name">壁纸网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.someacg.top/" title="Someacg" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221819652.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Someacg" />              </div>              <div class="flink-item-name">Someacg</div>               <div class="flink-item-desc" title=""></div>            </a>          </div>          <div class="flink-list-item">            <a href="https://wallhaven.cc/" title="Wallhaven" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221856071.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Wallhaven" />              </div>              <div class="flink-item-name">Wallhaven</div>               <div class="flink-item-desc" title=""></div>            </a>          </div></div><div class="flink-name">动漫网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.bilibili.com/" title="bilibili" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221845718.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="bilibili" />              </div>              <div class="flink-item-name">bilibili</div>               <div class="flink-item-desc" title=""></div>            </a>          </div>          <div class="flink-list-item">            <a href="https://ani.gamer.com.tw/" title="巴哈姆特" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221848336.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="巴哈姆特" />              </div>              <div class="flink-item-name">巴哈姆特</div>               <div class="flink-item-desc" title=""></div>            </a>          </div>          <div class="flink-list-item">            <a href="http://www.mxdm4.com/" title="MX动漫" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/xxh/202405221849085.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="MX动漫" />              </div>              <div class="flink-item-name">MX动漫</div>               <div class="flink-item-desc" title=""></div>            </a>          </div></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>海阔天空solo</title>
      <link href="/music/%E6%B5%B7%E9%98%94%E5%A4%A9%E7%A9%BAsolo.html"/>
      <url>/music/%E6%B5%B7%E9%98%94%E5%A4%A9%E7%A9%BAsolo.html</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/files%E6%B5%B7%E9%98%94%E5%A4%A9%E7%A9%BASolo.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Pixiv</title>
      <link href="/wallpapers/Pixiv.html"/>
      <url>/wallpapers/Pixiv.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170418.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624092.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624090.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624088.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624085.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624083.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624078.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624076.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624073.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624068.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624066.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624064.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624062.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624060.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624060.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624059.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624057.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624055.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624051.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624047.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624046.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624044.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624043.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624041.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624040.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624038.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624037.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624036.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624034.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624031.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624029.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624027.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624025.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624023.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624020.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624019.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624015.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624011.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319704.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319702.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319699.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319697.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319694.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319692.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319691.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319689.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319688.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319686.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319684.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319683.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319681.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319680.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319678.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319677.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319675.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319673.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319671.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319666.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319665.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319663.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319661.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319660.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851319658.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170581.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170579.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170578.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170576.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170574.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170573.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170571.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170570.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170568.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170566.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170565.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170563.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170562.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170560.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170558.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170556.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170542.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170540.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170534.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170518.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170517.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170515.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170513.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170508.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170503.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170497.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170488.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170483.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170479.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170474.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170469.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170465.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170462.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170459.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170455.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170453.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170451.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170352.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170354.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170356.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170357.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170359.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170360.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170362.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170363.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170374.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170376.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170378.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170379.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170381.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170384.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170387.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170393.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170395.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170397.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170398.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170410.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170415.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170420.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170422.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170445.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170447.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170449.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624093.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624095.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624097.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624098.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624100.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624101.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624103.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624105.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624106.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624108.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624109.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624111.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624113.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624114.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624116.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624117.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624119.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624120.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624122.jpg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624127.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624129.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624134.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624138.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624139.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624144.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624151.jpeg","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851624157.jpeg","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #40B2E6;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #40B2E6;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #40B2E6;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  .post-content h1 {    color: #F08080; /* 一级标题颜色 */  }  .post-content h2 {    color: #EB984E; /* 二级标题颜色 */  }  .post-content h3 {    color: #F7DC6F; /* 一级标题颜色 */  }  .post-content h4 {    color: #82E0AA; /* 二级标题颜色 */  }  .post-content h5 {    color: #85C1E9; /* 一级标题颜色 */  }  .post-content h6 {    color: #D2B4DE; /* 二级标题颜色 */  }  .post-content h7 {    color: #CCD1D1; /* 二级标题颜色 */  }  /* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}/*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 100%;  height: 0;  padding-bottom: 75%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 100%;  left: 0;  top: 0;}/* 侧边栏样式 *//* #aside-content .aside-list > .aside-list-item .content > time {  display: none;}#aside-content .aside-list > .aside-list-item .content > .title {  -webkit-line-clamp: 3;  font-weight: 700;  padding: 2px 0;}#aside-content .aside-list > .aside-list-item {  padding: 8px;  padding-top: 6px !important;  padding-bottom: 6px !important;  border-radius: 12px;  transition: 0.3s;  margin: 4px 0;  cursor: pointer;}@media screen and (min-width: 1300px) {  #aside-content .aside-list > .aside-list-item:hover {    transform: scale(1.03);  }  #aside-content .aside-list > .aside-list-item:active {    transform: scale(0.97);  }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {  transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {  border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {  border-radius: 8px;  border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {  background: var(--anzhiyu-blue-main);  color: var(--anzhiyu-white);  transition: 0.3s;  box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {  color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {  padding: 0.4rem 0.6rem !important;} *//* #home_top {  margin: 1rem auto 0;  padding: 0px 15px;  max-width: 1450px;  width: 100%;} */]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>wallpapers</title>
      <link href="/wallpapers/wallpapers.html"/>
      <url>/wallpapers/wallpapers.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-wekzrp_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-kx6yqm_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-85m3ly_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-7p7ry9_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-x6g8jl_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-exl918_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-1pyp7v_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-yxo5qk_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-2yl6px_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-exqx9k_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-7pml7v_1546x1095.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-yx3kvx_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-p955gm_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-exrj5r_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-gpkgp3_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-l8ollr_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-9dpdj1_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-zyj61y_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-gpk6gd_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-l8ox8l_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-d6z96o_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-x6jdpd_2000x2000.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-wevg1r_2560x1813.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-85mo8k_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-7pgm59_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-yxlvvg_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-gpkx1d_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-p9pzk9_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-exqp1k_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-9dwgo1_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-o5m22m_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-l8o22r_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-jxjywy_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-yxr8gl_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-l87gvr_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-jxoeqm_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-851571_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-6dzkd6_2667x1500.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-vqroqm_1800x1200.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-1pmqd3_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-2y59gm_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-p9x93m_2560x1440.png","alt":""},{"url":"https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-kx6jw6_2560x1440.png","alt":""}]</div>      <div class="gallery-items">      </div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon flat"><p><a href="/music/海阔天空solo.html">海阔天空solo</a></p></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>壁纸</title>
      <link href="/wallpapers/index.html"/>
      <url>/wallpapers/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/wallhaven-wekzrp_2560x1440.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/wallpapers/wallpapers.html'></a>  </figcaption>  </figure>  </div><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://uek-1314584698.cos.ap-beijing.myqcloud.com//blog/img/wallpaper/1727851170418.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Pixiv</div>  <p>收藏的一些壁紙</p>  <a href='/wallpapers/Pixiv.html'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var t = new Date("01/01/2024 00:00:00");  now.setTime(now.getTime() + 250);  var e = (now - t) / 1e3 / 60 / 60 / 24,    a = Math.floor(e),    n = (now - t) / 1e3 / 60 / 60 - 24 * a,    r = Math.floor(n);  1 == String(r).length && (r = "0" + r);  var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r,    i = Math.floor(s);  1 == String(i).length && (i = "0" + i);  var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i,    l = Math.round(o);  1 == String(l).length && (l = "0" + l);  let g = "";  (g =    r < 18 && r >= 9      ? `<img class='boardsign' src= 'https://img.shields.io/badge/%E5%B0%8F%E5%B0%8F%E9%BB%91%EF%BC%8C%E6%91%B8%E9%B1%BC%E4%B8%AD-40B2E6' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `<img class='boardsign' src= 'https://img.shields.io/badge/%E5%B0%8F%E5%B0%8F%E9%BB%91%EF%BC%8C%E4%B8%8B%E7%8F%AD%E4%BA%86-40B2E6' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") &&      (document.getElementById("workboard").innerHTML = g);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime/runtime.css"/>
      <url>/css/runtime/runtime.css</url>
      
        <content type="html"><![CDATA[div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0, 0, 0, 0.7);}#workboard {  font-size: 12px;}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28, 69, 218, 0.71);  animation: flashlight 1s linear infinite alternate;}#ghbdages .github-badge img {  height: 20px;}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_4552328='<svg><symbol id="icon-hecha" viewBox="0 0 1024 1024"><path d="M253.360825 1024l-115.279176-58.836014v-53.205773c-64.888522-68.266667-62.917938-94.728797 14.075602-153.424055-23.506254-17.594502-63.762474 2.674364-77.275052-36.315051 47.434777-42.930584 70.378007-101.062818 87.972509-162.010172a326.694708 326.694708 0 0 1 208.037388-226.617182c4.644948-89.380069 86.84646-143.430378 178.478626-112.604811l-35.611272 90.36536c105.144742 7.319313 192.413471 45.041924 256.316701 123.302268 40.537732 15.483162 38.84866-34.766735 69.251959-40.819244l11.964261 58.27299 50.390653-27.306667c28.151203 18.72055-5.207973 31.951615-10.415945 52.220482 14.779381 20.12811 28.995739 40.537732 44.4789 60.243573a142.867354 142.867354 0 0 1 28.995739 114.153128c-12.527285 77.838076-30.262543 154.831615-41.100756 233.091958a1276.938557 1276.938557 0 0 0-5.207972 139.48921h-21.113402l-89.239313-70.378007 9.993677-10.415945-17.735258 36.878076L731.931271 959.956014l-39.411683 23.787766-42.226804-21.113402c-28.151203 14.075601-52.501993 36.03354-86.564949 27.306667l-9.008385-37.863368H332.747216l-26.602886 71.926323z m-9.993677-380.041237l-0.844536 0.985292 126.680412 19.705842 10.838213 10.978969c-29.277251 32.373883-19.846598 74.178419-29.699519 110.493471L384.404674 816.38488l-35.189004 94.869553a412.274364 412.274364 0 0 0 233.514227 2.11134l9.712165-26.602886 12.808797 15.905429-11.823505 50.672165 5.348728 4.644949c16.749966-11.682749 33.218419-24.210034 50.812921-34.62598a84.453608 84.453608 0 0 1 26.039863-5.348728l7.460069 33.922199L731.931271 928.145155l52.924262 14.075601c-1.829828-43.212096-2.955876-80.934708-5.911753-118.516564 0-4.92646-9.852921-9.289897-15.060893-14.075601l-5.630241-23.224742 14.075601-100.922062h18.72055l3.237389-1.266804c-11.964261 106.411546 8.023093 202.266392 87.127972 281.512027 8.726873-48.842337 16.60921-93.321237 24.632302-137.659381 7.460069-40.96 15.060893-81.92 22.520963-122.88 10.556701-48.420069 25.476838-97.262405-10.978969-140.756014L886.762887 602.435739c0-16.468454 1.126048-33.077663 1.126048-49.546117 0-70.378007-53.205773-104.722474-115.982956-76.289759a232.951203 232.951203 0 0 1-32.936907 9.430652c16.046186-32.373883-3.5189-52.924261-25.476838-70.378006a292.209485 292.209485 0 0 0-209.304193-70.378007c-11.401237 0.70378-22.802474 0-40.25622 0l45.182681-104.581718c-40.396976 10.978969-74.037663 14.779381-94.728798 45.464192s14.920137 45.88646 20.831891 69.674227C325.005636 360.194639 232.528935 436.343643 198.606735 548.948454l-70.378006 172.707628 49.123848 3.518901 5.630241 54.191065c32.514639-26.039863 26.039863-61.08811 30.262543-92.898969h17.876014v58.413746l30.966323 6.33402c1.40756-6.615533 2.392852-11.682749 3.659656-16.468453 9.149141-34.625979-19.705842-59.117526-22.380206-91.491409zM205.50378 822.859656l-6.474777 20.83189-25.336082 84.453609c1.548316 8.867629 0 23.224742 5.067216 25.476838 32.373883 16.046186 65.733058 29.277251 104.159451 45.745705 21.113402-65.451546 63.621718-114.434639 69.53347-180.871478C315.152715 802.309278 281.512027 786.966873 247.730584 774.158076c-17.031478-6.756289-36.315052-10.978969-35.048247 19.002061z m121.753952-38.848659l10.556701-90.224605-48.138557-6.193265v78.964124z m-168.907217 96.980893l23.083987-73.474639c-28.151203-10.415945-47.575533-9.289897-56.302406 15.483161s2.674364 42.789828 32.936907 57.991478z" fill="#353947" ></path><path d="M198.606735 548.948454c33.922199-112.604811 126.680412-188.472302 235.907079-192.272715-5.911753-23.787766-41.100756-39.55244-20.83189-69.674227s54.331821-34.485223 94.728798-45.464192l-45.182681 104.581718h40.25622a292.209485 292.209485 0 0 1 209.304193 70.378007c21.957938 17.735258 42.226804 38.285636 25.476838 70.378007l0.985292-0.985293c-30.966323 26.743643-32.796151 59.399038-19.846598 95.151066l25.195327 40.96-40.819244-6.193265-103.174158-14.075601-62.214158-93.039725-31.670104 50.672165c-19.42433-5.630241-26.602887 0.844536-20.691134 20.691134L464.494845 579.210997a165.669828 165.669828 0 0 0-100.077525-17.172234l-10.415945-86.564949L316.560275 506.721649l-44.338144 42.226805z m255.190653-62.917939l-10.556701-10.556701c-17.172234-17.031478-35.048247-15.060893-47.29402 3.378145s-4.785704 36.73732 12.105017 50.249897c20.12811 16.046186 34.907491 9.712165 45.745704-11.541993 14.216357-10.838213 15.201649-21.394914 0-31.81086z" fill="#F5F5F6" ></path><path d="M592.442062 886.762887l-9.712165 26.602886a412.274364 412.274364 0 0 1-233.514227-2.11134l35.189004-94.869553-34.062956-30.544055c9.852921-36.315052 0-78.119588 29.699519-110.493471a198.184467 198.184467 0 0 0 105.426254-94.869553c16.327698 2.392852 26.039863-1.689072 20.691134-20.691134l31.670104-4.926461L600.887423 633.402062c0 7.882337-1.970584 18.01677 1.970584 23.083986 30.966323 38.707904 23.787766 80.934708 14.075601 123.865292-8.586117 36.03354-16.468454 71.363299-24.491546 106.411547zM442.818419 663.523849c0 14.075601-2.81512 23.64701 0 26.884398 20.268866 20.691134 20.83189 45.604948 19.565086 71.926323a96.840137 96.840137 0 0 0 3.237388 31.107079c5.911753 20.409622 12.668041 41.382268 38.426392 44.056633A48.560825 48.560825 0 0 0 557.393814 802.309278a696.601512 696.601512 0 0 0 18.579794-80.371683c6.052509-6.474777 35.470515-2.533608 18.157526-36.596564z" fill="#F5F5F6" ></path><path d="M600.605911 602.013471l103.174158 14.075601 40.819244 5.348729c37.863368 9.993677 22.94323 41.241512 26.46213 65.170034l-14.075601 100.922062-49.827629 78.119588-21.394914 31.529347-10.134433 21.394914a84.453608 84.453608 0 0 0-26.039863 5.348728c-17.594502 10.415945-34.062955 22.94323-50.812921 34.62598v-5.207973h-5.067216l11.823505-50.672165c16.046186-61.932646 32.936907-123.724536 47.716289-185.938694 5.348729-22.661718-25.476838-68.266667-51.938969-82.62378zM927.300619 706.735945c-7.460069 40.96-15.060893 81.92-22.520963 122.88-8.023093 44.338144-15.90543 88.817045-24.632302 137.659381-79.10488-79.386392-98.52921-175.241237-87.127973-281.512027z" fill="#B3DCF8" ></path><path d="M199.029003 843.691546l6.474777-20.83189h45.604949c2.11134-39.270928-20.972646-30.262543-38.426392-30.121787-1.548316-29.981031 18.01677-25.758351 35.048247-18.579793 34.062955 13.231065 67.422131 28.151203 104.722474 44.4789-5.911753 66.436838-48.420069 115.419931-69.53347 180.871478-38.426392-16.186942-71.926323-29.418007-104.159451-45.182681-4.785704-2.252096-3.5189-16.60921-5.067216-25.476838h33.499931l26.321375-70.378007z" fill="#87BC85" ></path><path d="M738.265292 486.030515a232.951203 232.951203 0 0 0 32.936907-9.430652c62.777182-28.151203 116.405223 6.615533 115.982956 76.289759 0 16.468454-0.70378 33.077663-1.126048 49.546117l1.126048-0.985292-12.105018-2.674365-21.53567 16.749966-29.981031 8.304605A86.564948 86.564948 0 0 1 731.931271 564.572371c2.392852-26.462131 4.644948-52.924261 7.037801-79.527148z m113.730859 61.79189l-61.369622-52.501993c-3.941168 35.752027-6.615533 59.821306-10.275189 93.180481z" fill="#F5F5F6" ></path><path d="M198.606735 548.948454h73.615396c-28.151203 42.226804-74.178419 76.852784-59.117526 137.659381-4.22268 31.810859 2.252096 66.859107-30.262543 92.898969l-6.052509-54.472577-49.123849-3.518901z" fill="#AED4EF" ></path><path d="M927.300619 706.735945l-134.281238-21.113402-3.237388 1.266804 6.897045-37.863368 27.025154-7.74158 31.247835-8.867629 29.840275-20.691134 2.392853-10.275189-0.422268 0.985292 30.262543-36.73732c35.752027 43.77512 20.83189 92.617457 10.275189 141.037526zM369.625292 663.946117l-126.680412-19.705842a171.300069 171.300069 0 0 1 16.749965-41.100756c21.817182-29.277251 46.167973-56.302405 69.533471-84.453608 3.237388 9.149141 6.756289 18.157526 9.571409 27.306666q15.623918 49.123849 30.966323 98.52921z" fill="#F5F5F6" ></path><path d="M763.179107 810.473127c5.207973 4.644948 14.075601 9.008385 15.060893 14.075602 2.955876 37.581856 4.081924 75.304467 5.911753 118.516563l-52.924262-14.075601-47.9978 23.787766-7.600825-34.766735c14.075601-1.970584 20.550378-7.882337 10.978969-21.817182 21.394914 11.682749 23.787766-9.993677 33.359175-19.002062z" fill="#AED4EF" ></path><path d="M601.168935 634.105842c26.462131 14.075601 57.287698 59.962062 51.938969 82.62378-14.075601 62.214158-31.670103 124.006048-47.716289 185.938694L592.442062 886.762887c8.023093-35.329759 15.90543-70.378007 24.35079-105.989279 10.134433-42.930584 17.31299-85.157388-14.075601-123.865292-3.5189-4.785704-0.985292-14.920137-1.548316-22.802474zM328.806048 518.404399c-23.365498 28.151203-47.716289 55.457869-69.533471 84.453608a171.300069 171.300069 0 0 0-16.749965 41.100756l0.844536-0.985292-12.386529 43.07134h-17.876014C198.043711 625.660481 243.507904 591.175258 272.222131 548.948454l44.338144-42.226805z" fill="#484F5E" ></path><path d="M327.257732 784.010997l-37.581856-17.453746v-78.964124l48.138557 6.193265z" fill="#D55375" ></path><path d="M823.704192 641.284399l-27.025154 7.74158-6.897045 37.863368h-18.72055c-3.5189-23.928522 11.401237-55.176357-26.46213-65.170034l-25.195327-40.96 12.527285-16.186942a86.564948 86.564948 0 0 0 91.350653 59.258282zM369.625292 663.946117v-19.846598l12.245773-12.949553c8.445361 1.266804 20.409622 6.897045 24.773059 3.237388 20.550378-17.031478 38.989416-36.455808 58.132233-55.176357l20.972646 1.548316A198.184467 198.184467 0 0 1 380.041237 675.628866z" fill="#484F5E" ></path><path d="M199.029003 843.691546l34.485224 14.075602-26.321375 70.378007h-33.499931z" fill="#CAE7AF" ></path><path d="M230.980619 686.326323l12.386529-43.07134c2.674364 31.670103 31.529347 56.302405 22.23945 91.350653-1.266804 4.785704-2.252096 9.852921-3.659656 16.468453l-30.966323-6.33402z" fill="#F5F5F6" ></path><path d="M763.179107 810.473127l-44.056633 67.703643-11.964261-12.527285 50.390653-78.4011z" fill="#484F5E" ></path><path d="M212.682337 792.737869c17.453746 0 40.537732-9.149141 38.426392 30.121787H205.50378z" fill="#CDEAB1" ></path><path d="M598.916838 957.98543l-5.348728-4.644949h5.067216z" fill="#484F5E" ></path><path d="M464.494845 579.210997c-19.142818 18.72055-37.581856 38.14488-58.132233 55.176357-4.363436 3.659656-16.327698-1.970584-24.773059-3.237388l-17.172233-69.111203A165.669828 165.669828 0 0 1 464.494845 579.210997z" fill="#AED4EF" ></path><path d="M364.41732 562.038763l17.172233 69.111203-12.245773 12.949553q-15.342405-49.123849-30.966323-98.52921c-2.81512-9.149141-6.334021-18.157526-9.571409-27.306666l-12.245773-11.541994 37.4411-30.966323z" fill="#353947" ></path><path d="M600.605911 602.013471v31.670103l-62.214158-79.245636-31.670104 4.926461 31.388592-50.390653z" fill="#484F5E" ></path><path d="M453.797388 517.278351c-10.838213 21.254158-25.617595 28.151203-45.745704 11.541993-16.890722-14.075601-24.632302-31.529347-12.105017-50.249897s30.121787-20.409622 47.29402-3.378145c-23.506254 0.985292-34.766735 11.541993-29.136495 39.411684l39.693196 3.096633z" fill="#AED4EF" ></path><path d="M731.931271 564.572371l-12.808797 15.623918c-12.949553-35.752027-11.119725-68.407423 19.846598-95.151066-2.11134 26.602887-4.363436 53.065017-7.037801 79.527148z" fill="#353947" ></path><path d="M506.721649 559.786667c5.348729 19.002062-4.363436 23.083986-20.691134 20.691134-6.193265-19.846598 0.985292-26.321375 20.691134-20.691134z" fill="#484F5E" ></path><path d="M453.797388 485.749003c15.201649 10.415945 14.075601 20.972646 0 31.529348v-31.81086zM443.240687 475.192302l10.556701 10.556701-10.556701-10.556701z" fill="#AED4EF" ></path><path d="M442.818419 663.523849l151.312715 22.098694c17.31299 34.062955-12.105017 30.121787-18.157526 36.596564A696.601512 696.601512 0 0 1 557.393814 802.309278a48.560825 48.560825 0 0 1-52.783505 34.907492c-25.758351-2.674364-32.514639-23.64701-38.426391-44.056633a96.840137 96.840137 0 0 1-3.237389-31.107079c1.266804-26.321375 0-51.235189-19.565086-71.926323-3.378144-2.955876-0.563024-12.386529-0.563024-26.602886z m66.296083 153.987079c41.523024-26.462131 42.226804-60.38433 34.766735-98.52921l-55.317113-10.275189c-0.422268 38.707904-15.201649 75.163711 20.550378 108.804399zM707.158213 865.649485l11.964261 12.527285c-9.571409 9.008385-11.964261 30.684811-33.359175 19.002062z" fill="#353947" ></path><path d="M686.185567 896.756564c9.571409 14.075601 2.955876 19.846598-10.978969 21.817182zM851.996151 547.822405l-71.644811 40.678488c3.659656-33.359175 6.334021-57.428454 10.275189-93.180481z" fill="#353947" ></path><path d="M884.792302 611.725636l-29.840275 20.691134-1.40756-16.890722 21.53567-16.749966z" fill="#484F5E" ></path><path d="M853.544467 615.526048l1.40756 16.890722-31.247835 8.867629v-17.453746zM884.792302 611.725636l-9.712165-12.949554 12.105018 2.674365z" fill="#353947" ></path><path d="M443.522199 474.91079l10.556701 10.556701v31.951616l-39.693196-3.096633c-6.193265-27.869691 5.630241-38.426392 29.136495-39.411684z" fill="#F5F5F6" ></path><path d="M509.114502 817.510928c-35.752027-33.640687-20.972646-70.378007-20.550378-108.804399l55.317113 10.275189c7.882337 38.14488 6.756289 72.067079-34.766735 98.52921z" fill="#E25679" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M265.216 758.784c22.528 22.528 34.816 51.2 34.816 83.968 0 32.768-13.312 62.464-34.816 83.968-22.528 22.528-53.248 34.816-83.968 34.816-32.768 0-62.464-13.312-83.968-34.816C73.728 905.216 61.44 874.496 61.44 843.776c0-32.768 13.312-62.464 34.816-83.968 22.528-22.528 51.2-34.816 83.968-34.816 33.792-1.024 62.464 12.288 84.992 33.792zM61.44 367.616v172.032c111.616 0 218.112 44.032 296.96 122.88S481.28 848.896 481.28 962.56h172.032c0-163.84-66.56-312.32-174.08-419.84C373.76 436.224 225.28 369.664 61.44 367.616zM61.44 61.44v172.032c402.432 0 729.088 326.656 729.088 729.088H962.56c0-247.808-101.376-473.088-264.192-636.928C536.576 163.84 311.296 63.488 61.44 61.44z" fill="#EBA33A" ></path></symbol><symbol id="icon-qq" viewBox="0 0 1024 1024"><path d="M212.338083 447.033359l-1.609661-4.959965-1.289366-6.503111-0.899486-3.561105v-14.635325l1.546216-5.731538 1.60966-6.121418 2.060939-6.360871 2.802836-7.116072 3.703345-7.390317 5.216815-7.40669v-5.201466l0.514723-4.847401 0.771573-6.618745 2.255367-7.373944 2.061962-8.019651 1.641383-3.703345 1.900279-3.430122 2.446726-3.814886 2.641153-2.820232v-18.322297l1.547239-9.434883 1.546216-10.951423 2.767019-13.105483 3.802606-13.623275 2.832512-7.521301 2.802836-8.145517 3.056615-7.634888 3.674693-8.145517 3.736091-8.92016 4.313235-8.389064 4.831029-8.921184 6.117324-8.92323 2.802836-5.088902 3.027963-4.200672 6.535857-9.41851 6.701632-9.42158 7.66354-9.67536 8.178263-9.438976 8.890485-9.273201 9.274224-9.56689 11.208272-10.304693 7.149841-6.246261 8.66331-6.747681 8.792247-5.975085 9.530051-5.731538 9.147334-5.087879 10.305716-4.202718 10.948353-5.233188 10.886955-3.559059 10.884908-3.686972 11.720949-3.687996 11.722996-2.801812 12.366655-2.302439 12.495592-2.029216 12.300141-1.657756 12.366655-1.675153 13.141299-0.73985h38.83754l12.94687 1.641383 13.010315 1.546216 13.270235 1.400906 12.30014 2.930749 13.009292 2.785439 12.209066 3.17225 13.362332 3.575431 12.237719 4.330632 11.724019 4.959965 12.495592 5.233188 11.432377 5.732562 11.07729 6.343475 10.853185 7.020904 9.405208 6.489807 4.313235 3.686973 4.574179 2.673899 8.696056 7.390317 7.340175 7.133468 7.278777 7.390317 7.149841 8.148587 5.863544 7.888668 6.954389 8.148587 4.897544 8.774851 4.926196 7.779173 5.246491 9.049097 4.317328 7.888668 7.344269 16.682961 3.604084 8.646937 2.802836 8.020674 2.803859 8.662287 2.509147 8.145517 1.804089 7.004531 2.255367 8.277524 3.993964 14.767332 2.541892 12.865005 1.64343 12.478196 1.417279 10.048867 2.255367 15.281031 0.514723 2.430353 1.804089 2.803859 4.827958 7.887644 3.093455 5.332448 2.77009 5.619998 3.541663 5.972015 3.093454 7.148817 1.994424 7.378038 2.189875 8.01658 1.675153 8.261151 0.771572 4.071736 0.64673 4.976338v4.333702l-0.64673 4.329608v5.362125l-1.286295 5.200442-2.317789 10.065239-2.641153 5.088902-1.933026 5.731538v1.400906l0.90051 1.787716 2.641153 4.200672 11.466146 16.940834 9.078773 12.722766 4.317328 8.534374 5.859452 9.290597 5.088902 10.193153 5.863544 10.93198 5.860475 12.237719 6.601348 13.880125 3.703345 8.518001 3.41375 8.277524 2.964518 8.792247 2.898003 7.887644 2.189875 8.277524 2.252297 7.779173 2.836605 15.150049 2.252297 15.522531 1.546215 13.752212v19.353791l-1.031492 6.89299-1.480724 11.83556-2.060939 10.69048-3.1569 9.66308-1.157359 3.943822-2.189875 4.719488-1.869581 3.317559-2.446725 4.072759-2.189875 2.562358-2.77009 3.301186-2.446725 2.670829-2.641153 2.285043-3.155877 1.40193-2.833535 1.400906-2.317788 0.759293h-3.545756l-2.285043-0.759293-4.345981-2.156106-1.998517-1.40193-2.060939-1.529843-2.286066-2.044566-2.288113-2.285042-3.799536-4.204765-4.507663-5.973039-3.541663-6.136767-3.544733-4.943592-3.443425-5.731538-4.863774-10.193153-5.474689-10.57894-0.646729-0.369413h-0.899486l-2.25639 1.658779-1.285273 2.786463-2.127454 3.443425-3.736091 10.321067-5.603624 14.639418-7.211239 17.567097-5.412267 8.791224-5.698792 9.16166-6.730285 10.305717-7.14984 10.08059-3.673669 4.574178-4.442173 4.959965-10.209525 10.061147 0.900509 0.887206 1.384533 1.418303 5.088902 3.040242 21.25714 10.193154 9.2732 5.217838 8.824993 5.087878 8.758478 6.378268 7.792477 6.618744 3.802605 2.927679 2.832512 3.430123 2.899026 3.963265 2.446725 4.330631 1.289366 3.558036 1.609661 4.333702 0.642636 3.686972 0.775666 4.329609-0.775666 2.915399v2.931772l-0.642636 3.056616-1.609661 2.802836-0.642636 2.173502-1.418302 2.657526-3.865028 5.234211-3.541663 4.200672-2.77009 3.173273-2.317788 2.301415-5.863545 4.316306-6.632047 3.720741-7.086395 3.558036-7.535627 3.429099-8.501628 3.301186-4.508687 1.418302-4.058433 1.124614-9.787924 2.304485-10.177803 2.15713-10.175757 2.173502-11.080359 1.787716-11.4641 0.500397-11.722995 1.398859h-36.390815l-13.138229-0.7552-12.237719-1.144056-13.141298-1.787716-13.075806-1.401929-13.780865-1.91563-13.33368-3.317558-13.012361-2.542916-12.9438-3.686972-13.270235-4.718465-13.010315-3.944846-6.825453-2.271739-6.121417-2.189876-3.865028-1.51347-3.798512-0.7552H537.799596l-12.494569-0.903579-6.345522-0.642636-8.148587-0.90051-5.216815 4.715395-7.14984 4.461615-9.662057 4.719488-10.691503 5.860475-6.503111 3.188622-6.764054 2.52552-15.007809 6.121418-8.148587 2.044565-8.534374 2.285043-11.848862 2.289136-7.406691 0.626263-7.858991 0.642637-8.181333 0.903579-9.531074 0.385787H349.370039l-21.995967-0.385787-21.320584-2.172479-10.819417-1.514493-10.434653-1.546216-10.17678-1.51347-10.17678-2.044565-9.434883-3.060709-9.437954-2.15713-8.501627-3.429099-8.05035-3.188622-7.472182-3.575432-6.503111-3.943822-6.506181-4.719488-2.189875-2.285043-2.899027-2.786463-2.189875-2.446725-1.998517-2.786462-1.799995-2.803859-1.418303-2.799766-2.028193-5.975085-0.741897-3.060709-0.899486-3.442402v-3.172249l0.899486-3.559059v-3.590782l0.741897-3.558035v-7.136538l0.353041-3.815909 1.675152-4.329608 1.418303-4.333702 2.575661-5.216815 1.866511-2.028193 1.546215-2.301415 4.056386-4.959965 3.221368-2.545986 3.027963-1.787716 2.802836-2.285043 4.474918-1.400906 3.541663-2.15713 4.445242-2.301415 5.088901-1.514493 5.088902-1.546216 5.859451-1.272993 5.602602-0.7552 6.635117-0.887206 7.149841-0.514723 1.899256-0.642637h0.385786l0.90358-0.774643v-0.867763l-1.289366-1.787716-3.831258-1.786693-9.531074-8.277524-6.377245-5.088901-7.40669-6.489808-7.473205-7.245008-7.792477-9.305947-8.887414-10.434653-3.350305-5.622044-4.445242-5.844102-3.799536-6.763031-3.412726-7.373944-4.6366-7.004531-3.02694-8.020674-3.575432-8.016581-3.575432-8.92323-2.641153-8.519024-2.446725-10.578939-0.774643-0.385787h-0.738827l-0.385786-0.7552h-0.90358l-1.51347 0.7552-0.772596 0.385787-1.031492 1.787716-0.385787 2.160199-0.771573 1.915629-1.35588 3.172249-4.379751 7.776104-2.251274 4.719488-3.575431 4.072759-3.832282 4.943592-4.188392 5.490038-4.445243 4.848425-5.216815 4.702092-4.860704 4.442172-5.313006 3.462868-5.863544 3.686972-5.602602 2.1602-6.634094 1.658779-6.504134 0.626263H107.288538l-1.480724-0.626263-1.161452-2.562359-1.932002-1.25662-2.512217-6.117324-1.544169-3.317559-1.675152-4.719488-1.385557-4.943592-0.741897-4.844332-2.060939-11.080359-0.771572-6.503111v-21.386076l0.771572-15.908319 1.289366-8.148587 1.51347-8.405437 1.385557-9.032724 2.446725-8.40646 2.77009-9.691733 2.832511-9.405207 3.802606-9.691733 3.574409-9.293667 4.927219-9.418511 4.6366-10.17678 5.602602-9.546423 6.602371-10.32209 6.731309-9.293667 7.020903-10.304693 5.860475-7.133468 7.504928-8.277524 7.888667-8.27343 3.673669-3.947915 4.474918-4.458546 6.473435-5.618974 6.635118-5.718235 10.819416-9.676383 8.178263-5.975085z" fill="#75B9EB" ></path><path d="M388.66602 937.042509l-63.125712-0.47993-53.56394-6.848989-13.08911-2.730181-8.671496-2.812045-11.378142-2.830465-26.612101-11.495822-7.734148-4.76349-14.46034-12.362562-5.402033-6.755868-5.636371-10.3006-4.617158-15.943111 2.2963-31.304983 8.366551-20.008706 11.296277-13.118786 11.542894-8.64796 8.413624-3.39226 7.605211-3.579525 3.77293-1.119497-9.749038-9.520841-18.327414-22.076808-2.835581-4.746094-5.202489-7.130398-12.995989-23.606651-4.675486-11.689226-13.007245 15.544021-12.291954 10.844999-14.542204 8.876158-7.699356 2.818185-9.280364 2.115174-11.893888 0.709151-6.386454-2.056845-6.468319-2.747577-1.874696-4.148484-2.226715-1.441838-8.179286-20.178575-2.226715-8.255011-3.785209-25.14161v-21.386076l0.995677-18.719341 4.687765-27.783786 8.566097-29.078269 8.190542-20.729114 15.584954-29.922496 6.972808-10.915608 20.858051-28.452005 25.662472-27.133987 26.365485-22.873964-1.371231-7.710612v-17.020652l6.105045-21.379936 3.832282-9.632382 7.113001-13.839193 1.968841-14.817473 7.441483-22.598694 4.722558-7.886621 0.234337-14.653745 3.245927-21.192671 2.765997-13.10139 4.570086-16.259312 8.823969-23.641443 12.444427-27.010167 5.976108-10.844999 25.358551-37.322024 16.909111-20.466124 18.843161-19.574824 19.440771-17.577331 9.445116-7.39441 9.726525-6.661724 22.007224-12.596899 10.311856-4.206812 12.151761-5.677302 34.896788-11.33107 11.730159-2.800789 26.154683-4.587482 26.530237-3.538593 13.147438-0.743943 40.990576-0.029676 42.267663 5.085832 52.708455 13.001105 12.233626 4.329609 26.295899 11.073196 11.425214 5.730515 11.952217 6.814196 31.861661 21.778002 8.695033 7.394411 15.795755 15.608489 8.76564 10.042727 5.496178 7.394411 8.589632 10.599405 20.143783 35.014469 11.085476 25.668612 8.706289 26.442232 8.507768 31.855522 2.542916 12.867052 5.214768 36.947494 15.515369 27.250644 3.937682 9.579169 6.949272 29.084409 0.960885 13.997806-0.644683 4.329608-0.527003 8.366552-5.964852 20.893866 20.471241 29.79356 3.925402 7.77508 6.281054 10.135848 27.525913 56.616462 3.550873 8.583492 11.354605 36.296671 2.835582 15.152095 4.101411 32.58207-0.199545 22.012339-5.26184 32.347732-5.097088 15.60235-9.151428 16.229636-13.979386 14.471597-15.198143 6.204305h-9.292644l-7.382131-2.63092-12.42089-7.804757-5.296633-5.015223-5.436826-6.081509-5.730515-7.827269-4.933359-7.910157-0.081865 0.245594-8.706289 20.565384-18.093077 28.662807-11.495821 15.620769 7.358595 3.527336 20.905122 11.981893 9.831926 7.218402 13.8044 11.799743 7.523348 9.995655 3.703345 7.06593 3.726881 10.967795 2.109034 11.82942-2.812045 14.624069-6.222725 11.82328-16.323781 18.73162-7.721869 5.513574-14.436803 7.66968-17.624403 7.423063-10.264785 3.110851-31.182186 6.88992-14.049994 2.168386-10.792811 0.468674-13.183253 1.446955H700.17066l-27.045983-1.974981-42.689264-5.560646-13.323447-3.321652-13.593599-2.701528-12.936637-3.684926-43.732014-14.700816-10.347672-0.047072-19.628037-1.622964-1.74576 1.207501-8.788154 5.367241-28.439725 14.44806-23.705912 9.251712-17.635659 4.540409-13.757328 2.554173-34.135449 2.631943z m-60.231802-36.367279l59.505255 0.369414 30.877241-2.41398 25.382087-5.917779 25.967418-10.851139 24.53786-13.299911 10.053983-9.069563 54.208623 5.220908 15.948227 5.659907 12.549827 3.796466 14.07353 4.980431 11.085476 3.123131 12.291954 2.401699 13.288654 3.28686 50.505278 6.02318 12.491499 0.709151 34.299177-0.029675 11.999288-1.382487 10.429537-0.451278 29.518291-5.788843 16.674774-4.411473 14.002922-5.941316 11.378142-6.040577 4.827958-3.790326 8.120958-10.241248 1.511424-3.673669-0.081865-6.216586-3.058662-7.166213-3.093455-4.090155-17.659195-13.886265-17.108656-9.737782-28.721135-14.647605-16.616446-16.668634 29.810956-30.754445 12.867052-18.972097 10.089799-16.306384 21.666462-52.315506 10.722203-7.904017h10.709922l9.655918 5.015224 3.082198 5.079692 12.854772 24.883736 17.588587 22.469758 1.65264-1.792833 6.550183-9.339715 2.109034-5.52483 2.964518-9.086959 1.851161-9.597589 2.179642-21.051455v-12.614296l-3.609201-27.695782-2.554172-13.563924-9.819646-31.15251-6.585999-15.374153-22.604834-45.578058-6.222725-10.013051-3.691065-7.312546-24.713868-36.876886-1.933026-3.826141v-8.641821l5.554506-14.137999 2.624781-11.184736 0.152472-14.507412-5.812379-24.069186-2.13257-4.915962-16.885576-28.843932-1.207501-5.666047-7.78122-50.27708-15.62077-53.054333-10.124591-23.325242-18.057261-31.100322-6.573719-7.76894-5.423523-7.302313-13.241582-14.232143-13.628392-12.397354-5.847172-3.744278-3.609201-3.082198-19.041682-12.684904-10.253528-5.835915-9.984398-4.974291-23.740704-9.995655-10.522658-3.691066-24.795732-6.545066-23.811312-5.354962-37.334303-4.37054H517.449106l-11.401678 0.673335-36.021402 5.197372-22.158672 4.692883-31.603789 10.324136-9.890254 4.728698-10.241249 4.212951-17.237592 9.995655-7.933693 5.43171-14.084787 11.66569-10.885931 10.006912-17.342994 18.039865-14.729469 17.835203-23.905456 35.277458-8.202823 15.515369-15.315824 38.359656-3.574408 12.860912-2.366907 11.360746-2.835582 18.761295v23.987321l-8.823969 10.874675-0.750084 1.693572-3.679809 13.142321-0.98442 12.989849v5.700839l-7.721869 10.967796-2.74246 5.466502-4.195556 11.689226-2.285043 8.688893 0.352018 11.378142 2.566452 10.317996 3.99601 12.263302-20.85805 15.473413-30.221302 27.66099-20.002566 22.211884-19.628036 28.843932-4.76963 8.144494-15.913435 36.167734-7.452739 25.511024-3.878331 23.536042-0.726547 14.935154 0.023536 19.445888 0.644683 5.442965 5.305842 22.25691 3.503801-1.277086 8.214079-5.255701 11.764951-11.28502 11.988032-16.49365 4.851495-9.363251 0.550539-3.082199 5.331425-9.262967 10.898211-5.408174H188.343599l2.648316 4.394077 3.972475 1.927909 2.718925 8.770758 4.523013 17.114796 9.3039 22.715351 4.862751 7.721868 5.952572 11.782348 7.405667 10.857279 15.186888 17.987676 13.546527 12.474103 15.479553 12.362562 4.253884 1.980097 7.441482 10.317997v14.161534l-11.401677 10.517541-30.490432 4.282537-10.335392 3.626597-13.218047 7.388271-6.02318 8.419763-2.156106 6.480598-1.324158 19.077498 2.413979 7.441482 3.292999 4.470825 3.996011 3.955079 9.737782 6.450922 20.846794 8.817829 9.585309 2.261507 8.43716 2.736321 28.873607 4.739954 10.675131 1.500167 19.884886 2.015913z" fill="#885F44" ></path></symbol><symbol id="icon-WIFI" viewBox="0 0 1024 1024"><path d="M513.005 247.237c-139.011 0-270.887 52.137-372.473 146.582l-17.824 16.488 17.382 16.929 56.136 55.696 16.041 16.04 16.93-15.153c77.524-71.28 178.207-110.494 283.36-110.494 105.144 0 206.276 39.214 283.36 110.494l16.929 15.153 16.032-16.04 56.144-55.696 17.376-16.929-17.831-16.488c-100.675-94.445-233.009-146.582-371.562-146.582z m0 0" fill="#8AC78A" ></path><path d="M812.838 520.706a21.7 21.7 0 0 1-14.497-5.537l-16.92-15.152c-73.281-67.766-168.674-104.958-268.864-104.958-99.781 0-195.182 37.206-268.649 104.764l-17.145 15.347c-8.602 7.7-21.718 7.335-29.865-0.827l-16.04-16.041-73.31-72.421a21.752 21.752 0 0 1-6.573-15.855 21.781 21.781 0 0 1 6.976-15.676l17.832-16.486c105.644-98.237 243.178-152.357 387.223-152.357 144.396 0 281.629 54.149 386.432 152.462l17.719 16.382c4.379 4.045 6.9 9.715 6.976 15.676s-2.298 11.691-6.565 15.855l-17.377 16.92-71.975 71.542a21.722 21.722 0 0 1-15.378 6.362zM154.281 410.719l0.972 0.948 57.843 57.395 1.604-1.432c81.293-74.757 187.154-116.038 297.857-116.038 111.165 0 217.034 41.296 298.118 116.277l1.335 1.192 1.493-1.499 57.328-56.844-1.022-0.94c-96.825-90.834-223.503-140.8-356.804-140.8-133.02 0-260.039 49.987-357.672 140.763l-1.052 0.978z" fill="#363634" ></path><path d="M758.942 526.592c-67.73-61.036-154.611-94.9-245.498-94.9h-15.592v0.447c-85.539 3.566-167.078 36.528-230.786 94.453l-18.272 16.481 17.385 17.384 57.022 56.583 16.042 15.585 16.928-14.698c44.108-38.766 99.803-60.149 157.273-60.149 57.479 0 113.613 21.384 157.722 60.149l16.929 14.698 16.039-15.585 57.031-56.583 17.368-17.384-19.591-16.481z m0 0" fill="#8AC78A" ></path><path d="M339.25 654.358a21.693 21.693 0 0 1-15.16-6.147l-16.033-15.593-74.624-74.176a21.712 21.712 0 0 1-6.363-15.922 21.724 21.724 0 0 1 7.17-15.586l18.271-16.48c65.686-59.729 150.813-95.104 240.073-99.824a20.768 20.768 0 0 1 5.269-0.673h15.592c95.67 0 187.907 35.597 259.764 100.235l19.314 16.252a21.697 21.697 0 0 1 7.721 15.688 21.687 21.687 0 0 1-6.341 16.303l-17.369 17.384-73.294 72.393c-8.088 7.879-20.859 8.235-29.402 0.827l-16.922-14.697c-40.266-35.387-91.177-54.829-143.471-54.829-51.995 0-102.758 19.442-142.926 54.747l-17.027 14.779a21.67 21.67 0 0 1-14.242 5.319z m174.194-118.313c62.856 0 123.969 23.285 172.067 65.558l1.754 1.521 1.716-1.671 57.434-56.992-1.471-1.238c-0.187-0.157-0.371-0.321-0.559-0.485-63.895-57.59-145.911-89.313-230.941-89.313h-11.266a19.816 19.816 0 0 1-3.418 0.425c-80.688 3.364-157.773 34.916-217.07 88.828l-1.344 1.209 1.193 1.2 58.529 58.037 1.844-1.61c48.019-42.191 108.966-65.469 171.532-65.469z" fill="#363634" ></path><path d="M513.444 804.155l16.936-16.488 91.775-90.887 18.271-18.264-20.056-16.488c-26.73-20.04-56.582-34.746-106.927-34.746-50.346 0-77.965 16.482-106.928 34.746l-20.039 16.488 18.263 18.264 91.775 90.887 16.93 16.488z m0 0" fill="#8AC78A" ></path><path d="M513.444 825.897a21.704 21.704 0 0 1-15.16-6.163l-16.929-16.489-110.248-109.359a21.736 21.736 0 0 1 1.559-32.158l20.039-16.479a21.236 21.236 0 0 1 2.216-1.605c28.313-17.86 60.41-38.094 118.522-38.094 59.776 0 94.186 19.757 119.961 39.087 0.262 0.201 0.516 0.396 0.77 0.605l20.055 16.486a21.708 21.708 0 0 1 7.9 15.729c0.299 6.125-2 12.094-6.342 16.437l-18.264 18.264-108.92 107.577a21.671 21.671 0 0 1-15.159 6.162z m-94.662-145.806l1.32 1.32 93.342 92.408 1.775-1.723 92.895-92.006-1.163-0.955c-24.219-18.093-49.458-30.119-93.507-30.119-44.861 0-68.998 14.794-94.178 30.663l-0.484 0.412z" fill="#363634" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 0C229.283787 0 0.142041 234.942803 0.142041 524.867683c0 231.829001 146.647305 428.553077 350.068189 497.952484 25.592898 4.819996 34.976961-11.38884 34.976961-25.294314 0-12.45521-0.469203-45.470049-0.725133-89.276559-142.381822 31.735193-172.453477-70.380469-172.453477-70.380469-23.246882-60.569859-56.816233-76.693384-56.816234-76.693385-46.493765-32.58829 3.540351-31.948468 3.540351-31.948467 51.356415 3.71097 78.356923 54.086324 78.356923 54.086324 45.683323 80.19108 119.817417 57.072162 148.993321 43.593236 4.649376-33.91059 17.915029-57.029508 32.50298-70.167195-113.675122-13.222997-233.151301-58.223843-233.1513-259.341366 0-57.285437 19.919806-104.163095 52.678715-140.846248-5.246544-13.265652-22.820334-66.626844 4.990615-138.884127 0 0 42.996069-14.076094 140.760939 53.787741 40.863327-11.644769 84.627183-17.445825 128.177764-17.6591 43.465272 0.213274 87.271782 6.014331 128.135109 17.6591 97.679561-67.906489 140.59032-53.787741 140.59032-53.787741 27.938914 72.257282 10.407779 125.618474 5.118579 138.884127 32.844219 36.683154 52.593405 83.560812 52.593405 140.846248 0 201.586726-119.646798 245.990404-233.663158 258.957473 18.341577 16.208835 34.721032 48.199958 34.721032 97.210357 0 70.167195-0.639822 126.7275-0.639823 143.960051 0 14.033439 9.213443 30.370239 35.190235 25.209005 203.250265-69.527373 349.769606-266.123484 349.769605-497.867175C1023.857959 234.942803 794.673558 0 512 0" fill="#3E75C3" ></path></symbol><symbol id="icon-yinle1" viewBox="0 0 1024 1024"><path d="M225.1 823.6c-11.4-7.2-19.4-18.3-22.6-31.4-1.6-6.5-7.3-11-14-11-1.1 0-2.3 0.1-3.4 0.4-7.7 1.9-12.5 9.7-10.6 17.4 5 20.4 17.5 37.8 35.3 49 2.3 1.5 4.9 2.2 7.6 2.2 1.2 0 2.3-0.1 3.5-0.4 3.6-0.9 6.8-3.1 8.8-6.3 2.1-3.2 2.7-7.1 1.9-10.8-1-3.8-3.2-7-6.5-9.1zM746.8 727.5c-15-8.7-25.5-22.3-29.7-38.4-1.7-6.5-8.1-10.8-15.2-10.3-0.8 0.1-1.6 0.2-2.4 0.4-7.8 1.9-12.6 9.3-10.7 16.6 6 23 21.1 42.5 42.5 54.9 2.6 1.5 5.7 2.2 8.8 2 0.8-0.1 1.6-0.2 2.4-0.4 3.7-0.9 6.8-3 8.9-6.1 2.1-3.1 2.7-6.7 1.9-10.3-0.9-3.4-3.2-6.5-6.5-8.4z" fill="#6B400D" ></path><path d="M931.9 574.8c0-0.2 0.1-0.5 0.1-0.7 0 0-1.9-457.4-2.5-460.6-2.6-13.5-15.6-22.3-29.2-19.8l-510.8 97.6c-12.4 2.4-20.8 13.6-20.1 25.9 0 0.5-0.2 1.1-0.2 1.6l1.9 427.1c-30.1-5.5-77.8-12.7-122.4-12.7-82.4 0-149.5 67.1-149.5 149.5s67.1 149.5 149.5 149.5c48.8 0 88.5-16.5 118-49.2 65.2-72 55.3-197.4 54.3-208.2v-0.5l-1.7-250.1 461-88.1 1.5 210.1c-30.1-5.5-77.8-12.7-122.4-12.7-82.4 0-149.5 67.1-149.5 149.5S677 832.5 759.4 832.5c48.8 0 88.5-16.5 118-49.2 66-72.6 55.4-199.3 54.5-208.5zM329.8 849.6c-20 22-46.5 32.7-81 32.7-55 0-99.7-44.7-99.7-99.7 0-54.9 44.7-99.7 99.7-99.7 45.7 0 96.8 8.7 123.5 13.8 0.6 34.3-3.1 109.5-42.5 152.9z m89.5-476.2l-0.1-137.2 461-88.1 0.1 137.2-461 88.1z m421.4 376.5c-20 22-46.5 32.7-81 32.7-55 0-99.7-44.7-99.7-99.7s44.7-99.7 99.7-99.7c45.7 0 96.8 8.6 123.5 13.9 0.5 34.3-3.2 109.4-42.5 152.8z" fill="#6B400D" ></path><path d="M419.2 236.2l0.1 137.2 461-88-0.1-137.2z" fill="#FFD524" ></path><path d="M252.5 839c-4 0.1-7.7 1.8-10.5 4.8-2.7 2.9-4.2 6.8-4 10.8 0.3 8.1 6.9 14.5 15 14.5h0.5c8.3-0.3 14.8-7.3 14.5-15.6-0.2-8.2-6.8-14.5-15.5-14.5z" fill="#6B400D" ></path></symbol><symbol id="icon-youjian1" viewBox="0 0 1024 1024"><path d="M172.1 794.3h680.2c37.9 0 71.2-33.3 71.2-71.2v-207H704l-138.9 140c-13.4 13.4-32 20.1-50.9 20.1-18.5 0-37.3-6.4-51.8-19.3L321.7 516.1H101v207c0 37.9 33.2 71.2 71.1 71.2z" fill="#FFD524" ></path><path d="M960.2 310c1.4-27.7-8.7-54.3-28.3-74.9-20.5-21.6-49.5-33.9-79.6-33.9H462.9c-10.1 0-18.4 8.2-18.4 18.4s8.2 18.4 18.4 18.4h389.4c20 0 39.3 8.2 52.9 22.5 12.6 13.3 19.1 30.2 18.2 48.7v414c0 37.9-33.3 71.2-71.2 71.2H172.1c-37.9 0-71.2-33.3-71.2-71.2v-414c0-38.6 33.7-71.2 73.6-71.2h30.1c10.1 0 18.4-8.2 18.4-18.4s-8.2-18.4-18.4-18.4h-30.1c-60.8 0-110.3 48.4-110.3 107.9v414c0 58.5 49.4 107.9 107.9 107.9h680.2c58.5 0 107.9-49.4 107.9-107.9V310z" fill="#6B400D" ></path><path d="M327 238h6.1c10.1 0 18.4-8.2 18.4-18.4s-8.2-18.4-18.4-18.4H327c-10.1 0-18.4 8.2-18.4 18.4S316.8 238 327 238zM383.4 238h19.7c10.1 0 18.4-8.2 18.4-18.4s-8.2-18.4-18.4-18.4h-19.7c-10.1 0-18.4 8.2-18.4 18.4s8.3 18.4 18.4 18.4zM514.3 676.2c18.9 0 37.5-6.7 50.9-20.1l138.9-140 178.3-179.7c7.2-7.2 7.1-18.8-0.1-26-7.2-7.2-18.8-7.1-26 0.1L539.1 630.2c-12.4 12.4-37.8 12.1-51.4 0L170.6 313c-7.2-7.2-18.8-7.2-26 0-7.2 7.2-7.2 18.8 0 26l177.1 177.1 140.8 140.7c14.5 12.9 33.3 19.4 51.8 19.4z" fill="#6B400D" ></path></symbol><symbol id="icon-find" viewBox="0 0 1024 1024"><path d="M402 401m-177 0a177 177 0 1 0 354 0 177 177 0 1 0-354 0Z" fill="#FFE1E1" ></path><path d="M622.2 548.2L786.1 712c25.3 25.3 28.9 64.5 5.7 87.7s-62.4 19.7-87.7-5.7L538.2 628.2c-39.9 24-86.7 37.8-136.7 37.8C254.9 666 136 547.1 136 400.5S254.9 135 401.5 135 667 253.9 667 400.5c0 54.6-16.5 105.4-44.8 147.7zM600 576.9c-9.8 11-20.4 21.1-31.9 30.4l161.4 161.4c12.2 12.2 28.7 13.7 36.8 5.7s6.5-24.6-5.7-36.8L600 576.9zM401.5 630C528.2 630 631 527.2 631 400.5S528.2 171 401.5 171 172 273.8 172 400.5 274.8 630 401.5 630z m0.5-433c9.9 0 18 8.1 18 18s-8.1 18-18 18c-92.8 0-168 75.2-168 168s75.2 168 168 168c9.9 0 18 8.1 18 18s-8.1 18-18 18c-112.7 0-204-91.3-204-204S289.3 197 402 197z m70.6 398.3c-9.3 3.6-19.7-1.1-23.3-10.3-3.6-9.3 1.1-19.7 10.3-23.3 3-1.1 5.9-2.5 8.7-3.9 8.8-4.7 19.7-1.3 24.3 7.5 4.7 8.8 1.3 19.7-7.5 24.3-4 2.1-8.2 4-12.5 5.7z" fill="#5483E3" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1024 1024"><path d="M478.985 334.949l-12.223-12.223c-0.924-0.924-4.046-3.405-2.89-2.655-1.712-1.171-3.481-2.262-5.357-3.153a12.86 12.86 0 0 1-0.197-0.095l-0.092-0.031c-1.194-0.405-2.39-0.811-3.615-1.113-0.886-0.218-4.053-0.665-3.655-0.689-0.453-0.029-0.907-0.061-1.361-0.067-1.249-0.018-2.502-0.035-3.749 0.053-0.384 0.027-1.059 0.126-1.632 0.217-1.949 0.407-3.882 0.905-5.75 1.6l-0.161 0.059a14.22 14.22 0 0 1-0.128 0.066c-1.143 0.585-2.288 1.171-3.376 1.855-0.746 0.469-3.641 2.784-2.952 2.125-0.541 0.488-1.074 0.984-1.591 1.501l-0.062 0.062-0.492 0.492-2.539 2.539-10.705 10.705-96.468 96.468-126.324 126.324-81.54 81.54-4.641 4.641c-0.629 0.629-3.171 3.85-2.445 2.724-1.133 1.667-2.186 3.389-3.052 5.211a9.521 9.521 0 0 1-0.095 0.197l-0.031 0.092c-0.405 1.194-0.812 2.39-1.113 3.615-0.217 0.88-0.419 1.765-0.596 2.654-0.052 0.431-0.096 0.852-0.108 1.113-0.071 1.664-0.118 3.335 0 4.998 0.027 0.383 0.126 1.058 0.216 1.631 0.407 1.95 0.905 3.883 1.6 5.752l0.059 0.161 0.066 0.128c0.585 1.143 1.171 2.288 1.855 3.376 0.377 0.599 0.758 1.197 1.151 1.786 0.432 0.506 1.232 1.476 1.539 1.793 10.788 11.116 21.902 21.931 32.855 32.883l11.496 11.496c0.486-0.07 0.972-0.142 1.473-0.237l-5.707-5.923c-21.534-21.534-13.451-58.053 8.083-79.588l274.89-274.89c21.534-21.534 56.448-21.534 77.983 0l1.52 1.52 0.258-0.319-30.397-30.394zM451.467 315h0zM744.851 245.589c21.534-21.534 56.448-21.534 77.983 0l7.228 7.228 0.23-0.284-48.583-48.583-1.182-1.182c-0.351-0.351-0.701-0.704-1.067-1.038-0.517-0.472-2.471-1.966-2.074-1.727-0.493-0.334-0.992-0.66-1.505-0.963a57.385 57.385 0 0 0-3.109-1.724c-0.596-0.237-1.384-0.549-1.753-0.662-1.203-0.37-2.408-0.741-3.639-1.007a28.948 28.948 0 0 0-1.49-0.246c-6.173 0.145-13.547 2.66-21.868 9.791-12.933 11.083-94.065 92.737-171.579 171.228l20.789 20.789 151.619-151.62zM546.334 402.875l20.615 20.615 0.289-0.289-20.617-20.617-0.287 0.291z" fill="#FFFFFF" ></path><path d="M397.715 589.881c-11.46-11.46-18.615-25.08-20.23-41.345-1.89-19.031 6.146-37.245 19.436-50.535l91.731-91.731c7.081-7.081 18.913-7.081 25.994 0 7.081 7.082 7.081 18.913 0 25.994l-53.048 53.048-28.381 28.381c-4.518 4.518-9.424 8.859-13.597 13.711l-0.354 0.421c-0.249 0.359-0.508 0.71-0.746 1.076-0.686 1.091-1.373 2.184-1.961 3.332-0.265 0.519-0.825 1.9-1.012 2.331a27.13 27.13 0 0 0-0.473 1.499c-0.335 1.211-0.67 2.425-0.901 3.661l-0.066 0.347c-0.153 2.266-0.206 4.545-0.012 6.81 0.108 0.57 0.213 1.141 0.343 1.706 0.301 1.222 0.602 2.447 1.007 3.64 0.184 0.541 0.757 1.84 0.949 2.298 0.25 0.49 0.505 0.978 0.784 1.452 0.656 1.115 1.313 2.232 2.067 3.286l0.036 0.051a47 47 0 0 1 0.34 0.368 62.407 62.407 0 0 0 1.902 2.016l10.575 10.575 46.235 46.235 0.669-0.67 35.265 36.604 30.105 30.105 12.864 12.864a54.387 54.387 0 0 0 2.005 1.926c0.585 0.472 1.163 0.925 1.735 1.357 0.785 0.519 1.576 1.029 2.402 1.483 0.695 0.382 1.396 0.754 2.105 1.113 0.581 0.231 1.298 0.513 1.646 0.62 1.602 0.493 3.216 0.964 4.867 1.272l0.347 0.066c2.326 0.157 4.666 0.213 6.991 0l0.298-0.066c1.228-0.265 2.459-0.531 3.661-0.901 0.72-0.221 1.438-0.452 2.151-0.696 0.588-0.264 1.347-0.607 1.679-0.79 1.508-0.828 3.01-1.682 4.411-2.685l0.051-0.036a47 47 0 0 1 0.368-0.34c0.682-0.624 1.324-1.211 1.978-1.865l0.411-0.411 2.379-2.379 10.42-10.42 95.793-95.793 126.395-126.395 82.358-82.358 4.962-4.962a36.495 36.495 0 0 0 1.88-1.994c0.16-0.186 0.293-0.338 0.408-0.467 0.71-1.058 1.42-2.119 2.034-3.237 0.382-0.695 0.754-1.396 1.113-2.104 0.231-0.581 0.513-1.298 0.62-1.646 0.37-1.203 0.741-2.408 1.007-3.639 0.121-0.562 0.296-1.858 0.38-2.405 0.128-2.054 0.138-4.115-0.051-6.166a20.496 20.496 0 0 1-0.064-0.293c-0.265-1.228-0.531-2.459-0.901-3.661a74.411 74.411 0 0 0-0.666-2.07c-4.339-7.491-12.895-16.134-25.636-27.945l-66.709-66.709-7.228-7.228c-21.534-21.534-56.449-21.534-77.983 0l-151.621 151.62 29.138 29.138c5.704 5.704 11.556 11.266 15.699 18.308 14.005 23.808 10.975 55.216-8.438 75.22-28.471 29.338-57.829 57.858-86.737 86.766-7.081 7.081-18.913 7.081-25.994 0-7.082-7.081-7.082-18.913 0-25.994l45.163-45.163 29.004-29.004 8.969-8.97 2.26-2.26c0.919-0.919 3.298-3.895 2.795-3.068 1.102-1.624 2.118-3.308 2.991-5.066 0.233-0.586 0.523-1.321 0.632-1.675 0.37-1.203 0.741-2.408 1.007-3.639 0.127-0.587 0.311-1.972 0.391-2.472 0.028-0.441 0.059-0.882 0.066-1.324 0.018-1.249 0.035-2.502-0.053-3.749a21.611 21.611 0 0 0-0.197-1.505c-0.394-1.892-0.883-3.765-1.521-5.589-0.266-0.593-0.62-1.377-0.806-1.716-0.62-1.129-1.242-2.261-1.961-3.332-0.3-0.447-1.215-1.566-1.542-1.977-0.453-0.5-0.916-0.992-1.395-1.471l-0.147-0.146-11.242-11.242-24.074-24.074-0.289 0.289-20.615-20.615-37.211-37.211-1.52-1.52c-21.534-21.534-56.449-21.534-77.983 0l-274.89 274.89c-21.534 21.534-29.617 58.053-8.083 79.588l5.707 5.923 45.021 46.731 45.337 45.337 0.982 0.982c0.094 0.094 0.194 0.185 0.289 0.279 2.802 2.266 5.455 4.086 8.05 5.395 1.163 0.395 2.329 0.788 3.522 1.082 0.88 0.217 1.765 0.419 2.655 0.596 0.431 0.052 0.852 0.096 1.112 0.107 1.84 0.078 3.689 0.096 5.529-0.026 0.642-0.112 1.585-0.272 2.016-0.378 0.523-0.129 1.045-0.26 1.566-0.397 5.713-2.23 12.019-7.154 19.747-15.311l164.177-164.421-10.172-10.172-44.472-44.47z" fill="#53AFFD" ></path><path d="M264.852 825.029c-1.84 0.122-3.689 0.104-5.529 0.026-0.26-0.011-0.681-0.055-1.112-0.107a60.205 60.205 0 0 1-2.655-0.596c-1.193-0.294-2.359-0.687-3.522-1.082l-0.07-0.023c-0.486-0.235-0.975-0.463-1.452-0.716-1.148-0.587-2.242-1.275-3.332-1.961-0.284-0.179-0.882-0.627-1.383-1.009a41.958 41.958 0 0 1-1.813-1.687c-0.095-0.094-0.195-0.184-0.289-0.279l-0.982-0.982-45.337-45.337-46.494-46.494-11.496-11.496c-10.953-10.953-22.067-21.767-32.855-32.883-0.307-0.316-1.107-1.286-1.539-1.793a82.127 82.127 0 0 1-1.151-1.786c-0.684-1.088-1.27-2.233-1.855-3.376l-0.066-0.128-0.059-0.161c-0.695-1.868-1.193-3.802-1.6-5.752-0.091-0.573-0.189-1.247-0.216-1.631-0.118-1.664-0.071-3.334 0-4.998 0.011-0.261 0.056-0.681 0.108-1.113 0.177-0.89 0.379-1.774 0.596-2.654 0.301-1.225 0.707-2.422 1.113-3.615l0.031-0.092 0.095-0.197c0.866-1.822 1.919-3.544 3.052-5.211-0.726 1.126 1.816-2.096 2.445-2.724l4.641-4.641 81.54-81.54L319.99 432.667l96.468-96.468 10.705-10.705 2.539-2.539 0.492-0.492 0.062-0.062a42.462 42.462 0 0 1 1.591-1.501c-0.689 0.659 2.206-1.656 2.952-2.125 1.088-0.684 2.233-1.27 3.376-1.855l0.128-0.066 0.161-0.059c1.868-0.695 3.801-1.193 5.75-1.6a23.884 23.884 0 0 1 1.632-0.217c1.248-0.088 2.5-0.071 3.749-0.053 0.455 0.006 0.908 0.038 1.361 0.067-0.398 0.024 2.769 0.471 3.655 0.689 1.225 0.301 2.421 0.708 3.615 1.113l0.092 0.031 0.197 0.095c1.875 0.891 3.645 1.982 5.357 3.153-1.155-0.75 1.967 1.731 2.89 2.655l12.223 12.223 30.396 30.396 37.239 37.239 20.617 20.617 24.074 24.074 11.242 11.242 0.147 0.146c0.479 0.479 0.942 0.971 1.395 1.471 0.327 0.411 1.242 1.53 1.542 1.977 0.719 1.071 1.341 2.203 1.961 3.332 0.186 0.339 0.54 1.123 0.806 1.716 0.638 1.824 1.127 3.697 1.521 5.589 0.085 0.543 0.171 1.15 0.197 1.505 0.088 1.248 0.071 2.5 0.053 3.749-0.006 0.442-0.038 0.883-0.066 1.324-0.079 0.5-0.264 1.885-0.391 2.472-0.266 1.231-0.637 2.437-1.007 3.639-0.109 0.354-0.399 1.09-0.632 1.675-0.873 1.759-1.888 3.442-2.991 5.066 0.503-0.827-1.876 2.149-2.795 3.068l-2.26 2.26-8.969 8.97-29.004 29.004-45.163 45.163c-7.082 7.081-7.082 18.913 0 25.994 7.081 7.081 18.913 7.081 25.994 0 28.908-28.908 58.266-57.428 86.737-86.766 19.413-20.005 22.443-51.412 8.438-75.22-4.143-7.043-9.995-12.605-15.699-18.308l-29.138-29.138-20.789-20.789-1.215-1.215-59.773-59.773-16.775-16.775c-11.647-11.647-25.001-18.138-41.345-20.23-17.999-2.304-36.941 5.842-49.515 18.417l-6.693 6.693-33.703 33.703-116.016 116.016-118.628 118.628-36.969 36.969c-11.37 11.37-21.985 22.014-26.513 38.386-5.93 21.441 0.995 44.945 16.576 60.526l12.545 12.545 56.807 56.807 55.499 55.499 10.91 10.91c16.914 16.914 43.794 23.331 66.203 14.244 18.386-7.456 31.551-23.625 45.298-37.372l60.549-60.549 61.763-61.764c7.081-7.081 7.081-18.913 0-25.994-7.081-7.082-18.913-7.082-25.994 0l-93.312 93.312-47.577 47.577-4.197 4.196c-0.47 0.47-0.944 0.93-1.422 1.394-0.317 0.307-1.287 1.107-1.793 1.539-0.589 0.393-1.187 0.774-1.786 1.151-1.088 0.684-2.233 1.27-3.376 1.855l-0.028 0.013c-0.485 0.176-0.966 0.36-1.457 0.518-0.683 0.232-1.376 0.427-2.074 0.61-0.521 0.137-1.043 0.269-1.566 0.397-0.426 0.106-1.369 0.266-2.011 0.378z" fill="" ></path><path d="M950.646 322.745c-4.242-6.322-9.561-11.409-14.886-16.733l-51.826-51.826-59.412-59.412-16.202-16.202c-12.015-12.015-26.467-18.886-43.486-20.091-17.905-1.267-35.368 6.974-47.798 19.404l-14.325 14.325-57.404 57.404-71.645 71.645c-7.082 7.082-7.082 18.913 0 25.994 7.081 7.081 18.913 7.081 25.994 0l93.444-93.444 46.955-46.955 3.881-3.881a53.506 53.506 0 0 1 1.913-1.81c0.483-0.388 1.44-1.165 1.844-1.436 1.071-0.719 2.203-1.34 3.332-1.961 0.348-0.191 1.161-0.557 1.758-0.826a57.197 57.197 0 0 1 3.285-0.995 29.629 29.629 0 0 1 1.879-0.446c0.614-0.099 1.445-0.226 1.888-0.258 1.713-0.121 3.43-0.086 5.143 0.023l0.912 0.134c0.547 0.08 1.151 0.173 1.49 0.246 1.231 0.266 2.437 0.637 3.639 1.007 0.369 0.114 1.157 0.425 1.753 0.662a57.385 57.385 0 0 1 3.109 1.724c0.514 0.302 1.012 0.629 1.505 0.963-0.398-0.239 1.557 1.255 2.074 1.727 0.365 0.334 0.716 0.687 1.067 1.038l1.182 1.182 48.583 48.583 55.592 55.592c10.713 10.713 22.302 21.019 32.322 32.428 0.393 0.489 1.153 1.426 1.422 1.826 0.719 1.071 1.34 2.203 1.961 3.332 0.182 0.332 0.526 1.091 0.79 1.679l0.029 0.081c0.233 0.687 0.453 1.378 0.666 2.07 0.37 1.202 0.636 2.433 0.901 3.661l0.064 0.293c0.189 2.05 0.179 4.112 0.051 6.166-0.084 0.547-0.259 1.843-0.38 2.405-0.266 1.231-0.637 2.437-1.007 3.639-0.107 0.348-0.389 1.066-0.62 1.646a69.199 69.199 0 0 1-1.113 2.104c-0.614 1.118-1.324 2.179-2.034 3.237-0.115 0.13-0.248 0.281-0.408 0.467a36.886 36.886 0 0 1-1.88 1.994l-4.962 4.962-82.358 82.358-126.395 126.395-95.793 95.793-10.42 10.42-2.379 2.379-0.411 0.411c-0.654 0.654-1.296 1.241-1.978 1.865a47 47 0 0 0-0.368 0.34 2.252 2.252 0 0 1-0.051 0.036c-1.402 1.003-2.903 1.857-4.411 2.685-0.332 0.182-1.091 0.525-1.679 0.79-0.713 0.244-1.431 0.474-2.151 0.696-1.202 0.37-2.433 0.636-3.661 0.901l-0.298 0.066c-2.325 0.213-4.665 0.158-6.991 0l-0.347-0.066c-1.65-0.307-3.264-0.779-4.867-1.272-0.348-0.107-1.065-0.389-1.646-0.62a70.457 70.457 0 0 1-2.105-1.113c-0.825-0.453-1.617-0.963-2.402-1.483-0.278-0.184-0.558-0.366-0.835-0.552a43.04 43.04 0 0 0-0.467-0.408c-0.148-0.128-0.288-0.266-0.433-0.398a56.917 56.917 0 0 1-2.005-1.926l-12.864-12.864-30.105-30.105-35.934-35.934-46.235-46.235-10.575-10.575a60.33 60.33 0 0 1-1.902-2.016 47 47 0 0 0-0.34-0.368 2.252 2.252 0 0 1-0.036-0.051c-0.753-1.053-1.411-2.171-2.067-3.286a27.81 27.81 0 0 1-0.784-1.452c-0.192-0.458-0.765-1.757-0.949-2.298-0.405-1.193-0.706-2.418-1.007-3.64-0.13-0.566-0.235-1.136-0.343-1.706-0.194-2.265-0.141-4.545 0.012-6.81l0.066-0.347c0.23-1.237 0.566-2.45 0.901-3.661 0.14-0.505 0.305-1.003 0.473-1.499 0.187-0.431 0.747-1.813 1.012-2.331 0.587-1.148 1.275-2.242 1.961-3.332 0.238-0.366 0.497-0.718 0.746-1.076l0.354-0.421c4.173-4.852 9.08-9.193 13.597-13.711l28.381-28.381 53.048-53.048c7.081-7.082 7.081-18.913 0-25.994-7.081-7.081-18.913-7.081-25.994 0l-91.731 91.731c-13.29 13.29-21.326 31.504-19.436 50.535 1.615 16.265 8.771 29.885 20.23 41.345l44.47 44.47 10.172 10.172 51.824 51.824 21.222 21.222c5.76 5.76 11.297 11.29 18.308 15.699 23.809 14.971 55.017 10.024 75.22-8.438 1.717-1.569 3.316-3.288 4.96-4.931l29.492-29.492 112.352-112.352 121.309-121.309 40.688-40.688c5.895-5.895 12.211-11.581 17.655-17.91 18-20.921 20.828-52.198 5.26-75.401z" fill="" ></path></symbol><symbol id="icon-laoshu" viewBox="0 0 1024 1024"><path d="M821.4 453.8c-9.2 0-18.8-0.7-28.5-1.9-62.2-8.3-80.8-25.7-86.4-35.3-4.7-8.1-2.5-14.6-2.5-14.7 1.2-3 1-6.3-0.5-9.1-2.6-4.8-62.5-114.8 29.4-187.6 25.7-20.4 52.4-30.7 79.5-30.7 59.6 0 115.7 52.9 133.4 125.8 10.2 41.9 3.6 80.5-18.4 108.5-22.8 29-60.5 45-106 45z" fill="#FF6A48" ></path><path d="M812.4 185c54.8 0 106.6 49.5 123.2 117.8 9.4 38.7 3.6 74.1-16.5 99.6-20.8 26.4-55.5 40.9-97.8 40.9-8.7 0-17.8-0.6-27.1-1.9-57.9-7.7-73.8-23-78-29.2-2.6-3.8-2.3-6.5-2.5-6.5 3.6-6.4 2.5-11.8-1.1-18.2-2.4-4.3-58.4-106.6 26.8-174.1 23.8-18.8 48.3-28.4 73-28.4m0-21c-27.7 0-57 9.9-86 32.9-100.2 79.4-32 200.9-32 200.9s-20 48.8 97.2 64.4c10.3 1.4 20.3 2 29.9 2 99.4 0 157.7-71.6 134.6-166.5C938 223.9 880.3 164 812.4 164z" fill="#7F0518" ></path><path d="M204.6 453.8c-45.6 0-83.2-16-106-45-22-28-28.6-66.6-18.4-108.5 17.7-72.9 73.8-125.8 133.4-125.8 27.1 0 53.8 10.3 79.5 30.7 92.1 73 32 182.9 29.4 187.5-1.6 2.8-1.8 6.2-0.5 9.1 0 0.1 2.3 6.8-2.8 15.3-5.8 9.5-24.7 26.6-86 34.8-9.8 1.2-19.3 1.9-28.6 1.9 0.1 0 0.1 0 0 0z" fill="#FF6A48" ></path><path d="M213.6 185c24.7 0 49.2 9.6 73 28.4 84.7 67.1 29.1 169.9 26.8 174.1-3.6 6.4-5.1 10.8-1.5 17.2 0.1 0.5 0.7 3.4-2.1 7.6-4.2 6.2-20.2 21.4-78 29.2-9.2 1.2-18.3 1.9-27.1 1.9-42.3 0-77-14.5-97.8-40.9-20-25.5-25.9-60.8-16.5-99.6C107 234.5 158.8 185 213.6 185m0-21C145.7 164 88 223.9 70 297.8c-23 94.9 35.3 166.5 134.6 166.5 9.6 0 19.5-0.7 29.9-2 117.2-15.7 97.2-64.4 97.2-64.4s68.2-121.5-32-200.9c-29.1-23.1-58.4-33-86.1-33z" fill="#7F0518" ></path><path d="M726.6 396.5s-45.9-65.9 7.2-117.1c53.1-51.2 117.1-13.2 137.4 45.1 20.3 58.3-17.1 106-85.3 103.5-68.1-2.4-59.3-31.5-59.3-31.5z" fill="#FFC831" ></path><path d="M790.8 438.7c-1.7 0-3.5 0-5.2-0.1-32.9-1.2-54.6-8.7-64.4-22.4-4.6-6.4-5.5-12.7-5.4-17-17-27-34.4-83.8 10.8-127.3 23.5-22.6 51.7-31.4 79.6-24.8 33.1 7.9 61.9 36.3 75 74 10.6 30.5 7.4 59.6-9.1 81.9-16.9 22.8-46.3 35.7-81.3 35.7z m-54.1-39.5c-0.1 0.4-0.3 2.6 1.9 5.3 2.8 3.5 13.1 11.9 47.7 13.1 30.6 1 55.1-8.5 68.8-27.1 12.2-16.6 14.4-38.7 6.2-62.5-10.6-30.5-34.2-54.3-60-60.5-21-5-41.8 1.7-60.2 19.5-46.1 44.4-7.6 101.1-5.9 103.5 1.8 2.5 2.3 5.7 1.5 8.7z" fill="#7F0518" ></path><path d="M294.4 396.5s45.9-65.9-7.2-117.1C234 228.3 170 266.3 149.8 324.6c-20.3 58.3 17.1 106 85.3 103.5 68.1-2.5 59.3-31.6 59.3-31.6z" fill="#FFC831" ></path><path d="M230.2 438.7c-34.9 0-64.4-12.9-81.2-35.7-16.5-22.3-19.7-51.4-9.1-81.9 13.1-37.7 41.8-66.1 75-74 27.9-6.7 56.1 2.1 79.6 24.8 45.1 43.5 27.8 100.3 10.8 127.3 0.1 4.3-0.8 10.6-5.4 17-9.8 13.7-31.4 21.2-64.4 22.4-1.9 0-3.6 0.1-5.3 0.1z m3-172.8c-4.5 0-9 0.5-13.5 1.6-25.8 6.2-49.4 29.9-60 60.5-8.2 23.7-6.1 45.9 6.2 62.5 13.7 18.6 38.1 28.4 68.8 27.1 34.6-1.2 44.9-9.6 47.7-13.1 2.3-2.8 1.9-5.1 1.9-5.4-0.9-3-0.3-5.9 1.5-8.5 1.7-2.4 40-59.3-5.9-103.5-14.5-14-30.4-21.2-46.7-21.2z" fill="#7F0518" ></path><path d="M839.1 615.5c0 166.6-150.2 235.3-335.5 235.3s-335.5-68.7-335.5-235.3c0-166.6 150.2-367.9 335.5-367.9s335.5 201.3 335.5 367.9z" fill="#FF6A48" ></path><path d="M503.7 861.2c-216.6 0-346-91.9-346-245.8C157.7 444 312 237 503.7 237c191.6 0 346 207 346 378.4-0.1 154-129.4 245.8-346 245.8z m0-603.1c-180 0-325 195.5-325 357.4 0 202.9 227.3 224.8 325 224.8s325-21.9 325-224.8c-0.1-161.9-145-357.4-325-357.4z" fill="#7F0518" ></path><path d="M461.2 611.5a42.4 29.7 0 1 0 84.8 0 42.4 29.7 0 1 0-84.8 0Z" fill="#7F0518" ></path><path d="M634.3 477.2m-63 0a63 63 0 1 0 126 0 63 63 0 1 0-126 0Z" fill="#7F0518" ></path><path d="M618.5 464.4m-29 0a29 29 0 1 0 58 0 29 29 0 1 0-58 0Z" fill="#FFFFFF" ></path><path d="M655.6 506.7m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF" ></path><path d="M373 477.2m-63 0a63 63 0 1 0 126 0 63 63 0 1 0-126 0Z" fill="#7F0518" ></path><path d="M357.1 464.4m-29 0a29 29 0 1 0 58 0 29 29 0 1 0-58 0Z" fill="#FFFFFF" ></path><path d="M394.3 506.7m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF" ></path><path d="M588 384.4c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 16.9-20.4 42.8-22.3 17.7-1.2 35.2 5.8 51.9 21.2 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.6 4.6-14.8 0.6-12.2-11.3-24.4-16.4-36.1-15.7-16.7 1.2-27.9 14.5-28 14.6-2.2 2.7-5.3 4-8.3 4z" fill="#7F0518" ></path><path d="M339.9 384.4c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 16.9-20.4 42.8-22.3 17.8-1.2 35.2 5.8 51.9 21.2 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.6 4.6-14.8 0.6-12.2-11.3-24.4-16.4-36.1-15.7-16.7 1.2-27.9 14.5-28 14.6-2.3 2.7-5.3 4-8.3 4z" fill="#7F0518" ></path><path d="M458.5 713c-3.2 0-6.5-0.3-9.6-0.9-29.2-5.5-44-34.5-44.6-35.8-2.6-5.2-0.5-11.4 4.7-14 5.1-2.6 11.5-0.5 14.1 4.6 0.1 0.2 10.9 21 29.8 24.5 12.1 2.2 25.6-3 40.3-15.4v-51.2c0-5.8 4.7-10.5 10.5-10.5s10.5 4.7 10.5 10.5v56c0 3-1.2 5.8-3.4 7.8-17.9 16.3-35.4 24.4-52.3 24.4z" fill="#7F0518" ></path><path d="M548.8 713c-16.9 0-34.4-8.2-52.2-24.3-4.3-3.9-4.6-10.5-0.7-14.8 3.9-4.3 10.6-4.6 14.8-0.7 16.1 14.6 30.9 20.8 43.8 18.3 18.8-3.5 29.6-24.3 29.7-24.5 2.6-5.2 8.8-7.3 14.1-4.7 5.2 2.6 7.3 8.9 4.7 14.1-0.6 1.2-15.4 30.3-44.6 35.8-3.1 0.5-6.4 0.8-9.6 0.8z" fill="#7F0518" ></path><path d="M776.8 637.7c-4.9 0-9.3-3.4-10.3-8.4-1.1-5.7 2.5-11.2 8.2-12.4l106.8-21.4c5.6-1.1 11.2 2.5 12.4 8.2 1.1 5.7-2.5 11.2-8.2 12.4l-106.8 21.4c-0.8 0.2-1.5 0.2-2.1 0.2zM884.6 669.5H775.7c-5.8 0-10.5-4.7-10.5-10.5s4.7-10.5 10.5-10.5h108.9c5.8 0 10.5 4.7 10.5 10.5s-4.7 10.5-10.5 10.5zM879.5 727.4c-0.7 0-1.4-0.1-2.2-0.2l-106.5-22.5c-5.7-1.2-9.3-6.8-8.1-12.4 1.2-5.7 6.7-9.4 12.4-8.1l106.5 22.5c5.7 1.2 9.3 6.8 8.1 12.4-0.9 4.9-5.3 8.3-10.2 8.3z" fill="#7F0518" ></path><path d="M232.8 637.7c-0.7 0-1.4-0.1-2.1-0.2L124 616.2c-5.7-1.1-9.4-6.7-8.2-12.4 1.1-5.7 6.6-9.3 12.4-8.2L235 617c5.7 1.1 9.4 6.7 8.2 12.4-1.1 4.9-5.5 8.3-10.4 8.3zM233.8 669.5H125c-5.8 0-10.5-4.7-10.5-10.5s4.7-10.5 10.5-10.5h108.9c5.8 0 10.5 4.7 10.5 10.5s-4.8 10.5-10.6 10.5zM130 727.4c-4.9 0-9.2-3.4-10.3-8.3-1.2-5.7 2.4-11.3 8.1-12.4l106.5-22.5c5.7-1.3 11.3 2.4 12.4 8.1 1.2 5.7-2.4 11.3-8.1 12.4l-106.5 22.5c-0.6 0.1-1.4 0.2-2.1 0.2z" fill="#7F0518" ></path></symbol><symbol id="icon-niu" viewBox="0 0 1024 1024"><path d="M763.9 338.9s2.6-164.2-53.9-169.8c-56.4-5.5-53.8 155.9-53.8 155.9l107.7 13.9z" fill="#FFC831" ></path><path d="M763.9 349.4c-0.5 0-0.9 0-1.3-0.1l-107.7-13.9c-5.2-0.7-9.1-5-9.2-10.3-0.2-12.4-0.9-122.5 35.7-156.2 8.5-7.8 18.7-11.4 29.7-10.3 64.2 6.3 63.6 162.6 63.3 180.4-0.1 3-1.4 5.8-3.6 7.8-2 1.7-4.4 2.6-6.9 2.6z m-97.2-33.7l86.7 11.2c-0.8-53.4-11.6-144.1-44.4-147.4-4.9-0.5-9.2 1.1-13.4 4.9-23 21.2-28.5 95-28.9 131.3z" fill="#7F0518" ></path><path d="M258.9 338.9s-2.6-164.2 53.9-169.8c56.4-5.5 53.8 155.9 53.8 155.9l-107.7 13.9z" fill="#FFC831" ></path><path d="M258.9 349.4c-2.5 0-4.9-0.9-6.9-2.6-2.3-2-3.6-4.8-3.6-7.8-0.3-17.8-0.8-174 63.3-180.4 11-1.1 21.2 2.5 29.7 10.3 36.6 33.7 35.9 143.7 35.7 156.2-0.1 5.2-4 9.6-9.2 10.3l-107.7 13.9c-0.4 0-0.8 0.1-1.3 0.1z m56.7-170c-0.6 0-1.2 0-1.8 0.1-32.8 3.2-43.6 94-44.4 147.4l86.7-11.2c-0.4-36.3-5.9-110.1-28.9-131.3-3.6-3.4-7.4-5-11.6-5z" fill="#7F0518" ></path><path d="M860 458.8c-35 0-58.5-7.1-67.9-20.6-9.1-12.9-19.8-23.7-30.2-34-29.6-29.5-46.1-46-8.8-85.7 7-2 28.4-7.5 54.3-7.5 39.7 0 71.3 12.4 93.9 36.7 43.8 47.2 48.5 85.4 48.5 100.1-15.8 3.4-54 11-89.8 11z" fill="#FF6A48" ></path><path d="M807.3 321.4c36.7 0 65.7 11.2 86.2 33.4 34.6 37.4 43.3 68.1 45.2 84.6-18.1 3.7-49.1 8.9-78.6 8.9-30.5 0-52.2-5.9-59.3-16.1-9.6-13.7-21.2-25.3-31.4-35.5-29-28.9-38.6-38.4-10.6-69 8.2-2.2 26.7-6.3 48.5-6.3m-0.1-21c-33.7 0-60 8.8-60 8.8-62.7 65.1 2.4 86.8 36.2 135 13.5 19.3 44.4 25.1 76.5 25.1 48.3 0 99.5-13 99.5-13s9.6-50.6-50.6-115.7c-29.6-32.1-69-40.2-101.6-40.2z" fill="#7F0518" ></path><path d="M770.2 342.6s55.6-18.5 88.8 17.2c33.1 35.8 27.8 63.6 27.8 63.6s-78.2 19.9-96.7-6.6-54.3-38.5-19.9-74.2z" fill="#EE3E2B" ></path><path d="M833 441.2c-20.8 0-41.5-4.2-51.5-18.4-4.2-6-9.6-11.3-14.8-16.5-15.6-15.5-37-36.8-4-71 1.2-1.2 2.6-2.1 4.2-2.7 2.5-0.8 62.5-20.2 99.8 20.1 36.3 39.2 30.7 71.3 30.4 72.7-0.8 4-3.8 7.2-7.7 8.2-7.6 1.9-32.1 7.6-56.4 7.6z m-57.1-89.4c-16.2 17.7-10 23.9 5.6 39.5 5.6 5.6 11.9 11.9 17.1 19.4 9.1 12.9 48.5 10.5 77.8 4.3-0.8-9-5.3-26.6-25.2-48.1-24.4-26.4-65-17.7-75.3-15.1z" fill="#7F0518" ></path><path d="M164.1 458.8c-35.8 0-73.9-7.5-89.5-11 0.1-14.8 5.1-53.4 48.4-100.1 22.6-24.4 54.2-36.7 93.9-36.7 26 0 47.3 5.5 54.3 7.5 37.3 39.8 20.8 56.2-8.8 85.7-10.4 10.4-21.2 21.1-30.2 34.1-9.6 13.4-33.1 20.5-68.1 20.5z" fill="#FF6A48" ></path><path d="M216.8 321.4c21.8 0 40.3 4.1 48.6 6.3 28 30.5 18.4 40.1-10.6 69-10.2 10.2-21.8 21.8-31.4 35.5-7.2 10.2-28.8 16.1-59.3 16.1-29.4 0-60.5-5.2-78.6-8.9 1.9-16.6 10.6-47.3 45.2-84.6 20.5-22.2 49.4-33.4 86.1-33.4m0-21c-32.5 0-72 8.1-101.6 40.1C55 405.6 64.6 456.3 64.6 456.3s51.2 13 99.5 13c32.2 0 63-5.8 76.5-25.1 33.8-48.2 98.9-70 36.2-135 0 0-26.2-8.8-60-8.8z" fill="#7F0518" ></path><path d="M253.8 342.6s-55.6-18.5-88.8 17.2c-33.1 35.8-27.8 63.6-27.8 63.6s78.2 19.9 96.7-6.6c18.6-26.5 54.4-38.5 19.9-74.2z" fill="#EE3E2B" ></path><path d="M191.1 441.2c-24.3 0-48.8-5.7-56.4-7.6-4-1-7-4.2-7.7-8.2-0.3-1.3-5.9-33.5 30.4-72.7 37.3-40.3 97.2-20.9 99.8-20.1 1.6 0.5 3.1 1.5 4.2 2.7 32.9 34.2 11.5 55.4-4 71-5.2 5.2-10.6 10.6-14.8 16.5-10 14.2-30.7 18.4-51.5 18.4zM147.6 415c29.3 6.2 68.7 8.7 77.8-4.3 5.2-7.5 11.6-13.8 17.1-19.3 15.7-15.6 21.9-21.8 5.6-39.5-10.2-2.7-50.9-11.4-75.4 15.1-19.8 21.4-24.3 39-25.1 48z" fill="#7F0518" ></path><path d="M840.5 592.2c0 193-147.4 272.6-329.2 272.6s-329.2-79.6-329.2-272.6c0-193 146.2-400 328-400 181.9 0 330.4 207 330.4 400z" fill="#FF6A48" ></path><path d="M511.4 875.3c-212.7 0-339.7-105.8-339.7-283.1 0-193.8 144.7-410.5 338.5-410.5 192 0 340.9 220.7 340.9 410.5-0.1 177.2-127 283.1-339.7 283.1z m-1.2-672.6c-178.8 0-317.5 209.4-317.5 389.5 0 236.6 222.9 262.1 318.7 262.1S830 828.7 830 592.2c0-180.1-139.7-389.5-319.8-389.5z" fill="#7F0518" ></path><path d="M509.9 570.5c-125.8 0-238.8 44.7-318.7 109.3 34.1 127.3 164.5 181.3 320.4 181.3 155.4 0 285.6-53.7 320.1-180.3-81-65.2-195.3-110.3-321.8-110.3z" fill="#FFFFFF" ></path><path d="M511.5 871.6c-177.8 0-298.3-68.9-330.5-189.1-1.1-4 0.3-8.3 3.5-10.9C272.3 600.7 390.9 560 509.9 560c119.8 0 239.5 41 328.3 112.6 3.3 2.6 4.6 6.9 3.5 10.9-32.6 119.6-152.9 188.1-330.2 188.1zM203.2 683.7c43.6 145.1 211.3 166.9 308.3 166.9 96.7 0 263.9-21.8 308.1-165.9-84.6-66-197-103.7-309.7-103.7-111.8 0-223.2 37.4-306.7 102.7z" fill="#7F0518" ></path><path d="M643.4 464.8m-63.6 0a63.6 63.6 0 1 0 127.2 0 63.6 63.6 0 1 0-127.2 0Z" fill="#7F0518" ></path><path d="M627.3 451.9m-29.3 0a29.3 29.3 0 1 0 58.6 0 29.3 29.3 0 1 0-58.6 0Z" fill="#FFFFFF" ></path><path d="M664.9 494.6m-13.4 0a13.4 13.4 0 1 0 26.8 0 13.4 13.4 0 1 0-26.8 0Z" fill="#FFFFFF" ></path><path d="M379.4 464.8m-63.6 0a63.6 63.6 0 1 0 127.2 0 63.6 63.6 0 1 0-127.2 0Z" fill="#7F0518" ></path><path d="M363.4 451.9m-29.3 0a29.3 29.3 0 1 0 58.6 0 29.3 29.3 0 1 0-58.6 0Z" fill="#FFFFFF" ></path><path d="M400.9 494.6m-13.4 0a13.4 13.4 0 1 0 26.8 0 13.4 13.4 0 1 0-26.8 0Z" fill="#FFFFFF" ></path><path d="M596.6 371c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 17-20.6 43.2-22.5 17.9-1.6 35.5 5.9 52.3 21.4 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.5 4.6-14.8 0.6-12.4-11.4-24.8-17-36.6-15.9-16.9 1.2-28.3 14.7-28.4 14.8-2.2 2.7-5.2 4-8.2 4z" fill="#7F0518" ></path><path d="M426.2 371c-2.5 0-5.1-0.9-7.1-2.8-12.3-11.3-24.3-16.6-36.4-15.9-17 1.1-28.5 14.7-28.6 14.8-3.7 4.4-10.3 5.1-14.8 1.4-4.5-3.7-5.1-10.2-1.5-14.7 0.7-0.8 17-20.6 43.2-22.5 18-1.6 35.5 5.9 52.3 21.4 4.3 3.9 4.5 10.6 0.6 14.8-2 2.4-4.9 3.5-7.7 3.5z" fill="#7F0518" ></path><path d="M645.095669 753.087223a35 35 0 1 0 47.47387-51.441536 35 35 0 1 0-47.47387 51.441536Z" fill="#FFC831" ></path><path d="M668.7 772.9c-11.5 0-22.3-4.3-30.8-12.1-8.9-8.2-14.1-19.5-14.6-31.6-0.5-12.1 3.8-23.7 12-32.7 8.2-8.9 19.5-14.1 31.6-14.6 11.9-0.5 23.7 3.8 32.7 12 8.9 8.2 14.1 19.5 14.6 31.6s-3.8 23.8-12 32.7-19.5 14.1-31.6 14.6c-0.6 0.1-1.2 0.1-1.9 0.1z m0.1-70h-1c-6.5 0.3-12.6 3.1-17 7.9-9.2 9.9-8.5 25.5 1.4 34.6 9.9 9.1 25.4 8.5 34.6-1.4 4.4-4.8 6.7-11.1 6.5-17.6-0.3-6.5-3.1-12.6-7.9-17-4.6-4.3-10.4-6.5-16.6-6.5z" fill="#7F0518" ></path><path d="M363.889602 753.07937a35 35 0 1 0 47.473871-51.441536 35 35 0 1 0-47.473871 51.441536Z" fill="#FFC831" ></path><path d="M387.5 772.9c-11.5 0-22.3-4.3-30.8-12.1-8.9-8.2-14.1-19.5-14.6-31.6-0.5-12.1 3.8-23.7 12-32.7 8.2-8.9 19.5-14.1 31.6-14.6 12-0.5 23.7 3.8 32.7 12 8.9 8.2 14.1 19.5 14.6 31.6 0.5 12.2-3.8 23.8-12 32.7s-19.5 14.1-31.6 14.6c-0.6 0.1-1.3 0.1-1.9 0.1z m0.1-70h-1c-6.5 0.3-12.6 3.1-17 7.9-9.2 9.9-8.5 25.5 1.4 34.6 10 9.2 25.5 8.5 34.6-1.4 4.4-4.8 6.7-11.1 6.5-17.6-0.3-6.5-3-12.6-7.9-17-4.6-4.3-10.4-6.5-16.6-6.5z" fill="#7F0518" ></path></symbol><symbol id="icon-laohu" viewBox="0 0 1024 1024"><path d="M936.7 240.6c32.6 64.2-0.6 146.6-74.1 183.9-73.5 37.3-159.5 15.4-192.1-48.8-32.6-64.2 0.6-146.6 74.1-183.9 73.5-37.3 159.5-15.4 192.1 48.8z" fill="#FFC831" ></path><path d="M788.1 453.6c-13.4 0-26.6-1.6-39.5-4.9-39.4-10-70.6-34.2-87.8-68.1-17.2-33.9-18.4-73.4-3.2-111.1 15-37.2 44.1-68.3 82-87.5 78.8-40 171.5-15.9 206.8 53.6 35.3 69.5-0.1 158.6-78.9 198.6-25.3 12.9-52.5 19.4-79.4 19.4z m31.1-269c-23 0-47 5.5-69.7 17-33.2 16.8-58.7 43.9-71.7 76.2-12.8 31.8-12 64.8 2.4 93 14.3 28.2 40.5 48.4 73.7 56.8 33.8 8.6 70.6 4 103.8-12.8 68-34.5 99.1-110.4 69.3-169.2-19.9-39.2-61.9-61-107.8-61z" fill="#7F0518" ></path><path d="M773.7 402.6c-26.2 0-48.2-10.8-60.2-29.7-21.7-34.2-4.3-84.3 38.8-111.7 17.9-11.4 37.8-17.4 57.4-17.4 26.3 0 48.2 10.8 60.2 29.7 21.7 34.2 4.3 84.3-38.8 111.7-17.9 11.3-37.7 17.4-57.4 17.4z" fill="#FF6A48" ></path><path d="M809.8 254.7c22.4 0 41 9 50.9 24.6 18.5 29.1 2.6 72.4-35.5 96.6-15.9 10.1-34.2 15.7-51.6 15.7-22.4 0-41-9-51-24.6-18.5-29.1-2.6-72.4 35.5-96.6 16-10.2 34.4-15.7 51.7-15.7m0-21.9c-20.8 0-43 6.2-63.3 19.1-48.3 30.7-67.2 87.5-42.2 126.8 14.5 22.8 40.6 34.8 69.4 34.8 20.8 0 43-6.2 63.3-19.1 48.3-30.7 67.2-87.5 42.2-126.8-14.5-22.8-40.6-34.8-69.4-34.8z" fill="#7F0518" ></path><path d="M87.5 240.6c-32.6 64.2 0.6 146.6 74.1 183.9 73.5 37.3 159.5 15.4 192.1-48.8 32.6-64.2-0.6-146.6-74.1-183.9-73.5-37.3-159.5-15.4-192.1 48.8z" fill="#FFC831" ></path><path d="M236.1 453.6c-26.9 0-54.2-6.6-79.5-19.4-78.7-40-114.1-129-78.9-198.6 35.3-69.5 128-93.6 206.8-53.6 78.8 40 114.1 129.1 78.9 198.6-17.2 33.9-48.4 58.1-87.8 68.1-12.8 3.3-26.1 4.9-39.5 4.9zM97.2 245.5c-29.8 58.8 1.3 134.7 69.3 169.2 33.2 16.8 70 21.4 103.7 12.8 33.2-8.4 59.4-28.6 73.7-56.8 29.8-58.8-1.3-134.7-69.3-169.2-67.9-34.5-147.6-14.7-177.4 44z" fill="#7F0518" ></path><path d="M250.5 402.6c-19.7 0-39.5-6-57.4-17.4-43.1-27.4-60.6-77.5-38.9-111.7 12-18.9 33.9-29.7 60.2-29.7 19.7 0 39.5 6 57.4 17.4 43.1 27.4 60.6 77.5 38.8 111.7-11.9 18.8-33.9 29.7-60.1 29.7z" fill="#FF6A48" ></path><path d="M214.4 254.7c17.3 0 35.6 5.6 51.6 15.7 38.1 24.2 54 67.5 35.5 96.6-9.9 15.7-28.5 24.6-51 24.6-17.3 0-35.6-5.6-51.6-15.7-38-24.2-54-67.5-35.5-96.6 10-15.7 28.6-24.6 51-24.6m0-21.9c-28.8 0-54.9 11.9-69.4 34.8-25 39.3-6.1 96.1 42.2 126.8 20.3 12.9 42.5 19.1 63.3 19.1 28.8 0 54.9-11.9 69.4-34.8 25-39.3 6.1-96.1-42.2-126.8-20.3-12.8-42.5-19.1-63.3-19.1z" fill="#7F0518" ></path><path d="M907.2 539.1c0 180.8-179.4 327.4-400.8 327.4S105.6 719.9 105.6 539.1c0-180.8 179.4-327.3 400.8-327.3 221.4-0.1 400.8 146.5 400.8 327.3z" fill="#FFC831" ></path><path d="M506.4 877.3c-227 0-411.7-151.8-411.7-338.3s184.7-338.3 411.7-338.3S918.1 352.5 918.1 539c0 186.6-184.7 338.3-411.7 338.3z m0-654.7c-215 0-389.9 141.9-389.9 316.4 0 174.5 174.9 316.4 389.9 316.4s389.9-142 389.9-316.4c0-174.4-174.9-316.4-389.9-316.4z" fill="#7F0518" ></path><path d="M683.7 500.4m-69.9 0a69.9 69.9 0 1 0 139.8 0 69.9 69.9 0 1 0-139.8 0Z" fill="#7F0518" ></path><path d="M666.1 486.3m-32.2 0a32.2 32.2 0 1 0 64.4 0 32.2 32.2 0 1 0-64.4 0Z" fill="#FFFFFF" ></path><path d="M707.4 533.2m-14.7 0a14.7 14.7 0 1 0 29.4 0 14.7 14.7 0 1 0-29.4 0Z" fill="#FFFFFF" ></path><path d="M334.1 500.4m-69.9 0a69.9 69.9 0 1 0 139.8 0 69.9 69.9 0 1 0-139.8 0Z" fill="#7F0518" ></path><path d="M316.5 486.3m-32.2 0a32.2 32.2 0 1 0 64.4 0 32.2 32.2 0 1 0-64.4 0Z" fill="#FFFFFF" ></path><path d="M357.8 533.2m-14.7 0a14.7 14.7 0 1 0 29.4 0 14.7 14.7 0 1 0-29.4 0Z" fill="#FFFFFF" ></path><path d="M727.8 400.5c-2.6 0-5.3-1-7.4-2.9-13.7-12.6-27.7-18.5-40.4-17.7-19 1.3-31.8 16.4-31.9 16.6-3.9 4.7-10.7 5.3-15.4 1.5-4.6-3.8-5.4-10.6-1.6-15.3 0.7-0.9 18.6-22.5 47-24.5 19.4-1.3 38.7 6.4 57 23.4 4.4 4.1 4.7 11 0.7 15.4-2.1 2.3-5 3.5-8 3.5z" fill="#7F0518" ></path><path d="M297.4 400.5c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.9 18.6-22.5 47-24.5 19.3-1.3 38.7 6.4 57 23.4 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-13.7-12.6-27.1-18.5-40.7-17.6-18.8 1.4-31.5 16.3-31.6 16.5-2.1 2.6-5.3 4-8.4 4z" fill="#7F0518" ></path><path d="M575.9 627.3c0 23.6-27.4 42.8-61.2 42.8-33.8 0-61.2-19.2-61.2-42.8 0-23.7 27.4-42.8 61.2-42.8 33.8-0.1 61.2 19.1 61.2 42.8z" fill="#7F0518" ></path><path d="M449.5 754.1c-4.4 0-8.8-0.4-13.1-1.2-40.2-7.5-60.5-47.6-61.4-49.3-2.7-5.4-0.5-11.9 4.9-14.6 5.4-2.7 12-0.5 14.7 4.9 0.2 0.3 16.6 32.2 46 37.6 19.2 3.6 40.4-4.7 63.2-24.4v-52.5c0-6 4.9-10.9 10.9-10.9s10.9 4.9 10.9 10.9V712c0 3.1-1.3 6-3.6 8.1-24.8 22.6-49.1 34-72.5 34z" fill="#7F0518" ></path><path d="M580 754.1c-23.3 0-47.7-11.4-72.6-34.1-4.5-4.1-4.8-11-0.7-15.4s11-4.8 15.4-0.7c24.2 22 46.6 31.3 66.8 27.5 29.5-5.4 45.8-37.3 46-37.6 2.7-5.4 9.3-7.5 14.7-4.9 5.4 2.7 7.6 9.2 4.9 14.6-0.9 1.7-21.2 41.8-61.4 49.3-4.4 0.9-8.7 1.3-13.1 1.3z" fill="#7F0518" ></path><path d="M885.8 442.6c-47.6 31.5-53.1 33.3-94.3 33.4-5.2 0-12 2.4-11.9 7.6 0.1 4.2 4.8 6.4 8.8 7.6 29.9 8.3 63.7 11.1 121.3-22.2M895.1 501.1c-48.9 29.5-75.7 39.4-116.8 37.8-5.2-0.2-12.1 1.9-12.2 7.1-0.1 4.2 4.5 6.6 8.5 7.9 29.5 9.5 81.7 7.1 140.6-23.7" fill="#7F0518" ></path><path d="M129 442.6c47.6 31.5 53.1 33.3 94.3 33.4 5.2 0 12 2.4 11.9 7.6-0.1 4.2-4.8 6.4-8.8 7.6-29.9 8.3-63.7 11.1-121.3-22.2M119.7 501.1c48.9 29.5 75.7 39.4 116.8 37.8 5.2-0.2 12.1 1.9 12.2 7.1 0.1 4.2-4.5 6.6-8.5 7.9-29.5 9.5-81.7 7.1-140.6-23.7" fill="#7F0518" ></path><path d="M404.7 313.6c86.5-36.1 136.4-33.4 212.2 7.5 7.1 3.8 12.7 10.2 9.6 13.5-1.7 1.7-5.8 4.2-13.7 0.5-9.8-4.7-21.1-9.8-38.2-12.5-51-8.2-92.4-12.1-163.7 8.4-4.3 1.2-17.4 6.7-20.1 0.1-1.9-4.6-2.2-9.7 13.9-17.5z" fill="#7F0518" ></path><path d="M390.7 264.2c96.6-35.9 152.3-33 237.1 8.1 7.9 3.8 14.2 10.3 10.8 13.5-1.8 1.7-6.5 4.2-15.3 0.4-11-4.7-23.6-9.8-42.8-12.7-57-8.4-103.3-12.4-182.9 8-4.8 1.2-19.4 6.6-22.4 0-2.1-4.4-2.5-9.4 15.5-17.3z" fill="#7F0518" ></path><path d="M433.9 354.2c45.9-17.2 93.5-26.9 156.7 5.8 7.8 4 14.5 14.8 11 18-1.8 1.7-6.5 4.2-15.3 0.4-11-4.7-73.4-23.6-148-2.7-4.8 1.3-19.4 6.6-22.4 0-2-4.5 0-13.7 18-21.5z" fill="#7F0518" ></path><path d="M492.6 239.3c0.9 34.1 1.7 68.2 2.6 102.4 0.2 6.4 0.8 13.5 7.5 17.7 12.4-6.1 14.6-18.2 15.2-28.8 2-31.7 0-54.3 3.1-90.3" fill="#7F0518" ></path></symbol><symbol id="icon-tuzi" viewBox="0 0 1024 1024"><path d="M783.7 527.8S1008.8 166.9 876 115C743.1 63.1 610.2 455.4 610.2 455.4l173.5 72.4z" fill="#FFFFFF" ></path><path d="M783.7 537.9c-1.3 0-2.6-0.3-3.9-0.8l-173.5-72.4c-4.9-2.1-7.4-7.6-5.7-12.6 4-11.8 99.5-290.2 213-343.1 22.7-10.5 44.9-11.7 66.1-3.5 21 8.2 35.4 23.6 42.7 45.7C959.5 263 799.1 522.1 792.3 533.1c-1.9 3.1-5.2 4.8-8.6 4.8zM623 449.8l156.6 65.3c26-43.1 154.5-264.3 123.6-357.4-5.4-16.3-15.5-27.2-30.9-33.2-16-6.3-32.4-5.3-50.1 3-95 44.2-181.8 273.9-199.2 322.3z" fill="#7F0518" ></path><path d="M766.6 462.4s137.6-228.3 72.3-261.1c-65.3-32.8-157.3 215.3-157.3 215.3l85 45.8z" fill="#FFC831" ></path><path d="M766.6 472.6c-1.6 0-3.3-0.4-4.8-1.2l-85-45.8c-4.5-2.4-6.5-7.7-4.7-12.5 7.4-20 74.5-196.6 138.4-221.7 11.6-4.6 22.7-4.3 33 0.9 10.1 5.1 17 13.8 20.5 25.9 19.4 67.2-77.6 231-88.7 249.5-1.9 3.1-5.3 4.9-8.7 4.9z m-72.3-60.7l68.6 36.9c31.4-53.8 95.3-178 81.7-225.1-1.9-6.6-5.2-10.9-10.2-13.4-5-2.5-10.2-2.6-16.4-0.1-44.8 17.7-101.7 144.5-123.7 201.7z" fill="#7F0518" ></path><path d="M240.3 527.8S15.2 166.9 148 115c132.9-51.9 265.8 340.4 265.8 340.4l-173.5 72.4z" fill="#FFFFFF" ></path><path d="M240.3 537.9c-3.4 0-6.7-1.7-8.6-4.8-6.8-11-167.2-270-130.1-381.9 7.3-22.1 21.7-37.5 42.7-45.7 21.2-8.3 43.4-7.1 66.1 3.5 113.5 52.9 208.9 331.3 213 343.1 1.7 5-0.8 10.6-5.7 12.6l-173.5 72.4c-1.3 0.6-2.6 0.8-3.9 0.8z m-67.6-417.5c-7.1 0-14.1 1.3-21 4-15.4 6-25.5 16.9-30.9 33.2-30.8 93.2 97.7 314.3 123.6 357.5L401 449.8c-17.4-48.4-104.2-278.1-199.2-322.3-10-4.7-19.7-7.1-29.1-7.1z" fill="#7F0518" ></path><path d="M257.4 462.4s-137.6-228.3-72.3-261.1c65.3-32.8 157.3 215.3 157.3 215.3l-85 45.8z" fill="#FFC831" ></path><path d="M257.4 472.6c-3.4 0-6.8-1.8-8.7-4.9-11.1-18.5-108.2-182.3-88.7-249.5 3.5-12.1 10.4-20.8 20.5-25.9 10.3-5.2 21.4-5.4 33-0.9 63.9 25.1 130.9 201.6 138.4 221.7 1.8 4.7-0.2 10.1-4.7 12.5l-84.9 45.8c-1.6 0.8-3.2 1.2-4.9 1.2z m-59.9-264.1c-2.7 0-5.3 0.6-7.9 1.9-5 2.5-8.3 6.8-10.2 13.4-13.6 47.1 50.3 171.2 81.7 225.1l68.6-36.9c-22.1-57.2-78.9-184-123.6-201.6-3.1-1.3-5.9-1.9-8.6-1.9z" fill="#7F0518" ></path><path d="M871.3 654.7c0.2 180.4-162.4 254.9-363 255.1-200.6 0.2-363.3-74.1-363.5-254.5-0.1-180.4 167.2-366.7 367.8-366.9 200.6-0.1 358.5 185.9 358.7 366.3z" fill="#FFFFFF" ></path><path d="M507.5 919.9c-107.2 0-197.6-21.1-261.6-61.1-73.8-46.1-111.3-114.6-111.3-203.5-0.1-177.8 161.5-376.8 378-377h0.3c210.8 0 368.4 198.6 368.6 376.4 0.2 165.9-139.4 265.1-373.2 265.3-0.3-0.1-0.5-0.1-0.8-0.1z m5.3-621.3h-0.3c-165.5 0.2-357.8 156-357.7 356.7 0.1 81.5 34.3 144.2 101.8 186.3 60.7 38 147.5 58 250.9 58h0.7c106.2-0.1 353.1-24.2 352.9-244.9-0.2-168.2-149.1-356.1-348.3-356.1z" fill="#7F0518" ></path><path d="M678.5 568m-68.2 0a68.2 68.2 0 1 0 136.4 0 68.2 68.2 0 1 0-136.4 0Z" fill="#7F0518" ></path><path d="M661.3 554.3m-31.4 0a31.4 31.4 0 1 0 62.8 0 31.4 31.4 0 1 0-62.8 0Z" fill="#FFFFFF" ></path><path d="M701.6 600m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF" ></path><path d="M337.5 568m-68.2 0a68.2 68.2 0 1 0 136.4 0 68.2 68.2 0 1 0-136.4 0Z" fill="#7F0518" ></path><path d="M320.4 554.3m-31.4 0a31.4 31.4 0 1 0 62.8 0 31.4 31.4 0 1 0-62.8 0Z" fill="#FFFFFF" ></path><path d="M360.6 600m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF" ></path><path d="M635.5 470.1c-2.2 0-4.5-0.7-6.4-2.3-4.4-3.5-5-9.9-1.5-14.3 0.7-0.9 18-21.7 45.5-23.7 18.8-1.3 37.4 6.2 55.2 22.6 4.1 3.8 4.4 10.2 0.6 14.3-3.8 4.1-10.2 4.4-14.4 0.6-13.5-12.4-26.6-18.3-40-17.3-18.6 1.3-31.1 16.1-31.2 16.3-2 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518" ></path><path d="M301.7 470.1c-2.2 0-4.5-0.7-6.4-2.3-4.4-3.5-5-9.9-1.5-14.3 0.7-0.9 18-21.7 45.5-23.7 18.8-1.3 37.4 6.2 55.2 22.6 4.1 3.8 4.4 10.2 0.6 14.3-3.8 4.1-10.2 4.4-14.4 0.6-13.5-12.4-26.5-18.3-40-17.3-18.6 1.3-31.1 16.1-31.2 16.3-1.9 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518" ></path><path d="M571.6 674.4c0 23.1-26.7 41.8-59.7 41.8s-59.6-18.7-59.6-41.8c0-23.1 26.7-41.8 59.6-41.8s59.7 18.8 59.7 41.8z" fill="#7F0518" ></path><path d="M459 796c-5.1 0-9.9-0.9-14.4-2.8-27.8-11.3-30.8-52-31.1-56.6-0.3-5.6 3.9-10.4 9.5-10.7 6.1-0.3 10.4 4 10.7 9.5 0.5 8.4 5 33.5 18.6 39 10.8 4.4 28.3-3.4 49.5-22V701c0-5.6 4.5-10.1 10.1-10.1S522 695.4 522 701v56c0 2.9-1.2 5.6-3.3 7.5-23.1 21.1-42.8 31.5-59.7 31.5z" fill="#7F0518" ></path><path d="M564.4 796c-16.5 0-36.1-10.4-59.2-31.5-4.1-3.8-4.5-10.2-0.7-14.3 3.8-4.1 10.2-4.4 14.3-0.7 22.7 20.7 41.2 29.5 51.9 24.9 12.9-5.4 16.6-30.6 16.9-39 0.2-5.5 4.7-9.8 10.1-9.8h0.3c5.6 0.2 10 4.9 9.8 10.5-0.2 4.6-2.2 45.5-29.3 57-4.4 1.9-9.1 2.9-14.1 2.9z" fill="#7F0518" ></path><path d="M701.9 682.4a62.2 40.7 0 1 0 124.4 0 62.2 40.7 0 1 0-124.4 0Z" fill="#FF6A48" ></path><path d="M197.7 682.4a62.2 40.7 0 1 0 124.4 0 62.2 40.7 0 1 0-124.4 0Z" fill="#FF6A48" ></path></symbol><symbol id="icon-long" viewBox="0 0 1024 1024"><path d="M619.5 320.6c-1.1-0.2-2.3-0.4-3.4-0.8-10.4-3.5-16-14.8-12.4-25.2 1.6-4.9 41.6-120.7 141.2-193.9 8.9-6.5 21.3-4.6 27.8 4.3 6.5 8.8 4.6 21.3-4.2 27.8-89.6 65.8-126.8 173.5-127.1 174.5-3.3 9.2-12.6 14.7-21.9 13.3z" fill="#7F0518" ></path><path d="M784.4 243.3c-7-1.1-13.1-5.8-15.7-12.8-0.8-2-18.1-46.1-62.9-49-10.9-0.6-19.3-10-18.7-21s10.1-19.3 21-18.7c72.3 4.1 96.9 72.2 97.9 75.1 3.7 10.3-1.6 21.7-12 25.4-3.1 1.2-6.4 1.5-9.6 1zM720.1 280.9c-7.3-1.1-13.7-6.3-16-13.8-0.9-2.7-9.2-24.6-38.8-24.6-10.8 0.1-19.9-8.9-19.9-19.8 0-11 8.9-19.9 19.8-19.9 48.5-0.1 71.5 34.5 76.9 52.7 3.1 10.5-2.9 21.6-13.4 24.7-2.9 0.9-5.8 1.1-8.6 0.7zM406 320.6c1.1-0.2 2.3-0.4 3.4-0.8 10.4-3.5 16-14.8 12.4-25.2-1.6-4.9-41.6-120.7-141.2-193.9-8.9-6.5-21.3-4.6-27.8 4.3-6.5 8.8-4.6 21.3 4.2 27.8 89.6 65.8 126.8 173.5 127.1 174.5 3.2 9.2 12.5 14.7 21.9 13.3z" fill="#7F0518" ></path><path d="M241 243.3c7-1.1 13.1-5.8 15.7-12.8 0.8-2 18.1-46.1 62.9-49 10.9-0.6 19.3-10 18.7-21-0.6-11-10.1-19.3-21-18.7-72.3 4.1-96.9 72.2-97.9 75.1-3.7 10.3 1.6 21.7 12 25.4 3.1 1.2 6.4 1.5 9.6 1zM305.3 280.9c7.3-1.1 13.7-6.3 16-13.8 0.9-2.7 9.2-24.6 38.8-24.6 10.8 0.1 19.9-8.9 19.9-19.8 0-11-8.9-19.9-19.8-19.9-48.5-0.1-71.5 34.5-76.9 52.7-3.1 10.5 2.9 21.6 13.4 24.7 2.9 0.9 5.8 1.1 8.6 0.7z" fill="#7F0518" ></path><path d="M623.1 913.1c-29.4-8.2-80.3-49.3-111-49.3s-81.6 41-111 49.3C281.8 946.5 165 817.8 174.7 702c5.7-67.5 58.7-201.3 74.1-267.4C277.1 312.7 379.5 223.5 504 223.5h16.1c124.5 0 228.3 90.3 255.2 211.1 14.7 66.3 68.4 200 74.1 267.4 9.8 115.8-107.1 244.5-226.3 211.1z" fill="#FFC831" ></path><path d="M661.5 928.6c-13.9 0-27.7-1.9-41.2-5.6-13.3-3.7-29.5-12.9-46.6-22.6-21.7-12.3-46.3-26.3-61.7-26.3-15.4 0-40 14-61.7 26.3-17.1 9.7-33.2 18.9-46.5 22.6-52.2 14.5-109.2 0.5-156.5-38.6-55.8-46.2-88.4-118.1-82.9-183.3 3.6-43.1 25.9-112 45.5-172.8 11.9-36.8 23.1-71.5 28.8-96.1 30-129 139.1-219.1 265.2-219.1H520c127.5 0 236.5 90.1 265.2 219.2 5.7 25.5 17.4 61.7 29.8 100 20.1 62.2 41 126.6 44.5 168.8 5.5 65.2-27.1 137.1-82.9 183.3-34.9 29-75.3 44.2-115.1 44.2z m-35.7-25.3c46.4 12.9 95.3 0.6 137.9-34.6 50.8-42 80.5-107.1 75.5-165.8-3.3-39.8-24.7-105.9-43.6-164.2-12.6-38.8-24.4-75.4-30.3-101.9-26.6-119.6-127.4-203.1-245.2-203.1H504c-116.6 0-217.4 83.6-245.2 203.2-5.9 25.5-17.3 60.6-29.3 97.8-19.3 59.7-41.2 127.4-44.6 168.2-4.9 58.7 24.7 123.7 75.5 165.7 42.6 35.2 91.6 47.6 137.9 34.6 10.9-3 26-11.6 41.9-20.7 25.1-14.3 51-29 71.8-29 20.8 0 46.7 14.7 71.8 29 16 9.1 31.1 17.7 42 20.8z" fill="#7F0518" ></path><path d="M681.7 484.1m-67.9 0a67.9 67.9 0 1 0 135.8 0 67.9 67.9 0 1 0-135.8 0Z" fill="#7F0518" ></path><path d="M664.6 470.3m-31.3 0a31.3 31.3 0 1 0 62.6 0 31.3 31.3 0 1 0-62.6 0Z" fill="#FFFFFF" ></path><path d="M704.7 515.9m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF" ></path><path d="M342.4 484.1m-67.9 0a67.9 67.9 0 1 0 135.8 0 67.9 67.9 0 1 0-135.8 0Z" fill="#7F0518" ></path><path d="M325.3 470.3m-31.3 0a31.3 31.3 0 1 0 62.6 0 31.3 31.3 0 1 0-62.6 0Z" fill="#FFFFFF" ></path><path d="M365.4 515.9m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF" ></path><path d="M638.9 386.7c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.7-0.9 17.9-21.7 45.4-23.6 18.8-1.4 37.3 6.3 55.1 22.6 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.4-14.5 0.6-13.4-12.3-26.3-18.1-39.7-17.2-18.4 1.3-30.8 16-30.9 16.1-2 2.4-5 3.7-8 3.7z" fill="#7F0518" ></path><path d="M392.3 386.7c-2.5 0-5-0.9-6.9-2.7-13.3-12.3-26.5-18.2-39.5-17.2-18.6 1.2-31.1 16-31.2 16.2-3.6 4.3-10.1 5-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.7-0.9 18-21.7 45.4-23.6 18.7-1.4 37.3 6.3 55.1 22.6 4.2 3.8 4.4 10.3 0.6 14.5-2 2.1-4.8 3.2-7.6 3.2z" fill="#7F0518" ></path><path d="M650.9 776.9a41.8 27.4 0 1 0 83.6 0 41.8 27.4 0 1 0-83.6 0Z" fill="#FF6A48" ></path><path d="M692.7 814.6c-29.2 0-52.1-16.6-52.1-37.7s22.9-37.7 52.1-37.7 52.1 16.6 52.1 37.7-22.9 37.7-52.1 37.7z m0-54.9c-18.1 0-31.6 9.1-31.6 17.2s13.5 17.2 31.6 17.2 31.6-9.1 31.6-17.2c0-8.2-13.5-17.2-31.6-17.2z" fill="#7F0518" ></path><path d="M279 776.9a41.8 27.4 0 1 0 83.6 0 41.8 27.4 0 1 0-83.6 0Z" fill="#FF6A48" ></path><path d="M320.8 814.6c-29.2 0-52.1-16.6-52.1-37.7s22.9-37.7 52.1-37.7 52.1 16.6 52.1 37.7c-0.1 21.1-22.9 37.7-52.1 37.7z m0-54.9c-18.1 0-31.6 9.1-31.6 17.2s13.5 17.2 31.6 17.2 31.6-9.1 31.6-17.2c-0.1-8.2-13.6-17.2-31.6-17.2z" fill="#7F0518" ></path><path d="M404.8 309.3c8.4-2.9 15-9.7 21.9-15.7 6.9-6 15-11.4 23.8-10.7 11.3 1 19.4 11.8 29.4 17.7 12.9 7.6 29.8 6.3 41.6-3.1 7-5.6 12.7-14 21.3-15.8 11.7-2.4 21.6 8.4 31.3 15.7 24.7 18.5 73 11.8 84.2-6.6 9.3-15.2 9.4-32.5-0.7-42.6-8.9-8.9-23.4-10.3-30.1-21.1-3.4-5.5-4.7-12.3-6.9-18.5-11.3-32-30.7-11.3-42.1-30.6-3.1-5.3 0.8-14.8-11.1-24.6-8.8-7.3-39.8 11.9-56.5-16.5-4.9 14.2-23.6 22-32.3 25.1-15.6 5.7-27-9.2-39.9 1.9-8.5 7.2-8 21-12.5 31.6-10.4 24.1-29.1 9.1-48.4 24.1-9.3 7.3-17 20.9-17.5 33.3-0.5 12.3 0.2 23.3 6.1 33.9 5.6 10.2 26.8 26.4 38.4 22.5z" fill="#FF6A48" ></path><path d="M401.1 320.1c-16.9 0-37.4-16.8-43.7-28.3-7.3-13.3-7.9-26.8-7.3-39.3 0.6-14.7 9.4-31.5 21.5-40.9 10.5-8.2 20.8-9.4 29-10.3 9.2-1.1 12.7-1.4 16.3-9.8 1.4-3.2 2.2-6.8 3-10.3 2-8.5 4.3-18.1 12.3-25 11.1-9.5 22.5-6.6 30.1-4.6 5.6 1.5 9.2 2.3 13 0.9 19.5-7.2 24.8-14.9 26.1-18.8 1.3-3.8 4.7-6.5 8.7-6.8 4.3-0.4 7.9 1.6 9.9 5 7.1 12 16.5 12 31.1 10.4 8.2-0.9 16.8-1.8 23.1 3.5 11.2 9.2 12.4 19 13.1 24.9 0.1 1 0.2 2 0.5 2.8 2.1 3.5 4 3.9 10.3 4.8 9.5 1.3 23.9 3.2 32.4 27.3 0.7 2 1.3 4.1 2 6.2 1.2 3.9 2.3 7.6 4 10.3 2.2 3.6 6.9 5.9 12.3 8.6 5.3 2.6 11.3 5.6 16.4 10.6 13.4 13.3 14.3 35.5 2.3 55.2-6.1 10-19 17.4-36.3 20.7-18.3 3.5-44.5 2.4-62.9-11.3-2-1.5-4-3.1-6-4.7-6.1-5-12.4-10.2-17.1-9.2-3.1 0.6-6.5 4-10.2 7.5-2.2 2.2-4.4 4.3-6.8 6.2-15.2 12.2-36.6 13.8-53.3 4-3.8-2.3-7.5-5.1-11-8-5.2-4.2-9.8-7.9-14.1-8.3-3.8-0.4-9.4 2.3-16.2 8.2l-3.3 2.9c-6.1 5.5-13 11.7-22 14.7-2.4 0.6-4.8 0.9-7.2 0.9z m3.7-10.8h0.3-0.3zM449.6 170c-1.7 0-2.8 0.5-4.2 1.7-2.9 2.5-4.2 8.1-5.7 14.1-1.1 4.7-2.3 9.4-4.1 13.7-8.3 19.3-22.5 20.9-32.8 22.1-6.8 0.8-12.7 1.4-18.7 6.1-7.4 5.8-13.3 16.8-13.6 25.6-0.5 11 0.2 20.1 4.8 28.5 4.6 8.4 21.4 19 26 17.7 5-1.7 9.8-6 14.9-10.6l3.5-3.1c7.1-6.2 18.1-14.2 31.5-13.1 10.6 1 18.3 7.2 25.2 12.8 2.8 2.3 5.6 4.5 8.5 6.3 9.2 5.4 21.6 4.5 30-2.3 1.8-1.5 3.6-3.2 5.3-4.9 5.3-5.2 11.4-11.1 20.3-13 14.3-3 25.3 6.1 34.3 13.4 1.8 1.4 3.5 2.9 5.3 4.2 10.7 8 29 11 46.7 7.6 13.2-2.5 20.4-7.6 22.6-11.2 6.9-11.2 7.2-23.6 0.8-30-2.7-2.7-6.7-4.7-11-6.8-7.2-3.6-15.3-7.6-20.6-16.2-3.1-5-4.7-10.4-6.1-15.2-0.5-1.8-1.1-3.5-1.7-5.2-4.3-12.2-8.1-12.7-15.8-13.7-7.2-1-18-2.4-25.5-15.1-2.1-3.5-2.5-7.1-2.9-10.3-0.5-4.4-0.9-7.6-5.9-11.6-0.2 0.3-4.6 0.8-7.8 1.1-10.9 1.2-27.6 3-41.2-8.5-6.7 7-16.7 12.9-29.7 17.6-10.1 3.7-18.9 1.4-25.2-0.3-3.4-0.8-5.5-1.4-7.2-1.4z" fill="#7F0518" ></path><path d="M866.5 705.5c-25.8 0-49.8-6.5-61.2-11.6-5.2-2.3-7.5-8.4-5.2-13.6 2.3-5.2 8.4-7.5 13.6-5.2 14.8 6.6 57.8 16.6 89.5 3.3 16.1-6.8 27-18.4 33.3-35.5 7.9-21.7-3.4-39.9-18.2-48.3-5.2-3-16.9-7.1-27.7-4.1-6.7 1.9-11.8 6.4-15.6 13.6-4.1 7.6-3.2 15.2 2.4 20.4 4.9 4.5 16.7 3.6 21.8-1.8 4-4.1 10.4-4.2 14.5-0.3 4.1 3.9 4.2 10.4 0.3 14.5-12.9 13.5-37.6 14.9-50.7 2.6-12.4-11.5-14.9-29.2-6.5-45 6.4-12 16.1-20.2 28-23.6 16.3-4.7 33.6 0.3 43.6 6 21.6 12.3 39.3 40.4 27.3 73.2-8.3 22.5-23.2 38.4-44.6 47.4-14 5.8-29.6 8-44.6 8z" fill="#7F0518" ></path><path d="M156.7 706.3c-15 0-30.6-2.2-44.6-8.1-21.3-9-36.3-24.9-44.6-47.4-12-32.8 5.7-60.9 27.3-73.2 9.9-5.7 27.4-10.7 43.6-6 11.9 3.4 21.6 11.6 28 23.6 8.4 15.8 5.9 33.5-6.5 45-13 12.2-37.6 11-50.7-2.6-3.9-4.1-3.8-10.6 0.3-14.5 4.1-3.9 10.6-3.8 14.5 0.3 5.1 5.4 16.9 6.3 21.8 1.8 5.6-5.2 6.4-12.8 2.4-20.4-3.8-7.2-8.9-11.6-15.6-13.5-10.8-3.2-22.5 1.1-27.8 4.1-14.8 8.4-26.1 26.6-18.2 48.3 6.3 17.1 17.2 28.8 33.3 35.5 31.7 13.4 74.7 3.4 89.4-3.3 5.1-2.4 11.2 0 13.5 5.2 2.3 5.2 0 11.2-5.2 13.6-11.1 5.1-35.1 11.6-60.9 11.6z" fill="#7F0518" ></path></symbol><symbol id="icon-she" viewBox="0 0 1024 1024"><path d="M536.2 800.4h-50.8c-141.8 0-201.8-127.5-257.8-257.8C83.7 207.5 375 98.5 516.7 103.8c170 6.4 408.6 84.4 277.4 438.7-49.3 133-141.8 257.9-257.9 257.9z" fill="#FF6A48" ></path><path d="M536.2 809.8h-50.8c-153.3 0-216-146.1-266.5-263.5-54.4-126.7-53.2-232.8 3.5-315.5C294.8 125.3 438.8 91.4 517.1 94.4c77.3 2.9 217.1 22.9 285.1 124.6 52 77.8 52.2 187.7 0.8 326.7-47.4 127.7-142.3 264.1-266.8 264.1z m-29-696.7c-76.1 0-203.9 33.1-269.1 128.3-52.9 77.1-53.4 177.1-1.7 297.5 61.3 142.8 118.6 252 249.1 252h50.8c114.8 0 203.9-130 249-251.7 49.3-133.1 49.7-237.2 1.3-309.7C723.1 134.8 590 116 516.4 113.3c-3-0.2-6.1-0.2-9.2-0.2z" fill="#7F0518" ></path><path d="M517.6 916.8c-15 0-27.4-6.9-36.1-19.8-10.3 9.8-21.2 12.2-29.5 12.2-4.1 0-8.5-0.6-12.8-1.8-42.1-11.6-42.3-59.8-36.4-83.6 1-4.2 4.8-7.2 9.1-7.2h0.9c4.6 0.4 8.3 4.2 8.5 8.9 0.1 1.6 2.6 40 29.9 40.9 18.5 0 28.4-57.5 28.4-99 0-2.6 1.1-5.1 3-6.9 1.7-1.6 4-2.5 6.4-2.5 0.2 0 16.7 1.3 16.7 1.3 4.6 0.4 8.3 4 8.6 8.7 2.1 27.1-3.7 60.3-6.7 78.1l-1.3 7.9c-0.8 5.4 0.6 11 3.7 15.1 1.5 2 4.1 4.5 7.8 5 1.3 0.2 2.6 0.3 3.9 0.3 24.2 0 32.3-35.3 32.4-35.7 1-4.3 4.8-7.4 9.2-7.4h0.7c4.7 0.3 8.4 4 8.7 8.7 1.8 24.5-6.2 72-49.7 76.5-1.9 0.2-3.7 0.3-5.4 0.3z" fill="#FFC831" ></path><path d="M489 767.4l15.9 1.3c2.4 31.2-6.4 72.8-8 84-2 14.3 6.6 29 19.6 30.8 1.8 0.2 3.5 0.3 5.1 0.3 32.1 0 41.6-43.1 41.6-43.1s4.6 61.7-41.3 66.4c-1.5 0.2-2.9 0.2-4.3 0.2-16.3 0-27.8-10.1-34.3-27.6-8 12.8-18.6 19.9-31.3 19.9-3.3 0-6.8-0.5-10.3-1.5-44.4-12.2-29.8-72.3-29.8-72.3s2.5 48.6 39 49.8h0.6c37.3 0.2 37.5-108.2 37.5-108.2m0-18.8c-4.7 0-9.3 1.8-12.7 5-3.9 3.6-6.1 8.6-6.1 13.8-0.1 45.1-10.5 85.9-18.9 89.7-18.4-0.6-20.6-31.7-20.6-32-0.5-9.3-7.8-16.9-17.1-17.8-0.6-0.1-1.2-0.1-1.8-0.1-8.6 0-16.2 5.9-18.3 14.4-6.6 26.9-6 81.4 43.1 94.9 5.2 1.4 10.3 2.1 15.3 2.1 10.1 0 19.6-2.9 28-8.5 9.9 10.4 22.9 16.1 37.6 16.1 2 0 4.1-0.1 6.3-0.3 50.6-5.2 60.1-58.9 58.1-86.6-0.7-9.3-8.1-16.7-17.4-17.4h-1.4c-8.8 0-16.5 6.1-18.4 14.8 0 0.2-7 28.3-23.2 28.3-0.8 0-1.7-0.1-2.6-0.2-0.2 0-0.9-0.4-1.5-1.3-1.6-2.1-2.3-5.3-1.9-8.1 0.3-1.8 0.7-4.4 1.3-7.6 3.2-18.2 9-52.2 6.9-80.4-0.7-9.2-8-16.6-17.2-17.3l-15.9-1.3c-0.6-0.2-1.1-0.2-1.6-0.2z" fill="#7F0518" ></path><path d="M702.5 427m-62.7 0a62.7 62.7 0 1 0 125.4 0 62.7 62.7 0 1 0-125.4 0Z" fill="#7F0518" ></path><path d="M686.7 414.3m-28.9 0a28.9 28.9 0 1 0 57.8 0 28.9 28.9 0 1 0-57.8 0Z" fill="#FFFFFF" ></path><path d="M723.7 456.4m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF" ></path><path d="M329.6 427m-62.7 0a62.7 62.7 0 1 0 125.4 0 62.7 62.7 0 1 0-125.4 0Z" fill="#7F0518" ></path><path d="M313.8 414.3m-28.9 0a28.9 28.9 0 1 0 57.8 0 28.9 28.9 0 1 0-57.8 0Z" fill="#FFFFFF" ></path><path d="M350.8 456.4m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF" ></path><path d="M662.9 336.9c-2.1 0-4.2-0.7-5.9-2.1-4-3.3-4.7-9.2-1.4-13.3 0.7-0.8 16.6-20 41.9-21.8 17.6-1.4 34.5 5.8 50.9 20.8 3.8 3.5 4.1 9.5 0.6 13.3-3.5 3.9-9.5 4.1-13.3 0.6-12.4-11.4-24.7-16.9-36.8-15.9-17.1 1.2-28.6 14.8-28.7 14.9-1.8 2.4-4.6 3.5-7.3 3.5z" fill="#7F0518" ></path><path d="M296.6 336.9c-2.1 0-4.2-0.7-5.9-2.1-4-3.3-4.7-9.2-1.4-13.3 0.7-0.8 16.6-20 41.9-21.8 17.7-1.4 34.5 5.8 50.9 20.8 3.8 3.5 4.1 9.5 0.6 13.3-3.5 3.9-9.5 4.1-13.3 0.6-12.4-11.4-24.8-16.9-36.8-15.9-17.1 1.2-28.6 14.8-28.7 14.9-1.9 2.4-4.6 3.5-7.3 3.5z" fill="#7F0518" ></path><path d="M566.6 653.8c-21.2-0.8 65.2-52.5 73.8 18.7 2.9 23.1-9.4-16.2-73.8-18.7z" fill="#7F0518" ></path><path d="M457.8 644.2c21.2-0.8-65.2-52.5-73.8 18.7-2.9 23.1 9.4-16.3 73.8-18.7z" fill="#7F0518" ></path><path d="M510 295.1s68.1-11.4 158.4-159.6c-48.5-21.3-103.8-29.8-152.7-31.7-36-1.4-82.9 5.6-128.6 23.2 27.2 59.8 70.5 137.3 122.9 168.1z" fill="#EE3E2B" ></path><path d="M509.9 304.5c-1.7 0-3.3-0.4-4.8-1.3-54.4-32.1-98.9-111.4-126.7-172.3-1.1-2.4-1.2-5.1-0.1-7.5 1-2.4 2.9-4.3 5.3-5.2C427 101.6 475.5 92.9 516 94.4c41 1.5 101.3 8.4 156.1 32.4 2.5 1.1 4.4 3.2 5.2 5.8 0.8 2.6 0.5 5.4-0.9 7.7-91.4 150.2-161.9 163.5-164.9 164-0.5 0.2-1 0.2-1.6 0.2z m-110-172.2C426 187.9 465.3 255.7 511.4 285c13.6-4.5 70.4-29.2 143.1-145-49.4-19.5-102.4-25.3-139.2-26.7-35.4-1.3-76.9 5.5-115.4 19z" fill="#7F0518" ></path></symbol><symbol id="icon-ma" viewBox="0 0 1024 1024"><path d="M356.5 381.1c12.3-3.9 21.9-13.2 32-21.3 10-8.1 22-15.6 34.8-14.5 16.6 1.4 28.4 16.1 43 24.1 18.8 10.3 43.6 8.6 60.8-4.3 10.2-7.6 18.6-19.1 31.1-21.5 17.1-3.3 31.5 11.5 45.8 21.4 36.1 25.1 106.7 16 123.1-8.9 13.5-20.7 13.7-44.2-1.1-57.9-13-12-34.2-14-44-28.7-5-7.5-6.8-16.7-10-25.1-16.5-43.5-44.9-15.3-61.5-41.6-4.5-7.2 1.2-20.1-16.2-33.5-12.9-9.9-58.2 16.1-82.6-22.5-7.2 19.3-34.6 29.9-47.2 34.2-22.8 7.8-39.4-12.5-58.3 2.6-12.4 9.9-11.7 28.6-18.3 42.9-15.2 32.8-42.5 12.3-70.7 32.8-13.6 9.9-24.9 28.5-25.6 45.3-0.7 16.8 0.3 31.7 8.9 46.1 8.1 13.6 39.1 35.8 56 30.4z" fill="#FF6A48" ></path><path d="M351 392.2c-22.4 0-50.9-21.9-59.3-36.3-10.3-17.4-11-35.2-10.3-51.8 0.8-19.1 13.1-40.9 29.8-53.1 14.3-10.4 28.4-11.9 39.8-13.1 13.8-1.5 21.4-2.3 27.6-15.8 2.1-4.5 3.3-9.6 4.6-14.6 2.8-11 6-23.6 16.7-32.1 14.3-11.4 28.1-8 39.2-5.3 7.9 1.9 14.7 3.6 22.2 1 28.8-9.8 38.1-20.7 40.9-28 1.4-3.7 4.7-6.2 8.6-6.6 3.9-0.4 7.7 1.5 9.7 4.7 11.8 18.6 28.3 18.5 50.3 16.2 11.9-1.2 22.2-2.3 29.9 3.6 15.1 11.6 16.8 24.2 17.8 31.6 0.2 1.6 0.5 3.9 0.8 4.5 4.4 6.9 9.2 7.8 18.9 9 13.5 1.7 32 4 43.5 34.4 1 2.7 1.9 5.5 2.8 8.3 1.8 5.5 3.4 10.7 6.1 14.8 3.9 5.9 11.3 9.3 19.8 13.3 7.8 3.6 15.8 7.3 22.6 13.7 18.3 17 19.4 45.6 2.7 71-10.8 16.5-34.7 23.3-47.9 25.8-25.1 4.8-63.5 4-89.6-14.1-2.8-2-5.7-4.1-8.5-6.3-10.4-7.9-20.2-15.4-29.5-13.5-5.9 1.1-11.2 5.9-17.3 11.4-3.1 2.8-6.3 5.7-9.6 8.2-20.6 15.4-49.5 17.4-71.9 5-5.4-3-10.5-6.7-15.5-10.5-8.3-6.2-15.4-11.6-23.4-12.3-7.6-0.5-16.4 3.2-27.5 12.2l-4.9 4.1c-9 7.5-18.2 15.2-30.4 19.1-2.8 1-5.7 1.5-8.7 1.5zM422.1 188c-3.4 0-6.3 1-9.4 3.5-5.3 4.2-7.3 12-9.6 21.1-1.5 6-3.1 12.2-5.9 18.2-11.1 24.1-28.6 25.9-44.1 27.5-10.3 1.1-20.1 2.1-29.9 9.3-11.6 8.5-20.9 24.6-21.4 37.4-0.7 15.5 0.3 28.4 7.5 40.5 7.2 12.2 33.8 29 44.1 25.9 8.3-2.6 15.7-8.8 23.4-15.3l5.2-4.3c9.7-7.9 25-18.1 42.1-16.7 13.9 1.2 24.6 9.2 34 16.4 4.2 3.2 8.5 6.4 13.1 8.9 15.3 8.4 35.8 7 49.8-3.5 2.8-2.1 5.4-4.5 8.1-6.9 7.3-6.6 15.6-14.2 27.2-16.4 18.3-3.6 32.9 7.5 45.8 17.2 2.6 2 5.2 4 7.8 5.8 16.9 11.8 46.6 16.2 74 10.8 16.6-3.2 29.9-9.7 34.6-17 11-16.8 11.2-34.8 0.5-44.8-4.4-4.1-10.7-7-17.3-10.1-9.9-4.6-21.1-9.8-28.3-20.5-4.3-6.4-6.5-13.3-8.6-19.9-0.8-2.4-1.6-4.9-2.5-7.3-7.2-18.9-15-19.8-26.9-21.3-10.1-1.3-23.9-3-33.7-18.5-2.7-4.2-3.3-8.7-3.8-12.7-0.8-6.2-1.6-11.6-10-18.1-1.8-0.8-9.9 0-15.3 0.5-16.9 1.7-41.1 4.2-60-13.6-9.2 10.5-24.3 19.3-44.9 26.4-13.1 4.5-24.5 1.7-33.7-0.5-4.9-1.2-8.7-2-11.9-2z" fill="#7F0518" ></path><path d="M699.3 377.6s131.5-102 250.7 90.8c0 0-198.3 95.1-250.7-90.8z" fill="#FFC831" ></path><path d="M842.6 503c-22.6 0-46.3-3.7-68.6-13.7-41-18.5-69.4-55.2-84.5-108.9-1.1-4 0.3-8.3 3.6-10.9 2-1.6 51-38.7 117.4-26.7 55.2 10 105.1 50.4 148.3 120.2 1.5 2.5 1.9 5.5 1.1 8.3s-2.8 5.1-5.4 6.4c-3 1.3-54 25.3-111.9 25.3zM711.3 381.9c13.8 43.8 37.7 73.6 71.1 88.7 56.4 25.6 126.1 3.3 152.5-6.9-38.4-58.4-81.4-92.3-128-100.7-45.6-8.3-82.1 10.4-95.6 18.9z" fill="#7F0518" ></path><path d="M731.1 387.3s70.3-57.8 137.4 55.8c0 0-106.7 53-137.4-55.8z" fill="#FF6A48" ></path><path d="M812.5 466.3c-12.5 0-25.7-2-38.4-7.7-25.4-11.3-43.2-34.3-52.8-68.5-1.1-3.9 0.2-8.1 3.4-10.7 1.1-0.9 27.7-22.3 64.8-15.8 32.6 5.7 62.2 30.7 87.9 74.3 1.5 2.5 1.8 5.4 1 8.1-0.8 2.7-2.7 5-5.3 6.3-1.6 0.8-28.7 14-60.6 14z m-69.3-74.7c8.1 24.1 21.3 40.3 39.2 48.3 25.6 11.4 55.5 3.8 71.1-1.6-20.8-31.8-43.3-50-67.2-54.4-19.5-3.6-35.2 3.1-43.1 7.7z" fill="#7F0518" ></path><path d="M325.3 377.6s-131.5-102-250.7 90.8c-0.1 0 198.3 95.1 250.7-90.8z" fill="#FFC831" ></path><path d="M182 503c-58 0-108.9-24-111.9-25.4-2.6-1.3-4.6-3.6-5.4-6.4-0.8-2.8-0.4-5.8 1.1-8.3 43.2-69.8 93.1-110.3 148.3-120.2 66.4-12 115.3 25.2 117.4 26.7 3.3 2.6 4.7 6.9 3.6 10.9-15.1 53.8-43.6 90.4-84.5 108.9-22.3 10.2-46 13.8-68.6 13.8z m-92.3-39.4c26.3 10.2 96.1 32.5 152.5 6.9 33.4-15.1 57.2-44.9 71-88.7-13.6-8.4-50.4-27.2-95.8-18.9-46.4 8.6-89.4 42.4-127.7 100.7z" fill="#7F0518" ></path><path d="M293.4 387.3s-70.3-57.8-137.4 55.8c0 0 106.8 53 137.4-55.8z" fill="#FF6A48" ></path><path d="M212 466.3c-31.8 0-59-13.2-60.5-14-2.6-1.3-4.5-3.5-5.3-6.3-0.8-2.7-0.5-5.7 1-8.1 25.7-43.6 55.3-68.6 87.9-74.3 37.2-6.6 63.7 14.9 64.8 15.8 3.1 2.6 4.5 6.8 3.4 10.7-9.6 34.2-27.4 57.3-52.8 68.5-12.7 5.6-26 7.7-38.5 7.7z m-40.8-28.1c15.6 5.5 45.6 13 71.1 1.6 17.8-8 31-24.2 39.1-48.3-7.9-4.6-23.5-11.3-43-7.7-23.9 4.4-46.5 22.6-67.2 54.4z" fill="#7F0518" ></path><path d="M795.2 611.2c0 173.7-129 272.2-284.2 272.2S233.4 785 233.4 611.2c0-173.7 124.7-360.1 279.9-360.1 155.1 0 281.9 186.4 281.9 360.1z" fill="#FFC831" ></path><path d="M511 893.6c-172.2 0-287.9-113.5-287.9-282.4 0-174.8 124.1-370.4 290.1-370.4 164.6 0 292.2 199.1 292.2 370.4 0.1 166.3-121 282.4-294.4 282.4z m2.3-632.2c-151.8 0-269.6 188.1-269.6 349.8 0 156.6 107.5 261.9 267.4 261.9 136.3 0 273.9-81 273.9-261.9 0-161.8-118.7-349.8-271.7-349.8z" fill="#7F0518" ></path><path d="M668 545.9m-57 0a57 57 0 1 0 114 0 57 57 0 1 0-114 0Z" fill="#7F0518" ></path><path d="M653.7 534.4m-26.3 0a26.3 26.3 0 1 0 52.6 0 26.3 26.3 0 1 0-52.6 0Z" fill="#FFFFFF" ></path><path d="M687.3 572.6m-12 0a12 12 0 1 0 24 0 12 12 0 1 0-24 0Z" fill="#FFFFFF" ></path><path d="M359.9 545.9m-57 0a57 57 0 1 0 114 0 57 57 0 1 0-114 0Z" fill="#7F0518" ></path><path d="M345.6 534.4m-26.3 0a26.3 26.3 0 1 0 52.6 0 26.3 26.3 0 1 0-52.6 0Z" fill="#FFFFFF" ></path><path d="M379.2 572.6m-12 0a12 12 0 1 0 24 0 12 12 0 1 0-24 0Z" fill="#FFFFFF" ></path><path d="M699.3 424.9c-2.5 0-5-0.9-6.9-2.7-10.8-10-21.4-14.8-31.9-14-14.9 1-25 12.9-25.1 13-3.6 4.3-10 4.9-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.6-0.8 15.5-18.7 39.3-20.5 16.1-1.3 32.2 5.4 47.5 19.4 4.2 3.8 4.4 10.3 0.6 14.5-2.1 2.2-4.8 3.3-7.6 3.3z" fill="#7F0518" ></path><path d="M331.3 424.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5-10-1.5-14.4 0.6-0.8 15.5-18.7 39.3-20.5 16.1-1.2 32.2 5.3 47.5 19.4 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.4-14.5 0.6-10.9-10.1-21.7-14.7-32.1-14-14.8 1.1-24.7 12.8-24.8 12.9-2.1 2.5-5 3.8-8 3.8z" fill="#7F0518" ></path><path d="M757.6 756.9C692.7 717.8 607.9 694 514.9 694c-93.6 0-178.8 24.2-243.9 63.7 47.6 81.4 136.7 125.8 240.6 125.8 104.3-0.1 196.5-44.8 246-126.6z" fill="#FF6A48" ></path><path d="M511.6 893.6c-109.9 0-200.8-47.7-249.5-130.8-2.8-4.8-1.3-11 3.5-13.9 69.2-42 157.7-65.2 249.2-65.2 90.9 0 179 22.9 248 64.4 2.3 1.4 4 3.7 4.7 6.3 0.7 2.6 0.2 5.4-1.2 7.8-50.4 83.5-143.2 131.4-254.7 131.4zM285.2 761.2c46.1 71.3 127.9 111.9 226.4 111.9 100.1 0 183.8-40.9 231.6-112.7-64.4-36.3-145-56.2-228.3-56.2-83.9 0-165 20.2-229.7 57z" fill="#7F0518" ></path><path d="M601.8 764.7c-22.4-0.8 68.6-55.2 77.7 19.6 3 24.3-9.9-17.1-77.7-19.6z" fill="#7F0518" ></path><path d="M416.5 764.7c22.4-0.8-68.6-55.2-77.7 19.6-3 24.3 9.9-17.1 77.7-19.6z" fill="#7F0518" ></path></symbol><symbol id="icon-yang" viewBox="0 0 1024 1024"><path d="M848.2 504.2c24.7 16.6 41.2 46.8 41.3 81.6 0.1 45.6-29.4 106.2-67.8 124.1-6.8 3.2-28.4-7.9-28.4 1.1 0.1 53.7-39 98.1-87.2 99.1-14.7 0.3-28.5-3.5-40.7-10.3-8.7 47-58.5 83.9-118.8 85.3-53.6 1.1-99-26.2-114.7-65-15.3 15.1-35.2 24.5-57 25-40.8 0.9-75.1-29.7-84.6-71.6-5.8 1.4-11.7 2.3-17.8 2.4-48.2 1-87.4-41.6-87.4-95.4-0.1-13.3 2.3-25.9 6.6-37.5-36.8-10.7-64-47.6-64-92.3-0.1-42 23.8-78.2 57.3-92.5-13.2-16.8-21.4-38.8-21.4-63.1-0.1-53.7 39-98.1 87.2-99.2 6.4-0.1 12.7 0.5 18.7 1.9 5.1-48.3 41.8-86.6 86.6-87.5 24.5-0.5 46.6 10.3 62.5 28 9.8-44.2 50.8-78.1 100-79.2 52-1.1 94.8 34.8 101.5 82.3 15.4-15.8 35.8-25.6 58.2-26.2 48.2-1 87.4 41.7 87.4 95.4 0 11-1.7 21.6-4.7 31.4 9-3.7 18.7-6 28.8-6.1 48.2-1.1 87.4 41.6 87.5 95.4 0 28.7-11.2 54.7-29.1 72.9z" fill="#FFC831" ></path><path d="M543.5 895.3c-49.7 0-93.8-23-114.9-58.9-15.8 11.8-34.4 18.5-53.5 18.8-41.7 0.7-78.6-27.5-92.2-70.1-3.4 0.5-6.9 0.7-10.3 0.8-24.1 0.5-47.7-8.9-65.8-26.6-20.4-20-32.1-48.8-32.1-79-0.1-10.6 1.3-21.1 4.1-31.2-36.6-15.5-61.4-54.5-61.5-98.6-0.1-40.2 20.6-77.4 52.4-96.3-10.7-17.4-16.5-38.1-16.5-59.3-0.1-59.2 43.5-108.3 97.2-109.4 3.4 0 6.9 0.1 10.4 0.4 9.7-48.8 48.9-85.1 94.9-86 21.2-0.3 41.1 6.4 57.8 19.6 16.5-40.9 58-69.8 104.7-70.7 50.5-1.1 93.5 29.7 107.9 73.7 15.4-11 33.3-17.2 51.8-17.7 24.2-0.3 47.8 8.9 65.8 26.6 20.4 20 32.1 48.8 32.2 79.1 0 5.6-0.4 11.1-1.2 16.6 4.9-0.9 9.9-1.5 14.9-1.6 23.8-0.8 47.6 8.9 65.7 26.5 20.4 20 32.2 48.8 32.2 79.1 0 26.2-8.7 51.7-24.4 71.5 23.1 19.8 36.6 50 36.6 83 0.1 46.8-30.2 113.1-73.7 133.4-6 2.8-13.2 1.2-20.1-0.2-0.7-0.2-1.6-0.3-2.6-0.5-3.4 55.8-45.6 100.9-97 102-11.6 0.3-23.2-1.8-34.1-6.1-15.4 46.3-65.9 79.6-125.4 81-1.1 0.1-2.2 0.1-3.3 0.1z m-111.6-85.5c0.7 0 1.4 0.1 2.1 0.2 3.4 0.7 6.2 3 7.4 6.2 14.6 36 55.9 59.4 105 58.5 54.2-1.2 101.1-34.2 109-76.9 0.6-3.3 2.7-6 5.8-7.4 3-1.4 6.5-1.2 9.4 0.4 11 6.3 22.9 9.4 35.4 9 42.6-0.9 77.2-40.8 77.2-88.9 0-4.3 1.7-8.1 4.9-10.6 6.1-5 14.3-3.2 22.3-1.5 2.6 0.6 6.9 1.5 8.3 1.3 34.3-16.1 60.8-73.8 60.7-114.4-0.1-30.3-13.8-57.6-36.8-73.1-2.5-1.7-4.2-4.4-4.5-7.5-0.3-3 0.7-6.1 2.9-8.2 16.6-16.9 26.1-40.9 26.1-65.8s-9.5-48.4-26-64.5c-14.1-13.7-31.4-21.1-51-20.7-8.4 0.1-16.8 2-25.1 5.4-3.6 1.5-7.9 0.8-10.8-1.9-2.9-2.7-4.1-6.8-2.9-10.6 2.8-9.3 4.2-18.8 4.2-28.5 0-24.8-9.5-48.3-26-64.4-14.1-13.8-32.5-21.6-51-20.7-18.8 0.5-36.9 8.7-51.1 23.1-2.7 2.8-6.8 3.8-10.5 2.6-3.7-1.2-6.4-4.4-7-8.3-6-42.9-46.1-75-91.1-73.4-43.4 0.9-81.3 30.8-90.2 71.1-0.8 3.8-3.7 6.7-7.4 7.7-3.8 1-7.7-0.2-10.3-3.1-14.6-16.3-33.7-25.5-54.6-24.6-39 0.8-72 34.5-76.6 78.3-0.3 2.9-1.8 5.5-4.2 7.3-2.4 1.7-5.3 2.4-8.2 1.7-5.4-1.2-10.9-1.8-16.3-1.6-42.6 0.9-77.2 40.8-77.1 88.9 0 20.9 6.8 41.1 19.2 56.7 2 2.5 2.7 5.8 1.9 8.9-0.8 3.1-3 5.7-5.9 6.9-30.6 13.1-51.1 46.5-51.1 83.1 0.1 38.9 23.4 72.8 56.6 82.4 2.7 0.8 5 2.7 6.3 5.2 1.3 2.5 1.4 5.5 0.5 8.2-4 10.8-6 22.2-6 33.9 0 24.9 9.4 48.3 25.9 64.4 14.1 13.8 31.5 21.3 51 20.7 5.2-0.1 10.4-0.8 15.6-2.1 2.7-0.6 5.5-0.2 7.8 1.2 2.4 1.4 4 3.8 4.6 6.5 8.7 38.2 38.5 63.8 74.4 63.7 18.2-0.4 36-8.2 50-22 2-1.8 4.6-2.8 7.2-2.8z m371.7-98.9z" fill="#7F0518" ></path><path d="M248.7 539.8a264.7 219.5 0 1 0 529.4 0 264.7 219.5 0 1 0-529.4 0Z" fill="#FFFFFF" ></path><path d="M513.4 769.5c-151.6 0-275-103.1-275-229.7S361.8 310 513.4 310s274.9 103.1 274.9 229.7S665 769.5 513.4 769.5z m0-439c-140.3 0-254.4 93.8-254.4 209.2S373.1 749 513.4 749s254.4-93.9 254.4-209.2-114.1-209.3-254.4-209.3z" fill="#7F0518" ></path><path d="M755.9 437.5c6.6 20.1 17.4 38.9 31.4 54.8 7 8 14.9 15.3 24.1 20.5 8.1 4.7 17.2 7.7 26.4 9.5 19.6 4 40.3 2.8 58.8-4.6 18.5-7.5 34.6-21.4 43.3-39.4 7.8-16.2 20.3-45.3-1-83.1-14.2-25.1-50.8-32-78.4-23.9-27.6 8.1-50.1 36.7-45.4 65.1 9.4 56.6 78.9 67.6 90 9.9 4.9-25.7-14-41.5-30.4-44-8.7-1.4-18.2 2.7-22.8 10.3-4.6 7.5-3.8 18.1 2.1 24.6 6 6.5 16.8 8.1 24.2 3.2" fill="#FFFFFF" ></path><path d="M860 534.9c-8 0-16.1-0.8-24.3-2.5-11.1-2.3-21-5.9-29.4-10.7-9.1-5.2-17.9-12.6-26.7-22.6-14.8-16.9-26.4-37-33.5-58.4-1.8-5.4 1.1-11.2 6.5-13 5.3-1.8 11.2 1.1 13 6.5 6.2 18.7 16.3 36.5 29.4 51.2 7.3 8.3 14.3 14.3 21.5 18.4 6.5 3.7 14.3 6.5 23.3 8.4 18.3 3.7 37.2 2.3 52.9-4.1 16.8-6.8 30.6-19.3 37.9-34.4 6.1-12.6 18.8-39-0.7-73.5-11.6-20.5-43.6-25.8-66.6-19.1-21.7 6.3-42.2 29.4-38.2 53.6 4.2 25.7 23 39.4 39.3 39.6 15-0.8 26.9-11 30.6-30 1.5-7.9 0.2-14.9-3.9-20.7-4.1-5.9-11.1-10.2-18.1-11.3-4.7-0.7-10.1 1.6-12.5 5.5-2.3 3.7-1.9 9.2 0.9 12.3 2.7 2.9 7.9 3.6 10.9 1.6 4.7-3.2 11.1-1.9 14.2 2.8 3.1 4.7 1.9 11.1-2.8 14.2-11.5 7.6-27.9 5.6-37.4-4.7-9.1-9.8-10.5-25.4-3.4-36.9 6.8-11 20.1-17.1 33.1-15 12.5 2 24.4 9.4 31.7 19.8 7.3 10.4 9.8 22.9 7.2 36.3-5.4 28.4-25.2 46.6-50.3 46.6h-0.7c-24.8-0.3-53.2-19.9-59.3-56.8-5.3-32.2 18.3-66.6 52.7-76.7 30.8-9 72.9-2 90.2 28.7 24.8 43.9 8.4 78 1.3 92.6-9.5 19.6-27.2 35.8-48.7 44.4-12.3 5.3-25.9 7.9-40.1 7.9z" fill="#7F0518" ></path><path d="M270.1 434.3c-6.6 20.1-17.4 38.9-31.4 54.8-7 8-14.9 15.3-24.1 20.5-8.1 4.7-17.2 7.7-26.4 9.5-19.6 4-40.3 2.8-58.8-4.6-18.5-7.5-34.6-21.4-43.3-39.4-7.8-16.2-20.3-45.3 1-83.1 14.2-25.1 50.8-32 78.4-23.9 27.6 8.1 50.1 36.7 45.4 65.1-9.4 56.6-78.9 67.6-90 9.9-4.9-25.7 14-41.5 30.4-44 8.7-1.4 18.2 2.7 22.8 10.3 4.6 7.5 3.8 18.1-2.1 24.6-6 6.5-16.8 8.1-24.2 3.2" fill="#FFFFFF" ></path><path d="M166 531.7c-14.1 0-27.8-2.6-40.4-7.6-21.4-8.6-39.2-24.8-48.7-44.4-7-14.6-23.5-48.7 1.3-92.6 17.4-30.7 59.4-37.7 90.2-28.7 34.4 10 58 44.5 52.7 76.7-6.1 36.8-34.4 56.4-59.3 56.8h-0.7c-25.1 0-44.8-18.2-50.3-46.6-2.6-13.4-0.1-26 7.2-36.3 7.3-10.4 19.2-17.8 31.7-19.8 13.2-2 26.4 4 33.2 15 7.1 11.6 5.7 27.1-3.4 36.9-9.5 10.3-25.9 12.4-37.4 4.7-4.7-3.1-6-9.5-2.8-14.2 3.1-4.7 9.5-6 14.2-2.8 3.1 2 8.3 1.3 10.9-1.6 2.8-3 3.2-8.6 0.9-12.3-2.4-3.9-7.7-6.3-12.5-5.5-5.5 0.9-13.2 4.3-18.1 11.3-4.1 5.8-5.4 12.7-3.8 20.7 3.6 19 15 29.6 30.6 30 16.3-0.2 35-13.9 39.3-39.6 4-24.2-16.5-47.3-38.2-53.6-23-6.7-55-1.3-66.6 19.1-19.5 34.6-6.8 60.9-0.7 73.6 7.3 15.1 21.1 27.6 37.9 34.3 15.8 6.4 34.6 7.8 53 4.1 9-1.8 16.8-4.6 23.3-8.4 7.1-4.1 14.2-10.1 21.5-18.4 13-14.8 23.2-32.5 29.4-51.2 1.8-5.4 7.5-8.3 13-6.5 5.4 1.8 8.3 7.6 6.5 13-7.1 21.3-18.6 41.5-33.5 58.4-8.8 10-17.6 17.4-26.7 22.6-8.4 4.8-18.3 8.4-29.4 10.7-8.2 1.4-16.3 2.2-24.3 2.2z" fill="#7F0518" ></path><path d="M643.1 536m-55 0a55 55 0 1 0 110 0 55 55 0 1 0-110 0Z" fill="#7F0518" ></path><path d="M629.2 524.9m-25.4 0a25.4 25.4 0 1 0 50.8 0 25.4 25.4 0 1 0-50.8 0Z" fill="#FFFFFF" ></path><path d="M661.7 561.8m-11.6 0a11.6 11.6 0 1 0 23.2 0 11.6 11.6 0 1 0-23.2 0Z" fill="#FFFFFF" ></path><path d="M385.2 537.8m-55 0a55 55 0 1 0 110 0 55 55 0 1 0-110 0Z" fill="#7F0518" ></path><path d="M371.3 526.7m-25.4 0a25.4 25.4 0 1 0 50.8 0 25.4 25.4 0 1 0-50.8 0Z" fill="#FFFFFF" ></path><path d="M403.8 563.6m-11.6 0a11.6 11.6 0 1 0 23.2 0 11.6 11.6 0 1 0-23.2 0Z" fill="#FFFFFF" ></path><path d="M677.8 454.8c-2.5 0-5-0.9-6.9-2.7-10.4-9.6-20.8-14.2-30.6-13.5-14.2 0.9-23.9 12.3-24 12.4-3.6 4.4-10.1 5-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.6-0.7 15.1-18.2 38.2-19.9 16-1.1 31.3 5.2 46.1 18.8 4.2 3.8 4.4 10.3 0.6 14.5-2 2.3-4.8 3.4-7.5 3.4z" fill="#7F0518" ></path><path d="M353.5 456.6c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5-10-1.5-14.4 0.6-0.7 15.1-18.2 38.2-19.9 15.9-1.2 31.3 5.2 46.1 18.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-10.5-9.6-20.9-14.2-30.8-13.5-14.1 1-23.7 12.3-23.7 12.4-2 2.5-5 3.8-7.9 3.8z" fill="#7F0518" ></path><path d="M643 639.5a43.8 28.6 0 1 0 87.6 0 43.8 28.6 0 1 0-87.6 0Z" fill="#FF6A48" ></path><path d="M299.1 639.5a43.8 28.6 0 1 0 87.6 0 43.8 28.6 0 1 0-87.6 0Z" fill="#FF6A48" ></path><path d="M478.4 640.8a40.1 28.1 0 1 0 80.2 0 40.1 28.1 0 1 0-80.2 0Z" fill="#7F0518" ></path><path d="M488.6 714.5c-2.4 0-4.7-0.2-7-0.7-21-3.9-31.5-24.6-31.9-25.5-2.5-5.1-0.5-11.2 4.6-13.8 5.1-2.5 11.2-0.4 13.7 4.6 0.2 0.3 6.6 12.6 17.5 14.5 6.7 1.1 14.3-1.7 22.8-8.5v-21.7c0-5.7 4.6-10.3 10.3-10.3s10.3 4.6 10.3 10.3v26.4c0 2.9-1.2 5.7-3.4 7.6-12.5 11.4-24.9 17.1-36.9 17.1z" fill="#7F0518" ></path><path d="M548.5 714.5c-12 0-24.4-5.7-36.8-17-4.2-3.8-4.5-10.3-0.7-14.5 3.8-4.2 10.3-4.5 14.5-0.7 9.9 8.9 18.7 12.9 26.3 11.4 10.7-2 17.3-14.3 17.3-14.4 2.5-5 8.6-7.1 13.8-4.6 5.1 2.5 7.1 8.7 4.6 13.8-0.4 0.9-10.9 21.5-31.9 25.5-2.4 0.3-4.8 0.5-7.1 0.5z" fill="#7F0518" ></path></symbol><symbol id="icon-houzi" viewBox="0 0 1024 1024"><path d="M829 498.3m-120.1 0a120.1 120.1 0 1 0 240.2 0 120.1 120.1 0 1 0-240.2 0Z" fill="#FFC831" ></path><path d="M829 628.6c-71.9 0-130.4-58.5-130.4-130.3S757.1 367.9 829 367.9s130.3 58.5 130.3 130.3S900.9 628.6 829 628.6z m0-240.2c-60.6 0-109.8 49.3-109.8 109.8S768.4 608.1 829 608.1c60.5 0 109.8-49.3 109.8-109.8S889.5 388.4 829 388.4z" fill="#7F0518" ></path><path d="M829 498.3m-72.6 0a72.6 72.6 0 1 0 145.2 0 72.6 72.6 0 1 0-145.2 0Z" fill="#FF6A48" ></path><path d="M829 581.1c-45.7 0-82.9-37.2-82.9-82.9s37.2-82.9 82.9-82.9 82.9 37.2 82.9 82.9-37.2 82.9-82.9 82.9z m0-145.2c-34.4 0-62.4 28-62.4 62.3 0 34.4 28 62.3 62.4 62.3s62.3-28 62.3-62.3-27.9-62.3-62.3-62.3z" fill="#7F0518" ></path><path d="M193.7 498.3m-120.1 0a120.1 120.1 0 1 0 240.2 0 120.1 120.1 0 1 0-240.2 0Z" fill="#FFC831" ></path><path d="M193.7 628.6c-71.9 0-130.4-58.5-130.4-130.3S121.8 368 193.7 368 324 426.5 324 498.3s-58.4 130.3-130.3 130.3z m0-240.2c-60.6 0-109.8 49.3-109.8 109.8S133.2 608 193.7 608s109.8-49.3 109.8-109.8-49.3-109.8-109.8-109.8z" fill="#7F0518" ></path><path d="M193.7 498.3m-72.6 0a72.6 72.6 0 1 0 145.2 0 72.6 72.6 0 1 0-145.2 0Z" fill="#FF6A48" ></path><path d="M193.7 581.1c-45.7 0-82.9-37.2-82.9-82.9s37.2-82.9 82.9-82.9 82.9 37.2 82.9 82.9-37.2 82.9-82.9 82.9z m0-145.2c-34.4 0-62.3 28-62.3 62.3 0 34.4 28 62.3 62.3 62.3 34.4 0 62.3-28 62.3-62.3s-28-62.3-62.3-62.3z" fill="#7F0518" ></path><path d="M842.6 520.3c0 175.8-147.7 318.3-329.8 318.3-182.2 0.1-329.8-142.5-329.8-318.3S330.6 202 512.8 202c182.1 0 329.8 142.5 329.8 318.3z" fill="#FF6A48" ></path><path d="M512.8 848.9c-187.5 0-340.1-147.4-340.1-328.6 0-181.2 152.6-328.6 340.1-328.6 187.5 0 340.1 147.4 340.1 328.6 0 181.2-152.6 328.6-340.1 328.6z m0-636.6c-176.2 0-319.6 138.2-319.6 308.1 0 169.9 143.4 308.1 319.6 308.1s319.5-138.2 319.5-308.1c0-169.9-143.3-308.1-319.5-308.1z" fill="#7F0518" ></path><path d="M802.1 520.3c0-91.1-34.6-179.6-133.8-184.2-56.5-2.6-90.1 65.8-155 68.2-65-2.4-98.6-70.8-155-68.2-99.2 4.6-133.8 93.1-133.8 184.2 0 150.4 126.7 273 285.3 278.9v0.3c1.2 0 2.3-0.1 3.5-0.1 1.2 0 2.3 0.1 3.5 0.1v-0.3c158.6-5.9 285.3-128.4 285.3-278.9z" fill="#FFFFFF" ></path><path d="M516.8 809.8h-0.3l-3.2-10.3 0.2 10.1c-1.3-0.1-2.6-0.1-4.1-0.5v0.3c-165.5-6.1-295.2-133.1-295.2-289.1 0-117.6 53.7-190.3 143.6-194.4 31.7-1.2 56.4 16.5 80.4 33.8 22.6 16.4 46 33.3 75.5 34.4 28.8-1.1 52.2-18 74.7-34.4 24-17.4 48.7-35.1 80.4-33.8 89.9 4.1 143.6 76.8 143.6 194.4 0 155.3-128.5 281.8-293 289-0.9 0.3-1.7 0.5-2.6 0.5z m0-10.3h0.3-0.3z m-3.3-10.4c0.1 0 0.1 0 0 0l0.1 0.4c0.9-0.3 1.8-0.5 2.8-0.5 154.5-5.7 275.5-123.7 275.5-268.6 0-50.6-12.1-168.8-124-173.9-23.9-1.1-44.4 13.3-67.4 30-23.9 17.3-51 36.9-86.8 38.2-36.5-1.3-63.6-20.9-87.5-38.2-23.1-16.7-42.7-31.3-67.4-30-111.9 5.2-124 123.4-124 173.9 0 144.9 121 262.9 275.5 268.6 0.6 0 1.1 0.1 1.7 0.2 0.7-0.1 1.4-0.1 1.5-0.1z" fill="#7F0518" ></path><path d="M668.9 559.9m-58.5 0a58.5 58.5 0 1 0 117 0 58.5 58.5 0 1 0-117 0Z" fill="#7F0518" ></path><path d="M654.2 548.1m-27 0a27 27 0 1 0 54 0 27 27 0 1 0-54 0Z" fill="#FFFFFF" ></path><path d="M688.7 587.3m-12.3 0a12.3 12.3 0 1 0 24.6 0 12.3 12.3 0 1 0-24.6 0Z" fill="#FFFFFF" ></path><path d="M376.5 559.9m-58.5 0a58.5 58.5 0 1 0 117 0 58.5 58.5 0 1 0-117 0Z" fill="#7F0518" ></path><path d="M361.8 548.1m-27 0a27 27 0 1 0 54 0 27 27 0 1 0-54 0Z" fill="#FFFFFF" ></path><path d="M396.3 587.3m-12.3 0a12.3 12.3 0 1 0 24.6 0 12.3 12.3 0 1 0-24.6 0Z" fill="#FFFFFF" ></path><path d="M632.1 463.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.6-0.8 15.8-19.1 40.1-20.9 16.6-1.1 33 5.5 48.5 19.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-11.2-10.4-22.1-15.3-33.2-14.5-15.3 1.1-25.6 13.3-25.7 13.4-1.9 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518" ></path><path d="M339.6 463.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.6-0.8 15.8-19.1 40.1-20.9 16.5-1.1 33 5.5 48.5 19.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-11.3-10.4-22.1-15.3-33.2-14.5-15.3 1.1-25.6 13.3-25.7 13.4-1.8 2.5-4.8 3.8-7.8 3.8z" fill="#7F0518" ></path><path d="M475.7 615.1a47 32.9 0 1 0 94 0 47 32.9 0 1 0-94 0Z" fill="#7F0518" ></path><path d="M487.6 699.7c-2.6 0-5.3-0.3-7.9-0.7-23.8-4.5-35.7-27.9-36.2-28.9-2.5-5.1-0.5-11.2 4.6-13.8 5-2.4 11.2-0.5 13.7 4.6 0.1 0.1 8 15.4 21.7 17.9 8.5 1.6 18.2-2.1 28.9-10.9v-26.2c0-5.7 4.6-10.3 10.3-10.3 5.7 0 10.3 4.6 10.3 10.3v30.9c0 2.9-1.2 5.7-3.4 7.6-14.2 13-28.3 19.5-42 19.5z" fill="#7F0518" ></path><path d="M557.8 699.7c-13.7 0-27.8-6.5-42-19.5-4.2-3.8-4.5-10.3-0.7-14.5 3.8-4.2 10.3-4.5 14.5-0.7 12 10.9 22.7 15.4 32.2 13.8 13.7-2.5 21.6-17.8 21.7-18 2.6-5 8.7-7.1 13.8-4.5 5 2.5 7.1 8.7 4.6 13.7-0.5 1-12.4 24.5-36.2 28.9-2.6 0.6-5.2 0.8-7.9 0.8z" fill="#7F0518" ></path></symbol><symbol id="icon-ji" viewBox="0 0 1024 1024"><path d="M841.5 641.1c0 175.8-147.2 248.4-328.7 248.4C331.2 889.5 184 817 184 641.1c0-175.8 147.2-388.3 328.7-388.3 181.6 0 328.8 212.5 328.8 388.3z" fill="#FFFFFF" ></path><path d="M512.8 900.4c-212.7 0-339.7-96.9-339.7-259.3 0-180.8 151.5-399.3 339.7-399.3s339.6 218.4 339.6 399.3c0 162.4-126.9 259.3-339.6 259.3z m0-636.7C336.7 263.7 195 470.2 195 641.1c0 214.3 222.3 237.5 317.8 237.5s317.8-23.1 317.8-237.5c0-170.9-141.8-377.4-317.8-377.4z" fill="#7F0518" ></path><path d="M660.2 160.8c-44.7-71.8-88.2-21.1-97.5-8.7 6.4-15.7 8.3-76.8-51.9-76.8-56.8 0-49.4 56.9-45.7 74.4-12.3-15.3-53.4-56.6-95.5 11.2-50.4 81 96.3 204.7 96.3 204.7 7.5 5.3 14.6 8.6 21.4 10.4 8.3 2.9 19.5 5.6 32.4 5.6 18 0 31.6-7.4 38.8-12.5 1.8-1.1 3.6-2.2 5.5-3.6-0.1 0 146.6-123.8 96.2-204.7z" fill="#FF6A48" ></path><path d="M519.6 392.5c-12 0-24.1-2.1-36-6.2-7.6-2-16-6-24.1-11.8-7-5.9-154-131.4-99.2-219.4 16.9-27.1 36-41.5 56.9-42.7 13-1.1 25.1 3.8 34.7 10.2 0.5-13.2 3.7-27.8 12.9-39.1 10.3-12.6 25.8-19 46.1-19 30.4 0 46.2 14 54.2 25.8 6.9 10.2 10.2 22.2 11.3 33.5 9.7-6.8 21.8-12.3 35.5-11.4 21.2 0.9 40.5 15.3 57.7 42.8 54.8 88-92.2 213.5-98.5 218.8-2.9 2.1-5 3.4-7.1 4.7-7 4.7-23.1 13.8-44.4 13.8zM420 134c-0.5 0-1.1 0-1.6 0.1-13.4 0.8-26.7 11.7-39.6 32.5-44.8 72 92.7 189.4 94 190.6 5.3 3.7 11.3 6.7 17.2 8.2 7.4 2.5 17.6 5.3 29.6 5.3 15.3 0 27-6.6 32.6-10.5 2.3-1.4 3.9-2.4 5.5-3.5 0.7-0.6 138.2-118 93.3-190-13.1-21-26.5-31.9-40-32.5-18.5-1-34.9 18.6-39.4 24.6-3.3 4.4-9.3 5.6-14.1 3-4.8-2.7-6.8-8.5-4.8-13.6 2.7-6.6 4.9-29.9-5.7-45.7-7.2-10.7-19.3-16.1-36-16.1-13.6 0-23.1 3.6-29.1 11-12.1 14.9-7.6 42.2-5.9 50.2 1 5-1.5 10-6 12.1-4.6 2.1-10 0.9-13.2-3-5.8-7.1-20.1-22.7-36.8-22.7z" fill="#7F0518" ></path><path d="M530.8 809.8l-0.4-13.2s-6.2 2-15.6 5.9c-9.4-3.9-15.6-5.9-15.6-5.9l-0.4 13.2c-37.2 18.7-91.1 57.2-65.1 116 15.1 34 53.9 28.3 83.3-3.9 4.9 5.3 55.4 56.5 78.7 3.9 26.2-58.8-27.7-97.3-64.9-116z" fill="#FF6A48" ></path><path d="M566.1 960.3c-19.6 0-38.4-13.8-48.9-23.1-18.5 16.8-39.7 24.9-58.2 21.9-15.6-2.5-28.1-12.8-35.2-28.9-21.5-48.7 1.3-93.7 64.3-127.2l0.2-6.8c0.1-3.4 1.8-6.6 4.6-8.6s6.3-2.6 9.6-1.5c0 0 4.7 1.5 12.2 4.5 7.5-3 12.3-4.5 12.3-4.5 3.2-1 6.8-0.4 9.6 1.5 2.8 2 4.5 5.2 4.6 8.6l0.2 6.8c63 33.5 85.8 78.5 64.3 127.2-9.5 21.5-23.3 27.9-33.3 29.6-2 0.3-4.1 0.5-6.3 0.5z m-49-49.3c3.1 0 6 1.3 8.1 3.6 6.4 7 28.5 26.4 43.8 23.7 2.5-0.4 10.1-1.7 16.8-16.8 21.5-48.5-20.8-82.2-60-101.8-3-1.5-5.1-4.3-5.8-7.5-0.3 0.1-0.7 0.3-1 0.4-2.7 1.1-5.7 1.1-8.5 0-0.3-0.1-0.7-0.3-1-0.4-0.7 3.2-2.8 6-5.8 7.5-39.2 19.6-81.4 53.3-60 101.8 4.2 9.4 10.4 14.8 18.7 16.2 13.7 2.3 31.5-6.6 46.5-23 2.2-2.4 5.2-3.7 8.2-3.7z" fill="#7F0518" ></path><path d="M662.8 722.5s-38.4-108.4-142.4-108.4-146.1 101.8-146.1 101.8c0.7 2 30.8 131.7 139.9 131.7 95.2-0.1 133.1-83.1 148.6-125.1z" fill="#FFC831" ></path><path d="M514.2 858.4c-108 0-144.1-115.8-150.2-139.1-0.6-2.3-0.7-5.5 0.3-7.7 1.8-4.4 46.1-108.6 156.2-108.6 110.5 0 152.3 114.6 152.7 115.7 0.9 2.4 0.8 5-0.1 7.4-32.4 87.9-85.8 132.3-158.9 132.3zM385.8 716.8c8.4 28.8 41.5 119.8 128.3 119.8 62 0 108-38.4 136.9-114.1-7.5-18.3-45-97.6-130.7-97.6-85.4 0-126.4 75.2-134.5 91.9z" fill="#7F0518" ></path><path d="M697 579.1m-54.5 0a54.5 54.5 0 1 0 109 0 54.5 54.5 0 1 0-109 0Z" fill="#7F0518" ></path><path d="M683.3 568m-25.1 0a25.1 25.1 0 1 0 50.2 0 25.1 25.1 0 1 0-50.2 0Z" fill="#FFFFFF" ></path><path d="M715.4 604.6m-11.5 0a11.5 11.5 0 1 0 23 0 11.5 11.5 0 1 0-23 0Z" fill="#FFFFFF" ></path><path d="M329 579.1m-54.5 0a54.5 54.5 0 1 0 109 0 54.5 54.5 0 1 0-109 0Z" fill="#7F0518" ></path><path d="M315.3 568m-25.1 0a25.1 25.1 0 1 0 50.2 0 25.1 25.1 0 1 0-50.2 0Z" fill="#FFFFFF" ></path><path d="M347.5 604.6m-11.5 0a11.5 11.5 0 1 0 23 0 11.5 11.5 0 1 0-23 0Z" fill="#FFFFFF" ></path><path d="M726.9 464.4c-2.6 0-5.3-1-7.4-2.9-10.2-9.3-20.2-14-29.7-13.1-13.7 0.9-23.1 11.9-23.2 12.1-3.9 4.6-10.8 5.3-15.3 1.4-4.6-3.8-5.3-10.6-1.6-15.3 0.6-0.7 15.1-18.3 38.4-20 15.9-1 31.4 5.2 46.3 18.8 4.4 4.1 4.7 11 0.7 15.4-2.3 2.5-5.3 3.6-8.2 3.6z" fill="#7F0518" ></path><path d="M301.6 464.4c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.6-0.7 15.2-18.3 38.4-20 15.8-1 31.4 5.2 46.2 18.8 4.4 4.1 4.7 11 0.6 15.4-4 4.5-11 4.7-15.4 0.6-10.2-9.4-20.3-14-29.9-13.1-13.7 1-22.9 11.9-23 12-2.1 2.8-5.2 4.1-8.4 4.1z" fill="#7F0518" ></path><path d="M518.9 771c-70.7 0-123.5-34.6-124.3-35.1-5-3.4-6.3-10.1-3-15.1 3.4-5 10.1-6.4 15.1-3 4.4 2.9 108.1 70.4 216.2-0.1 5-3.3 11.8-1.9 15.1 3.2 3.3 5.1 1.8 11.8-3.2 15.1-40.2 26.3-80.4 35-115.9 35z" fill="#7F0518" ></path></symbol><symbol id="icon-zhu" viewBox="0 0 1024 1024"><path d="M164.1 390.9S61.8 288.4 123.3 240.7c61.5-47.7 185 5.4 185 5.4s-79.8 217.3-144.2 144.8z" fill="#FF6A48" ></path><path d="M192.5 416.5c-10.4 0-23.5-3.9-36.3-18.2-4.9-5-66.6-68.6-63.2-122.1 1.1-17.9 9.1-32.8 23.7-44.1 65.7-51 190.6 1.7 195.9 4 5.3 2.3 7.9 8.3 5.9 13.7-5.8 15.8-58.3 154.7-118 166-2.4 0.4-5.1 0.7-8 0.7z m0.2-184.9c-23.3 0-45.8 4.6-62.7 17.7-9.6 7.5-14.6 16.7-15.4 28.3-2.3 37.3 40.5 88.9 57.2 105.6 0.1 0.1 0.3 0.3 0.4 0.5 10.5 11.8 18.8 11.8 24.2 10.8 33.7-6.4 76.1-86.7 97.9-142.2-18.6-6.9-61.2-20.7-101.6-20.7z" fill="#7F0518" ></path><path d="M209.2 366.9s-57.5-57.6-22.9-84.4c34.6-26.8 104 3 104 3s-44.9 122.2-81.1 81.4z" fill="#FFC831" ></path><path d="M225.1 386.1c-6.9 0-15.5-2.5-23.8-11.7-4.9-5-38.8-40.5-36.8-72.2 0.7-11.3 6-21.1 15.2-28.2 39.1-30.4 111.9 0.3 114.9 1.6 5.3 2.3 7.9 8.3 5.9 13.7-5.5 14.9-34.6 89.7-69.9 96.4-1.7 0.1-3.6 0.4-5.5 0.4z m0.2-104c-12.4 0-24 2.4-32.4 8.9-4.3 3.3-6.5 7.3-6.8 12.4-1.2 19.1 21.8 46.7 30.8 55.8 0.1 0.1 0.3 0.3 0.4 0.5 4.8 5.4 7.9 4.8 9.2 4.6 15.5-2.9 36.9-41.3 49.7-72.5-13.3-4.7-32.9-9.7-50.9-9.7z" fill="#7F0518" ></path><path d="M853.5 390.9s102.3-102.5 40.8-150.2c-61.5-47.7-185 5.4-185 5.4s79.8 217.3 144.2 144.8z" fill="#FF6A48" ></path><path d="M825.1 416.5c-2.9 0-5.6-0.3-8-0.8-59.6-11.3-112.1-150.2-118-166-2-5.4 0.6-11.4 5.9-13.7 5.3-2.2 130.1-55 195.9-4 14.6 11.3 22.6 26.2 23.7 44.1 3.4 53.5-58.3 117.1-63.2 122.1-12.8 14.4-25.9 18.3-36.3 18.3zM723.3 252.3c21.7 55.5 64.1 135.8 97.8 142.2 5.5 1 13.7 1 24.2-10.8 0.1-0.2 0.3-0.3 0.4-0.5 16.7-16.8 59.5-68.5 57.2-105.7-0.8-11.6-5.8-20.8-15.4-28.3-46.1-35.8-134.8-7.8-164.2 3.1z" fill="#7F0518" ></path><path d="M808.4 366.9s57.5-57.6 22.9-84.4c-34.6-26.8-104 3-104 3s44.9 122.2 81.1 81.4z" fill="#FFC831" ></path><path d="M792.5 386.1c-2 0-3.8-0.2-5.5-0.5-35.4-6.7-64.4-81.4-69.9-96.4-2-5.4 0.6-11.4 5.9-13.7 3.1-1.3 75.7-32 114.9-1.6 9.2 7.2 14.4 16.9 15.2 28.3 2 31.7-32 67.3-36.9 72.2-8.2 9.1-16.7 11.7-23.7 11.7z m-51.1-94.4c12.7 31.2 34.1 69.6 49.7 72.5 1.2 0.2 4.4 0.9 9.2-4.6 0.1-0.2 0.3-0.3 0.4-0.5 9-9 32-36.6 30.8-55.8-0.3-5.1-2.5-9.1-6.8-12.5-20.6-15.8-60.8-6.8-83.3 0.9z" fill="#7F0518" ></path><path d="M886.1 594.6c0 186.5-168.2 263.5-375.7 263.5s-375.7-77-375.7-263.5 168.2-412 375.7-412 375.7 225.5 375.7 412z" fill="#FF6A48" ></path><path d="M510.4 868.9c-242 0-386.5-102.6-386.5-274.3 0-191.5 172.4-422.8 386.5-422.8s386.5 231.3 386.5 422.8c0 171.8-144.5 274.3-386.5 274.3z m0-675.4c-202.1 0-364.8 219.4-364.8 401.1 0 228 255.1 252.6 364.8 252.6s364.8-24.6 364.8-252.6c0-181.7-162.7-401.1-364.8-401.1z" fill="#7F0518" ></path><path d="M722.2 446.6m-62.3 0a62.3 62.3 0 1 0 124.6 0 62.3 62.3 0 1 0-124.6 0Z" fill="#7F0518" ></path><path d="M706.6 434m-28.7 0a28.7 28.7 0 1 0 57.4 0 28.7 28.7 0 1 0-57.4 0Z" fill="#FFFFFF" ></path><path d="M743.3 475.8m-13.1 0a13.1 13.1 0 1 0 26.2 0 13.1 13.1 0 1 0-26.2 0Z" fill="#FFFFFF" ></path><path d="M300 446.6m-62.3 0a62.3 62.3 0 1 0 124.6 0 62.3 62.3 0 1 0-124.6 0Z" fill="#7F0518" ></path><path d="M284.3 434m-28.7 0a28.7 28.7 0 1 0 57.4 0 28.7 28.7 0 1 0-57.4 0Z" fill="#FFFFFF" ></path><path d="M321.1 475.8m-13.1 0a13.1 13.1 0 1 0 26.2 0 13.1 13.1 0 1 0-26.2 0Z" fill="#FFFFFF" ></path><path d="M756.4 352.4c-2.6 0-5.3-0.9-7.3-2.9-12-11-24.1-16.3-35.2-15.4-16.4 1.1-27.6 14.2-27.7 14.3-3.8 4.6-10.6 5.3-15.2 1.5s-5.3-10.6-1.6-15.2c0.7-0.8 16.8-20.4 42.7-22.2 17.9-1.4 35.1 5.8 51.7 21.1 4.4 4.1 4.7 10.9 0.7 15.3-2.2 2.4-5.1 3.5-8.1 3.5z" fill="#7F0518" ></path><path d="M269.4 352.4c-2.4 0-4.8-0.8-6.8-2.4-4.7-3.8-5.4-10.6-1.6-15.3 0.7-0.8 16.9-20.4 42.7-22.2 18-1.4 35.1 5.8 51.7 21.1 4.4 4.1 4.7 10.9 0.7 15.3-4.1 4.4-10.9 4.7-15.3 0.6-12-11.1-24.1-16.2-35.4-15.4-16.3 1.2-27.3 14.2-27.4 14.3-2.3 2.7-5.5 4-8.6 4z" fill="#7F0518" ></path><path d="M274.5 643.6a235.9 154.6 0 1 0 471.8 0 235.9 154.6 0 1 0-471.8 0Z" fill="#FFC831" ></path><path d="M510.4 809.1c-136 0-246.7-74.2-246.7-165.5s110.7-165.5 246.7-165.5 246.7 74.2 246.7 165.5-110.7 165.5-246.7 165.5z m0-309.3c-124.1 0-225 64.5-225 143.8s100.9 143.8 225 143.8 225-64.5 225-143.8-101-143.8-225-143.8z" fill="#7F0518" ></path><path d="M383.5 657.3a35.5 45.6 0 1 0 71 0 35.5 45.6 0 1 0-71 0Z" fill="#FFFFFF" ></path><path d="M419 713.8c-25.5 0-46.3-25.3-46.3-56.5s20.8-56.5 46.3-56.5 46.3 25.3 46.3 56.5-20.7 56.5-46.3 56.5z m0-91.2c-13.4 0-24.6 15.9-24.6 34.8s11.3 34.8 24.6 34.8 24.6-15.9 24.6-34.8-11.2-34.8-24.6-34.8z" fill="#7F0518" ></path><path d="M573.8 657.3a35.5 45.6 0 1 0 71 0 35.5 45.6 0 1 0-71 0Z" fill="#FFFFFF" ></path><path d="M609.3 713.8c-25.5 0-46.3-25.3-46.3-56.5s20.8-56.5 46.3-56.5 46.3 25.3 46.3 56.5-20.8 56.5-46.3 56.5z m0-91.2c-13.4 0-24.6 15.9-24.6 34.8s11.3 34.8 24.6 34.8c13.4 0 24.6-15.9 24.6-34.8s-11.3-34.8-24.6-34.8z" fill="#7F0518" ></path></symbol><symbol id="icon-gou" viewBox="0 0 1024 1024"><path d="M199 309C113.6 431.4 84.3 497 78.6 533.5 73 570 76.1 608 95.8 638.3c19.7 30.3 62.3 45.9 103.2 15.9 32.9-24.1 71.7-117.7 84.7-158.1C319.8 384 373.8 232.2 319 214.7c-37.8-12.1-97.8 62.6-120 94.3z" fill="#FF6A48" ></path><path d="M153.5 681.3c-4.6 0-9.2-0.4-13.9-1.3-21.4-3.9-40.7-16.9-53-35.8C67.5 614.9 61 576 67.8 531.8 75 485.2 115 410.2 190.1 302.7c18.9-27 84.2-114 132.2-98.4 10.4 3.3 18.2 10.2 23.5 20.4 23 44.9-12.3 153.8-43.6 249.9l-8.1 24.9c-8.8 27.3-49.6 135-88.6 163.6-16.4 12-34.2 18.2-52 18.2zM208 315.2c-72.1 103.3-112 177.3-118.6 220-4.2 27-4.9 65.8 15.6 97.2 9 13.8 23 23.3 38.6 26.2 16.3 3 33.3-1.6 49-13.1 29.2-21.4 67-110 80.8-152.6l8.1-25c26.9-82.8 63.8-196.3 44.9-233.1-2.6-5-6-8-10.7-9.6-24-7.8-72.3 39.4-107.7 90z" fill="#7F0518" ></path><path d="M827.4 309c85.5 122.4 114.8 188 120.4 224.5 5.6 36.5 2.5 74.5-17.2 104.8-19.7 30.3-62.3 45.9-103.2 15.9-32.9-24.1-71.7-117.7-84.7-158.1-36.1-112.1-90.1-263.9-35.2-281.5 37.7-12 97.7 62.7 119.9 94.4z" fill="#FF6A48" ></path><path d="M872.9 681.3c-17.8 0-35.5-6.2-52-18.2-39.1-28.7-79.8-136.3-88.6-163.6l-8-24.7c-31.2-96.2-66.7-205.2-43.7-250.1 5.2-10.2 13.1-17.1 23.5-20.4 47.9-15.7 113.4 71.5 132.2 98.5 75 107.4 115 182.4 122.3 229.1 6.8 44.2 0.3 83-18.9 112.4-12.2 18.8-31.5 31.8-52.9 35.8-4.6 0.8-9.3 1.2-13.9 1.2z m-156.6-457c-2 0-3.8 0.3-5.6 0.8-4.7 1.5-8.1 4.6-10.7 9.6-18.9 36.9 18 150.5 45 233.4l8 24.7c13.7 42.6 51.4 131.2 80.7 152.6 15.8 11.5 32.8 16.1 49.1 13.1 15.5-2.8 29.6-12.4 38.5-26.2 20.4-31.4 19.7-70.1 15.6-97.2-6.6-42.7-46.5-116.7-118.6-219.9-32.7-46.9-76.6-90.9-102-90.9z" fill="#7F0518" ></path><path d="M817.1 562.9c0 197.1-136.2 308.7-300.1 308.7-163.8 0-293.2-111.7-293.2-308.7s131.7-408.5 295.5-408.5c163.9 0 297.8 211.5 297.8 408.5z" fill="#FFC831" ></path><path d="M517.1 882.5C335.2 882.5 213 754.1 213 562.9c0-198 131-419.4 306.4-419.4 173.8 0 308.7 225.4 308.7 419.4 0 188.2-127.9 319.6-311 319.6z m2.3-717.1c-160.3 0-284.6 213.7-284.6 397.5 0 178.1 113.4 297.8 282.2 297.8 143.9 0 289.1-92.1 289.1-297.8 0.1-183.8-125.2-397.5-286.7-397.5z" fill="#7F0518" ></path><path d="M682.9 451.6m-60.2 0a60.2 60.2 0 1 0 120.4 0 60.2 60.2 0 1 0-120.4 0Z" fill="#7F0518" ></path><path d="M667.7 439.4m-27.7 0a27.7 27.7 0 1 0 55.4 0 27.7 27.7 0 1 0-55.4 0Z" fill="#FFFFFF" ></path><path d="M703.2 479.8m-12.6 0a12.6 12.6 0 1 0 25.2 0 12.6 12.6 0 1 0-25.2 0Z" fill="#FFFFFF" ></path><path d="M357.5 451.6m-60.2 0a60.2 60.2 0 1 0 120.4 0 60.2 60.2 0 1 0-120.4 0Z" fill="#7F0518" ></path><path d="M342.4 439.4m-27.7 0a27.7 27.7 0 1 0 55.4 0 27.7 27.7 0 1 0-55.4 0Z" fill="#FFFFFF" ></path><path d="M377.9 479.8m-12.6 0a12.6 12.6 0 1 0 25.2 0 12.6 12.6 0 1 0-25.2 0Z" fill="#FFFFFF" ></path><path d="M640 323.9c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.8 16.4-19.8 41.5-21.6 17.1-1.1 34.1 5.6 50.2 20.5 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-11.5-10.6-23-15.6-33.8-14.8-15.6 1.1-26.1 13.5-26.2 13.6-2.1 2.7-5.3 4.1-8.4 4.1z" fill="#7F0518" ></path><path d="M327.3 323.9c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.8 16.4-19.8 41.5-21.6 17.2-1.1 34.1 5.6 50.2 20.5 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-11.5-10.6-23.2-15.6-33.8-14.8-15.6 1.1-26.1 13.5-26.2 13.6-2.1 2.7-5.3 4.1-8.4 4.1z" fill="#7F0518" ></path><path d="M327.3 676.2a197.4 135.1 0 1 0 394.8 0 197.4 135.1 0 1 0-394.8 0Z" fill="#FFFFFF" ></path><path d="M524.7 822.2c-114.9 0-208.4-65.5-208.4-146s93.5-146 208.4-146 208.4 65.5 208.4 146-93.5 146-208.4 146z m0-270.2c-102.8 0-186.5 55.7-186.5 124.2s83.7 124.2 186.5 124.2 186.5-55.7 186.5-124.2S627.6 552 524.7 552z" fill="#7F0518" ></path><path d="M577 543.6c0 21.8-25.3 39.6-56.5 39.6S464 565.5 464 543.6c0-21.9 25.3-39.6 56.5-39.6s56.5 17.8 56.5 39.6z" fill="#7F0518" ></path><path d="M464.4 698.2c-3.9 0-7.7-0.4-11.6-1.1-35.3-6.6-53.2-41.8-53.9-43.3-2.7-5.4-0.5-11.9 4.9-14.6 5.3-2.7 12-0.5 14.7 4.9 0.1 0.3 13.9 27 38.5 31.6 16 3 33.6-3.9 52.6-20.2v-84.1c0-6 4.9-10.9 10.9-10.9s10.9 4.9 10.9 10.9v89.1c0 3.1-1.3 6-3.6 8.1-21.6 19.7-42.9 29.6-63.4 29.6z" fill="#7F0518" ></path><path d="M576.6 698.2c-20.5 0-41.7-10-63.5-29.7-4.5-4.1-4.8-11-0.7-15.4s11-4.8 15.4-0.7c20.5 18.7 39.6 26.5 56.3 23.3 24.4-4.6 38.2-31.3 38.4-31.5 2.7-5.4 9.3-7.6 14.7-4.9 5.4 2.7 7.6 9.2 4.9 14.7-0.7 1.5-18.6 36.6-53.9 43.3-3.8 0.6-7.7 0.9-11.6 0.9z" fill="#7F0518" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1024 1024"><path d="M281.9 536.2L294 816.7l72.4-164z" fill="#5CCFEA" ></path><path d="M294 834.1c-1.1 0-2.1-0.1-3.2-0.3-7.9-1.5-13.8-8.3-14.2-16.4l-12.1-280.5c-0.3-7.7 4.4-14.7 11.7-17.2 7.2-2.5 15.3 0 19.8 6.2l84.4 116.5c3.6 5 4.3 11.6 1.8 17.2l-72.4 164c-2.7 6.5-9 10.5-15.8 10.5z m7.8-240.8l6.4 148.1 38.2-86.6-44.6-61.5z" fill="#4C4848" ></path><path d="M910.3 180.3L505.2 844.2 113.9 304.4z" fill="#80D4EE" ></path><path d="M505.2 861.6c-5.6 0-10.8-2.7-14.1-7.2L99.8 314.6c-3.6-4.9-4.3-11.3-2-16.9 2.3-5.6 7.4-9.6 13.4-10.5l796.3-124.1c6.8-1 13.4 1.9 17.2 7.5 3.8 5.6 3.9 12.9 0.4 18.7L520 853.3c-3 5-8.3 8.1-14.2 8.3h-0.6zM144.7 317.2l359.2 495.6 371.9-609.5-731.1 113.9z" fill="#4C4848" ></path><path d="M910.3 180.3L366.4 652.7l-84.5-116.5z" fill="#5CCFEA" ></path><path d="M366.4 670.1c-0.7 0-1.3 0-2-0.1-4.8-0.6-9.2-3.1-12.1-7.1l-84.4-116.5c-2.9-4-4-9.1-2.9-13.9 1.1-4.8 4.1-9 8.4-11.5l628.3-355.9c7.8-4.4 17.6-2.2 22.8 5.1 5.2 7.3 4 17.3-2.8 23.2L377.8 665.8c-3.2 2.8-7.3 4.3-11.4 4.3z m-59-128.4l61.9 85.3 398.4-346-460.3 260.7z" fill="#4C4848" ></path><path d="M408.6 711L297.1 811.4l69.3-158.7z" fill="#5CCFEA" ></path><path d="M297.1 828.8c-3.6 0-7.1-1.1-10.2-3.3-6.6-4.8-9-13.6-5.8-21.1l69.2-158.7c2.5-5.7 7.9-9.7 14.1-10.3 6.3-0.7 12.3 2 16 7.1l42.2 58.3c5.2 7.2 4.2 17.2-2.4 23.1L308.8 824.3c-3.3 3-7.5 4.5-11.7 4.5z m73-141.2l-24.9 57 40-36.1-15.1-20.9z" fill="#4C4848" ></path></symbol><symbol id="icon-zhuye-" viewBox="0 0 1024 1024"><path d="M265.2 646.8v116.5c0 39.8 32.3 72.2 72.2 72.2h300.2V572c0-24.9 20.3-45.2 45.2-45.2 24.9 0 45.2 20.3 45.2 45.2v263.4h28.1c39.8 0 72.2-32.3 72.2-72.2V523.8c37.7 0 55.5-46.4 27.6-71.7L592.2 213.4c-25.8-23.4-65.2-23.4-91 0L237.6 452.1c-27.9 25.3-10 71.7 27.6 71.7v46.6" fill="#5CC7B9" ></path><path d="M700.6 848h-44.1V568.6c0-16.1-13.1-29.2-29.2-29.2s-29.2 13.1-29.2 29.2V848H281.9c-48.6 0-88.2-39.5-88.2-88.2V643.4c0-8.8 7.2-16 16-16s16 7.2 16 16v116.5c0 31 25.2 56.2 56.2 56.2h284.2V568.6c0-33.8 27.4-61.2 61.2-61.2 33.8 0 61.2 27.4 61.2 61.2V816h12.1c31 0 56.2-25.2 56.2-56.2V504.4h16c16 0 22-12.3 23.4-16.1 1.4-3.8 5.3-17-6.6-27.7L526 221.9c-19.7-17.9-49.9-17.9-69.6 0L192.9 460.6c-11.8 10.7-8.1 23.9-6.6 27.7 1.4 3.8 7.4 16.1 23.4 16.1h16V567c0 8.8-7.2 16-16 16s-16-7.2-16-16v-32.8c-16.9-4.8-30.7-17.3-37.4-34.3-8.6-22.2-2.7-47 15-63L435 198.2c15.4-14 35.4-21.7 56.2-21.7 20.8 0 40.8 7.7 56.2 21.7L811 436.8c17.7 16 23.5 40.7 15 63-6.6 17-20.5 29.5-37.4 34.3v225.8c0.1 48.6-39.4 88.1-88 88.1z m0 0" fill="#333333" ></path><path d="M327 645.2c-8.8 0-16-7.2-16-16v-91.4c0-8.8 7.2-16 16-16s16 7.2 16 16v91.4c0 8.8-7.1 16-16 16z m0 0M308.8 667.5c0 9.3 8.2 16.9 18.2 16.9 10.1 0 18.2-7.6 18.2-16.9 0-9.3-8.2-16.9-18.2-16.9s-18.2 7.6-18.2 16.9z m0 0" fill="#FBFFFD" ></path><path d="M215.2 240.6c0 12 9.7 21.8 21.8 21.8 12 0 21.8-9.7 21.8-21.8 0-12-9.7-21.8-21.8-21.8-12.1 0.1-21.8 9.8-21.8 21.8z m0 0M269.8 202.9c0 7.8 6.3 14.2 14.2 14.2 7.8 0 14.2-6.3 14.2-14.2 0-7.8-6.3-14.2-14.2-14.2-7.8 0-14.2 6.4-14.2 14.2z m0 0M756.5 181l10.7 32.9c0.6 1.7 2.2 2.9 4 2.9h34.6c4.1 0 5.8 5.2 2.5 7.6l-28 20.3c-1.5 1.1-2.1 3-1.5 4.7l10.7 32.9c1.3 3.9-3.2 7.1-6.5 4.7l-28-20.3a4.2 4.2 0 0 0-5 0L722 287c-3.3 2.4-7.7-0.8-6.5-4.7l10.7-32.9c0.6-1.7-0.1-3.6-1.5-4.7l-28-20.3c-3.3-2.4-1.6-7.6 2.5-7.6h34.6c1.8 0 3.4-1.2 4-2.9l10.7-32.9c1.3-3.8 6.8-3.8 8 0z" fill="#5CC7B9" ></path></symbol><symbol id="icon-wf_Bzhan" viewBox="0 0 1024 1024"><path d="M204.288 63.488c-8.704 8.192-16.896 20.48-18.944 26.624-3.584 11.776 12.8 62.464 20.48 62.464S235.52 176.128 235.52 184.32c0 16.384-17.92 26.112-47.104 26.112-34.816 0-104.448 27.648-128.512 51.2-9.216 8.704-26.112 33.792-37.888 56.32L0 358.4v469.504l21.504 40.448c24.576 47.616 35.84 59.392 82.944 84.992l40.96 22.528h722.944l40.96-19.968c51.712-24.576 72.704-45.056 95.744-94.72l17.92-38.4v-231.424l0.512-231.424-17.92-36.352c-9.216-20.48-28.16-47.104-42.496-59.904-31.232-30.208-86.528-54.272-122.368-54.272-54.272 0-65.024-22.528-26.624-57.856 20.48-18.432 23.04-25.088 23.04-45.568 0-19.968-3.584-28.16-16.896-41.984-9.216-9.216-22.528-16.896-29.696-16.896-11.776 0-34.304 9.216-40.448 16.896-1.536 1.536-35.84 35.328-75.776 74.24l-73.216 71.168-83.456-0.512c-45.568 0-88.064-2.56-93.696-4.608-5.632-2.56-38.4-31.232-72.704-65.024C249.856 40.448 235.008 32.256 204.288 63.488z m652.8 262.656c5.12 0.512 19.968 9.216 31.744 20.48l21.504 19.968 1.536 217.088c1.024 197.12 0.512 218.112-8.704 236.032-14.336 27.136-34.816 40.448-65.536 41.984-14.336 0.512-173.568 0.512-353.28 0l-326.144-1.536-45.056-45.056V373.248l20.992-22.528c15.872-17.92 25.6-23.552 41.984-25.088 16.384-1.024 634.88-0.512 680.96 0.512z" fill="#1296db" ></path><path d="M279.04 502.272c-20.48 22.016-20.992 25.088-20.992 66.56 0 39.936 1.024 44.544 17.92 64 29.184 33.28 55.808 32.256 84.48-2.56 11.264-12.8 12.8-22.016 13.312-64 0-47.104-0.512-48.64-19.968-68.096-27.136-27.648-47.616-26.112-74.752 4.096z m393.216-3.584c-18.944 18.944-19.968 20.992-19.968 69.12 0 47.616 0.512 49.664 18.432 67.072 24.576 23.552 35.84 26.624 58.368 13.824 29.184-16.896 39.936-43.52 36.864-90.624-2.56-35.328-4.608-41.984-22.016-59.904-25.088-25.6-45.568-25.6-71.68 0.512z" fill="#1296db" ></path></symbol><symbol id="icon-a-beehoneybeeapisapidae" viewBox="0 0 1024 1024"><path d="M99.691531 690.18662s97.729869 176.075719 307.693879 94.840823l-55.444366-81.542779-252.249513-13.298044z" fill="#6E6E96" opacity=".2" ></path><path d="M913.803437 528.341031s49.468049 41.053968 49.468049 75.08144c0 0-38.000437-26.20807-46.511522 0l-2.956527-75.08144z" fill="#C2944D" ></path><path d="M973.815447 623.502391l-16.520279-11.391696c-5.529253-3.783173-17.123393-9.789014-24.693957-9.789014-3.412026 0-4.711042 0.97848-5.811831 4.360983l-20.564943-2.842652-3.888613-98.712566 18.198878 15.10317c5.453337 4.525468 53.280745 45.309511 53.280745 83.196073v20.075702z m-41.214236-42.268632c4.841787 0 9.810102 1.033308 14.470533 2.534768-5.322592-10.404781-13.652321-20.931872-21.70369-29.679142l1.092354 27.743271a30.45096 30.45096 0 0 1 6.140803-0.598897z" fill="#6E6E96" ></path><path d="M709.010185 648.483144s18.540502 56.709642 69.181039 95.751822c0.101222 0.088569 0.185574 0.177139 0.291013 0.265707l0.345842 0.219315a176.029325 176.029325 0 0 0 10.23186 7.287986c16.554019 12.985943 45.693311 41.640212 35.545803 76.49433-13.909594 47.818973 87.000334 25.124151 73.116045-50.999032-13.875853-76.131618-96.498334-53.980864-96.498334-53.980864-16.166001-16.330487-31.543315-38.02996-38.91987-65.537046" fill="#F2CD5E" ></path><path d="M842.931146 864.0945c-7.819402 0-14.879638-2.024441-20.273928-6.140803-4.327242-3.306586-13.795719-13.087165-8.173679-32.399484 8.228507-28.270469-16.085867-52.74933-31.589708-64.984543a185.970172 185.970172 0 0 1-10.105333-7.199416l-1.113442-0.818212c-0.097004-0.084352-0.194009-0.164486-0.282578-0.248837-52.331789-40.54364-71.60615-98.109451-72.399056-100.542998l20.037744-6.570996c0.177139 0.539851 18.304317 54.225484 65.604527 90.694937l0.598897 0.451282a169.29806 169.29806 0 0 0 9.62031 6.853575l0.721207 0.518763c19.670814 15.432142 50.918898 47.355039 39.160273 87.73841-0.813994 2.804694-1.809344 7.806749 0.729642 9.742621 3.643993 2.796259 15.162216 3.158971 28.283122-4.875528 9.194334-5.630475 29.894239-22.441767 23.610038-56.920521-3.306586-18.135613-11.269386-31.30713-23.664867-39.151837-24.736133-15.655674-59.38359-6.621608-59.729432-6.533038l-5.913054 1.585811-4.306153-4.352547c-20.737863-20.948742-34.736026-44.571433-41.610689-70.222782l20.370933-5.461772c5.474425 20.429979 16.32627 39.489244 32.281392 56.730729 13.247433-2.395588 44.723266-5.689522 70.189042 10.438522 17.58311 11.125988 28.730186 29.021199 33.133344 53.187958 5.984752 32.817025-6.47821 62.234677-33.340006 78.683257-10.603008 6.486645-21.84287 9.797449-31.838546 9.797449z" fill="#6E6E96" ></path><path d="M922.293434 579.669035c0 123.701754-143.950377 265.534904-321.523338 265.534904-177.577179 0-321.531774-141.83315-321.531774-265.534904 0-123.701754 143.950377-223.974826 321.531774-223.974826 177.572961 0.004218 321.523339 100.281507 321.523338 223.974826z" fill="#FFD863" ></path><path d="M600.770096 855.7479c-187.016133 0-332.075735-148.408364-332.075736-276.078865 0-129.315359 148.969303-234.518788 332.075736-234.518788 183.102215 0.004218 332.0673 105.207646 332.0673 234.518788 0 127.670501-145.051167 276.078866-332.0673 276.078865z m0-489.50973c-171.478552 0-310.987813 95.747604-310.987813 213.430865 0 57.578464 33.858769 121.588744 90.576845 171.221279 61.72435 54.02304 140.002718 83.769664 220.410968 83.769664 80.404031 0 158.6824-29.750841 220.410967-83.769664 56.709642-49.632535 90.572628-113.638597 90.572628-171.221279-0.004218-117.679043-139.509261-213.426647-310.983595-213.430865z" fill="#6E6E96" ></path><path d="M793.433574 565.472645c0-66.494438-28.561482-178.450219-76.253928-194.63309a435.389686 435.389686 0 0 0-71.36153-12.93955c59.573381 22.344763 99.130107 134.34272 99.130107 207.57264 0 86.317085-48.312431 233.637312-161.605187 279.271577 0 0-13.171516-0.948957-36.659244-3.960311a334.505064 334.505064 0 0 0 54.094739 4.432681c11.028984 0 21.944092-0.552504 32.694715-1.615335 79.105015-17.528281 159.960328-163.477794 159.960328-278.128612z m-118.775615-0.805558c0-77.666819-32.720021-198.019811-92.69829-208.576425a449.931917 449.931917 0 0 0-71.108476 8.498432c6.419164 4.576079-7.726615-1.417108 0 0 75.57068 13.901159 111.846124 130.22214 111.846125 200.077993 0 105.279345-51.758197 207.298497-160.727929 250.005758 20.231753 10.889803 34.381749 13.538446 57.127182 20.434197 103.284427-56.532503 155.561388-159.104159 155.561388-270.439955z m182.764808-119.901711c-21.813347-20.105225-48.379912-37.55759-78.535642-51.568406 36.642374 25.115716 67.042724 127.700024 67.042724 184.890471 0 86.30865-37.207531 189.652123-114.40198 240.731289 0 0-39.750734 13.791501-88.700021 23.715478 55.435931-7.026496 106.413875-27.528174 149.243447-56.127615 75.532721-56.127615 97.755174-128.505583 97.755174-216.395827 0-52.589061-7.671786-88.522882-32.403702-125.24539z" fill="#6E6E96" ></path><path d="M886.882595 477.523355c7.093977 15.529146 10.948849 31.846981 10.948849 48.717319 0 102.044458-138.48017 219.065558-309.292344 219.065558-157.121894 0-286.783095-98.999362-306.576219-194.295684-1.720774 9.400996-2.711907 18.94539-2.711907 28.658487 0 123.701754 143.950377 265.534904 321.531774 265.534904 177.577179 0 321.523339-141.83315 321.523339-265.534904-0.012653-36.802643-12.842545-71.509146-35.423492-102.14568z" fill="#6E6E96" opacity=".21" ></path><path d="M738.862248 450.813392c-64.060891 41.222671-214.215336-22.370068-275.108821-117.016882-60.906138-94.651032-58.333412-204.793252 5.731697-246.020141 64.065109-41.226889 165.375707 2.079269 226.27341 96.730301 60.914573 94.646814 107.164605 225.079833 43.103714 266.306722z" fill="#B7DBE3" ></path><path d="M733.34143 442.234826c-18.523631 11.914676-47.654488 14.365093-82.040454 6.908403-69.265391-15.027254-142.858023-64.731487-178.977417-120.86332-35.221048-54.731594-49.775933-117.23198-38.936741-167.189268 6.258895-28.865149 20.649294-51.24787 41.614907-64.739922 20.961395-13.487835 47.295993-17.308967 76.161141-11.045854 49.961506 10.839192 100.80027 49.986812 136.021319 104.718406 40.29902 62.618477 82.824925 156.577826 70.083602 215.311908-3.643993 16.819727-11.467612 28.890454-23.926357 36.899647z m-29.004329-263.244756c-38.080571-59.181146-93.731599-101.65644-148.859646-113.613292-34.251004-7.435602-65.903976-2.652861-91.517366 13.825242-25.600738 16.48232-43.069973 43.30194-50.501357 77.565597-11.956852 55.128047 3.635558 123.368565 41.716128 182.549711 38.810213 60.315676 117.687479 113.676556 191.803092 129.758205 40.294803 8.743053 73.967997 5.390073 97.405114-9.683574 16.98843-10.936197 28.034284-27.667354 32.817026-49.729539 14.048774-64.756793-28.42652-161.617839-72.862991-230.67235z" fill="#6E6E96" ></path><path d="M628.357316 427.85708c53.15 54.588197 204.810122 35.195743 285.446121-43.310376 80.644434-78.514554 102.934368-186.408801 49.79702-240.992779-53.15-54.592414-161.600969-35.195743-242.24962 43.310375-80.644434 78.510336-146.130869 186.400366-92.993521 240.99278z" fill="#B7DBE3" ></path><path d="M934.503342 174.426643c-16.085867-16.520279-37.94139-25.313942-62.584737-26.929277 11.417001 29.830975 18.004868 64.689311 18.004868 101.960106 0 85.874239-34.845683 159.04933-83.676877 187.037221 31.383046-10.974155 61.336332-27.95415 84.558352-50.564621 70.766851-68.902678 90.328008-163.595886 43.698394-211.503429z" fill="#DCF2F7" ></path><path d="M621.048242 434.972145c27.536609 28.287339 80.307027 39.965831 141.166772 31.235431 61.361637-8.802099 119.205809-35.904297 158.703488-74.351798 84.537264-82.31038 106.962161-196.889498 49.986812-255.416919-56.988002-58.523203-172.12806-39.18136-256.669542 43.120585-80.960753 78.814002-153.937618 192.996668-93.18753 255.412701z m107.409225-240.802989c76.485895-74.457237 178.686404-93.972001 227.833916-43.500166 49.130642 50.463399 26.882884 152.107186-49.603011 226.572858-79.81357 77.70056-224.970176 90.808812-271.0262 43.500167-46.781448-48.055158 15.309832-151.132924 92.795295-226.572859z" fill="#6E6E96" ></path><path d="M603.25847 767.161755s22.264629 68.109773 83.086416 115.000877c0.126528 0.101222 0.22775 0.215097 0.350059 0.324754 0 0 0.172921 0.097004 0.421759 0.257273 3.951877 3.015573 8.017628 5.946794 12.281606 8.751488 19.885911 15.588192 54.87921 50.003682 42.694608 91.863209-16.705852 57.409761 104.482221 30.168382 87.81011-61.260416-16.676329-91.42458-115.895005-64.815839-115.895005-64.815839-19.417759-19.620203-37.894997-45.684876-46.730837-78.708562 0 0 0.054829-22.403809-28.502436-34.639022-37.355146-15.997298-35.516279 23.226238-35.51628 23.226238s-3.606035-3.601817 0 0c3.601817 3.5976 5.942577 10.438522 5.942577 10.438522" fill="#FFD863" ></path><path d="M764.091839 1024c-8.920191 0-16.950472-2.294366-23.061752-6.963232-10.257166-7.827837-13.559534-21.176492-9.06359-36.621286 10.24873-35.208396-19.704555-65.35569-38.742731-80.361856a223.650072 223.650072 0 0 1-11.990593-8.532174l-0.822429-0.451281-0.932086-0.885693c-62.310594-48.164815-85.300647-116.839744-86.245386-119.74566l5.259328-1.716557 1.400238-1.400238-7.169894 0.337407c-0.109657-2.340759-0.649508-23.158757 13.871636-33.234566 9.308209-6.452904 21.526551-6.520386 36.330273-0.181356 30.054507 12.880503 34.225698 35.988649 34.803507 42.589168 6.824052 24.820485 20.193795 47.966589 39.784475 68.890026 14.862768-2.834217 53.158435-7.439819 83.913062 12.024334 20.594465 13.032336 33.660542 34.044342 38.843954 62.466644 7.026496 38.527635-7.574782 73.035911-39.063268 92.322925-12.391263 7.583217-25.512169 11.463395-37.114744 11.463395z m-71.015688-149.964653l0.438628 0.324754c4.091057 3.121013 7.912189 5.845572 11.682709 8.325512l0.708555 0.510328c54.069434 42.390942 52.226349 82.799619 46.313295 103.107289-1.383368 4.753218-2.222667 11.037419 1.619553 13.968639 5.900401 4.512815 21.121663 3.606035 36.364014-5.731697 8.903321-5.453337 37.338276-26.655134 29.3333-70.555971-4.078404-22.336328-13.930682-38.607769-29.286907-48.36726-30.307562-19.257491-73.09074-8.266466-73.520933-8.152591l-5.896184 1.556289-4.310371-4.327242c-24.651782-24.909054-41.2775-52.972862-49.421655-83.398516l-0.362713-1.349627 0.004218-1.400238c-0.021088-0.459717-0.801341-15.790636-22.108578-24.921707-7.35125-3.146318-13.192604-3.829567-16.009951-1.872608-3.091489 2.146751-4.34833 7.882665-4.71526 11.842978 3.095707 4.508598 4.875528 9.422084 5.276199 10.598789l-1.615335 0.552504c8.831622 20.472155 31.93555 65.701532 75.22062 99.071061l0.286796 0.219314z" fill="#6E6E96" ></path><path d="M603.25847 767.161755s22.264629 68.109773 83.086416 115.000877c0.126528 0.101222 0.22775 0.215097 0.350059 0.324754 0 0 0.172921 0.097004 0.421759 0.257273 3.951877 3.015573 8.017628 5.946794 12.281606 8.751488 19.885911 15.588192 54.87921 50.003682 42.694608 91.863209-6.145021 21.130098 6.368553 30.758844 23.812482 29.970155 0.3838-0.021088 0.780253-0.063264 1.164053-0.088569 0.915216-0.067481 1.830432-0.13918 2.762518-0.26149 0.615767-0.088569 1.248405-0.181356 1.86839-0.278361 0.700119-0.109657 1.39602-0.248837 2.104575-0.388018 0.797123-0.164486 1.602682-0.337407 2.404023-0.535633 0.493457-0.118092 0.982697-0.265708 1.480372-0.404888 0.999568-0.269925 1.999135-0.560939 3.007138-0.894128l0.417541-0.143398c27.612526-9.249163 57.645945-39.65373 48.7848-88.244521-5.352115-29.337518-19.215315-46.481999-35.56689-56.292101 5.318374 8.721965 9.489565 19.405106 11.902023 32.627234 2.990267 16.406404 1.539418 30.725103-2.74143 42.875965-0.12231 0.26149-0.248837 0.527198-0.316318 0.856169-0.982697 2.695037-2.117227 5.271981-3.361415 7.73505-10.674706 16.81551-40.708126 30.66184-40.708126 17.346925 0-15.297179-3.399373-69.290696-72.753333-98.556515-44.938363-18.970695-51.138212-82.314597-54.820164-96.502551-0.008435 0.021088-28.274687-16.46545-28.274687-5.018926z" fill="#6E6E96" opacity=".21" ></path><path d="M739.832293 445.773379c-55.406408 35.651242-185.244748-19.341843-237.909726-101.192506-52.664978-81.850663-50.442311-177.096374 4.964097-212.747616 55.40219-35.651242 143.009856 1.796691 195.679052 83.647354s92.672985 194.645743 37.266577 230.292768z" fill="#DCF2F7" ></path><path d="M551.706935 243.713122a212.42708 152.971791 90 1 0 305.943581 0 212.42708 152.971791 90 1 0-305.943581 0Z" fill="#B7DBE3" ></path><path d="M704.678726 41.479944c78.725433 0 142.773671 90.720243 142.773671 202.233178s-64.048239 202.233178-142.773671 202.233178-142.777889-90.720243-142.777889-202.233178 64.052456-202.233178 142.777889-202.233178z m-163.174128 202.233178c0 122.757015 73.191962 222.629417 163.16991 222.629417 89.969513 0 163.165693-99.868184 163.165693-222.629417 0-58.864827-16.596195-114.321846-46.722402-156.16872C790.257733 44.689526 748.904317 21.087923 704.678726 21.087923c-89.973731 0-163.174128 99.868184-163.174128 222.625199z" fill="#6E6E96" ></path><path d="M598.619127 258.34814a182.634063 120.11259 90 1 0 240.22518 0 182.634063 120.11259 90 1 0-240.22518 0Z" fill="#DCF2F7" ></path><path d="M673.422207 537.337139s17.490323 112.993307-11.159729 200.622061l-51.551536 6.680654 62.711265-207.302715zM787.866363 507.261544s28.101766 95.659035 0 180.230039l-25.600738 14.985078 25.600738-195.215117z" fill="#6E6E96" opacity=".21" ></path><path d="M271.056208 296.053346a10.501785 10.501785 0 0 1-7.494648-3.129448c-1.016438-1.029091-100.526127-104.127944-9.886018-226.703603a10.543961 10.543961 0 1 1 16.958907 12.538878c-80.032884 108.227437 4.293501 195.670617 7.920624 199.339916a10.543961 10.543961 0 0 1-7.498865 17.954257z" fill="#6E6E96" ></path><path d="M265.79688 76.144271m-41.26063 0a41.260629 41.260629 0 1 0 82.521259 0 41.260629 41.260629 0 1 0-82.521259 0Z" fill="#EDA862" ></path><path d="M265.79688 127.948862c-28.5657 0-51.804591-23.238891-51.804591-51.804591s23.238891-51.804591 51.804591-51.804591 51.804591 23.238891 51.80459 51.804591-23.238891 51.804591-51.80459 51.804591z m0-82.521259c-16.937819 0-30.716668 13.778849-30.716668 30.716668s13.778849 30.716668 30.716668 30.716668 30.716668-13.778849 30.716668-30.716668-13.778849-30.716668-30.716668-30.716668zM136.456215 383.935155a10.518656 10.518656 0 0 1-7.498865-3.129448c-1.126095-1.142965-111.652115-115.65882-10.936197-251.85306a10.548179 10.548179 0 0 1 16.958907 12.538879c-37.857039 51.193041-47.848496 104.482221-29.70023 158.395604 13.61858 40.446636 38.426413 65.84493 38.67525 66.093767a10.543961 10.543961 0 0 1-7.498865 17.954258z" fill="#6E6E96" ></path><path d="M121.736845 134.532511m-37.291882 0a37.291882 37.291882 0 1 0 74.583764 0 37.291882 37.291882 0 1 0-74.583764 0Z" fill="#EDA862" ></path><path d="M121.736845 182.368355c-26.376774 0-47.835844-21.45907-47.835844-47.835844 0-26.376774 21.45907-47.835844 47.835844-47.835843 26.376774 0 47.835844 21.45907 47.835844 47.835843 0 26.376774-21.45907 47.835844-47.835844 47.835844z m0-74.583765c-14.748893 0-26.747921 11.999028-26.747921 26.747921s11.999028 26.747921 26.747921 26.747921 26.747921-11.999028 26.747921-26.747921-11.999028-26.747921-26.747921-26.747921z" fill="#6E6E96" ></path><path d="M536.607982 410.839126C476.140473 290.410218 344.163818 230.828401 232.684624 277.217613c-112.170878 46.67179-162.853591 183.688459-118.615348 312.160302-23.276849 23.268414-18.793557 63.647568-4.959879 96.890569 39.927873 95.954266 182.646716 114.077226 317.845605 57.814649 135.19889-56.254142 229.723394-195.5947 189.803957-291.553184-13.972858-33.57619-46.195203-49.219211-80.150977-41.690823z" fill="#FFD863" ></path><path d="M285.018467 477.142733a32.239216 23.091275 68.78 1 0-43.051258 16.715774 32.239216 23.091275 68.78 1 0 43.051258-16.715774Z" fill="#6E6E96" ></path><path d="M398.758745 422.536624a28.620529 21.290367 64.076 1 0-38.296036 18.615384 28.620529 21.290367 64.076 1 0 38.296036-18.615384Z" fill="#6E6E96" ></path><path d="M306.066377 533.165948c9.679356-36.477889 48.953504-77.426417 104.473786-104.165903 76.536506-36.853254 167.345319-45.123937 187.534896-3.184276" fill="#FFD863" ></path><path d="M376.036104 507.480858c32.437443-58.717212-126.510665-18.118743-214.607571 66.890891 0 0.012653 142.326607 63.97654 214.607571-66.890891z" fill="#FFD863" ></path><path d="M615.400896 453.883794c-13.96864-33.567755-46.195203-49.210776-80.142541-41.690823-60.471727-120.420473-192.448382-180.006508-303.927576-133.617295-112.170878 46.676008-162.853591 183.692676-118.619565 312.168736-23.272631 23.268414-18.793557 63.643351-4.959879 96.890569 39.927873 95.954266 182.646716 114.073009 317.845605 57.814649 135.203107-56.271013 229.727612-195.615788 189.803956-291.565836z m-204.063609 230.5163c-116.489685 48.468481-239.461797 32.859201-273.864634-49.818109-11.918894-28.641617-15.777984-63.436689 4.276631-83.487085-38.118529-110.694723 5.554559-228.749132 102.204725-268.959583 96.05127-39.970049 230.157805 31.766847 282.266063 135.523644 29.261601-6.482427 57.021743 6.996973 69.054511 35.925385 34.390184 82.673092-67.443394 182.338832-183.937296 230.815748z" fill="#C2944D" opacity=".34" ></path><path d="M545.7264 406.25883c-62.972755-125.393006-202.19522-186.210574-316.959912-138.459083-115.857047 48.206991-170.470549 190.921616-124.33861 324.893189l2.433546-10.527091c-23.044882 23.036447-25.723048 63.411383-7.165676 108.016557 14.664541 35.237919 43.166978 62.424469 82.420037 78.615776 66.680011 27.490216 159.669315 21.766954 248.757353-15.301397 143.722628-59.805349 236.813154-205.122223 195.303687-304.889185-15.516493-37.275012-52.386617-56.456586-91.770422-47.730404l11.319997 5.381638z m61.606257 50.189255c36.747814 88.307785-52.816811 223.51511-184.300009 278.217181-84.204075 35.04391-171.360459 40.750302-233.148072 15.271874-34.630587-14.280741-58.645513-37.013522-71.365748-67.586792-11.788149-28.33795-17.258356-65.747925 2.7583-85.756146l4.504381-4.500163-2.075052-6.031146c-42.635562-123.819847 6.950579-255.34522 112.892085-299.427413 104.929285-43.664653 232.705226 12.905809 290.899458 128.783943l3.568076 7.098195 7.75192-1.720775c29.864716-6.621608 56.760253 7.372338 68.514661 35.651242z" fill="#6E6E96" ></path><path d="M333.493329 640.435993c-12.020116 0-19.611768-1.353845-19.902781-1.412891a10.543961 10.543961 0 0 1-8.367688-12.340652 10.527091 10.527091 0 0 1 12.311129-8.371906c3.964529 0.725425 97.506337 16.878773 143.402092-86.371913a10.543961 10.543961 0 1 1 19.270143 8.565914c-39.312105 88.442748-111.753337 99.931448-146.712895 99.931448z" fill="#6E6E96" ></path><path d="M323.455478 543.756303c4.112145 7.233157-13.804154 15.48697-34.879424 27.46491s-37.325623 23.146104-41.437768 15.912947c-4.116362-7.237375 5.46599-30.138859 26.545477-42.125235 21.071052-11.973722 45.65957-8.489998 49.771715-1.252622z" fill="#FFFFFF" opacity=".35" ></path><path d="M450.189675 468.9237c4.019358 7.287986-14.002381 15.305614-35.233701 27.017847-21.218668 11.708015-37.612419 22.673734-41.635994 15.385748-4.023576-7.292204 5.854007-30.071378 27.08111-41.78361 21.222885-11.708015 45.76501-7.903753 49.788585-0.619985z" fill="#FFFFFF" opacity=".35" ></path><path d="M596.113882 618.888353s-109.606587 116.725869-69.442529 121.259773l-47.308646-11.125988 116.751175-110.133785z" fill="#6E6E96" opacity=".21" ></path></symbol><symbol id="icon-butterfly" viewBox="0 0 1244 1024"><path d="M593.236079 492.19171s-237.23288 90.02956-330.285432 199.363578c-55.823589 65.597433-46.774469 202.034136 4.353307 253.147021 219.586351 219.576424 404.485237-305.208002 404.485237-305.208002l-78.553112-147.302597z" fill="#FFA1A1" ></path><path d="M588.833134 480.586201c-9.808591 3.722896-241.293319 92.437033-335.328715 202.917704-61.591596 72.373104-49.181942 215.764178 5.033355 269.969548 47.434663 47.429699 97.475353 65.572613 148.732189 53.927393 159.111624-36.13195 271.5282-350.433747 276.238906-363.791498l1.811809-5.147525-2.576244-4.819909-78.56304-147.292669-5.137597-9.634856-10.210663 3.871812z m71.261199 154.773209c-1.111905 3.147088-112.525782 314.738617-258.334256 347.837647-42.396343 9.619964-84.683481-6.284249-125.675051-47.270856-45.707239-45.702275-55.327203-175.646247-3.678222-236.33442 89.940211-105.675652 322.894242-194.910995 325.237184-195.789599l-15.353224-5.763043 78.558076 147.292669-0.754507-9.972398z" fill="#6E6E96" ></path><path d="M594.208996 493.636194s-199.120349 75.559903-277.211822 167.326815c-46.858855 55.059154-39.264146 169.575444 3.648438 212.483065a202.704258 202.704258 0 0 0 21.706968 18.892457 12.350088 12.350088 0 0 1 8.249938-3.186799c5.842465 0 10.692158 4.020728 12.077075 9.411482a24.283212 24.283212 0 0 1 18.698868-8.776107 24.322922 24.322922 0 0 1 22.615354 15.397899 14.861802 14.861802 0 0 1 11.714713-5.748152c5.097886 0 9.590181 2.556389 12.295486 6.443092 2.203955-1.955762 5.420537-3.211619 9.034228-3.211618 6.646611 0 12.027437 4.169644 12.05722 9.317168 122.617312-43.791188 211.058437-294.719362 211.058437-294.719362l-65.944903-123.62994z" fill="#FFFFFF" opacity=".42" ></path><path d="M285.089471 760.33952s205.394671-1.424628 296.784329-78.806268c0 0-0.734652 68.645244 11.55587 104.09218l25.936177-49.181942-12.369943-108.440523s-202.307149 118.452632-316.982282 90.357175c0.004964 0-19.75617 4.94897-4.924151 41.979378zM711.01859 492.19171s237.23288 90.02956 330.275504 199.363578c55.828553 65.597433 46.774469 202.024209-4.353306 253.147021-219.581387 219.576424-404.480273-305.208002-404.480273-305.208002l78.558075-147.302597z" fill="#FFA1A1" ></path><path d="M706.615645 503.792255c2.342943 0.888531 235.341648 90.18344 325.227257 195.794562 51.648981 60.688174 42.033981 190.622218-3.673258 236.329457-40.996534 40.996534-83.273744 56.900747-125.665124 47.275819-145.803511-33.09903-257.222351-344.695522-258.334256-347.842611l-0.749543 9.967434 78.558076-147.297633-15.363152 5.772972z m-85.859916 139.817093c4.705741 13.357752 117.127281 327.659549 276.228977 363.796462 51.256836 11.640256 101.297526-6.507623 148.727225-53.932357 54.215298-54.210334 66.619988-197.606372 5.03832-269.969548-94.030433-110.485634-325.515161-199.194807-335.333679-202.917704l-10.210664-3.876776-5.142561 9.63982-78.558075 147.292669-2.566317 4.819909 1.816774 5.147525z" fill="#6E6E96" ></path><path d="M987.257495 660.963009c-78.086509-91.771876-277.22175-167.326815-277.221749-167.326815l-65.934976 123.624976s88.426233 250.918247 211.058437 294.719362c0.029783-5.157452 5.410609-9.317168 12.062184-9.317168 3.618655 0 6.830274 1.260821 9.034228 3.216582a14.941224 14.941224 0 0 1 12.295486-6.457984c4.775235 0 8.98459 2.278413 11.714714 5.748152a24.33285 24.33285 0 0 1 22.615354-15.387971c7.530178 0 14.241319 3.415137 18.703831 8.776107a12.464257 12.464257 0 0 1 12.072111-9.411482c3.191763 0 6.055911 1.226074 8.259866 3.191763a202.853173 202.853173 0 0 0 21.706968-18.892457c42.892729-42.917549 50.492402-157.428875 3.633546-212.483065z" fill="#FFFFFF" opacity=".42" ></path><path d="M1029.931815 766.723047s-220.802497-1.424628-312.19712-78.806269c0 0 3.782463 58.236026-8.52295 93.682962l-30.507895-54.225225 9.33206-104.757338s218.261 118.824922 332.926207 90.739392c0.009928 0.009928 23.806681 16.331105 8.969698 53.366478z" fill="#FFA1A1" ></path><path d="M866.993054 471.671105m-3.946271 0a3.94627 3.94627 0 1 0 7.892541 0 3.94627 3.94627 0 1 0-7.892541 0Z" fill="#FFFFFF" opacity=".42" ></path><path d="M607.939038 334.916715c-16.966479-41.373788-46.59577-82.027815-86.589604-116.695426-21.925377-19.979543-46.064637-36.767324-71.851899-49.176978-123.108735-65.274782-259.292281-52.011343-312.60912 33.918067-13.184017 21.250292-24.427164 62.574441-25.692948 87.632015-10.652447 56.151204-20.088748 135.314871 21.682148 266.921737l0.014891-0.049638c27.663601 92.134238 101.004658 156.07374 217.159023 156.07374 163.390473 0 295.846159-73.231852 295.846159-226.823662 0.004964-49.534376-13.794572-102.61295-37.95865-151.799855z" fill="#FFE073" ></path><path d="M619.42045 330.20601c-18.073421-44.064201-49.172014-86.033651-89.945175-121.361455-23.17627-21.126196-48.352977-38.350796-74.59195-50.983824-130.485033-69.196233-271.905454-52.716212-328.538152 38.559278-14.856838 23.950633-26.234009 67.707074-27.539505 93.548938l0.203518-1.687713c-11.952979 62.991405-18.679012 144.686642 22.04451 272.992539l12.618137 39.765497 11.163725-40.197353-0.843857 2.174172-22.98268-1.975617c31.470883 104.81194 114.95311 164.924306 229.047472 164.924306 190.140724 0 308.255813-91.667635 308.255813-239.233316 0-50.646281-13.56127-105.03035-39.234363-157.279959l0.342507 0.754507z m14.072548 156.520488c0 158.084104-146.414066 214.414007-283.436505 214.414007-102.354829 0-177.175117-53.669273-205.275538-147.238066l-8.994517-29.956906-13.988163 27.981289-0.531133 1.06723-0.337543 1.211182 23.786826-0.426892c-38.946459-122.721554-33.262837-197.904203-21.314822-260.865825l0.158843-0.833929 0.039711-0.84882c1.126797-22.238101 11.560834-61.909283 23.846392-81.715092 48.839436-78.726847 178.967071-91.682526 296.243268-29.50023 24.511549 11.804063 47.677892 27.678493 69.310401 47.385024 38.077783 33.004717 66.863217 71.742694 83.462371 112.232913l0.158844 0.387182 0.188627 0.377253c23.995308 48.854327 36.682938 99.455934 36.682938 146.32968z" fill="#6E6E96" ></path><path d="M616.342855 367.365479c-13.332933-32.498403-36.598553-64.425961-68.014833-91.657707-17.214672-15.695731-36.181588-28.879748-56.434144-38.628772-56.329903-29.867556-116.134509-38.762796-164.532161-27.673529a22.476366 22.476366 0 0 1-10.721941 2.799618c-1.116869 0.342506-2.208918 0.724724-3.31586 1.087086-2.387617 22.803981-21.587835 40.604389-45.02719 40.604389a45.468973 45.468973 0 0 1-8.483239-0.824001c1.444484 3.588872 2.283376 7.793263 2.283376 12.305413 0 7.679094-2.407473 14.479585-6.125405 18.818 0.481495 2.124533 0.759471 4.328487 0.759471 6.596972a29.594544 29.594544 0 0 1-28.730832 29.574688c-5.66873 33.605344-12.613173 108.519945 15.660984 195.65061 2.481931 12.682667 17.373516 47.563723 147.054403 59.094774 12.786908 1.136724-127.9485 0.814073-121.902516 11.392063 27.34095 47.737458 73.857299 78.265208 144.97951 78.265208 128.335681 0 232.383187-57.531157 232.383186-178.16789-0.009928-38.906748-10.851002-80.603187-29.832809-119.236922z" fill="#FFF1A6" ></path><path d="M683.608146 334.916715c16.981371-41.373788 46.600734-82.027815 86.589604-116.695426 21.925377-19.979543 46.064637-36.767324 71.861826-49.176978 123.108735-65.274782 259.282354-52.011343 312.604156 33.918067 13.184017 21.250292 24.427164 62.574441 25.692949 87.632015 10.652447 56.151204 20.093712 135.314871-21.677185 266.921737l-0.014891-0.049638c-27.668565 92.134238-101.009622 156.07374-217.159023 156.07374-163.390473 0-295.851123-73.231852-295.851123-226.823662-0.009928-49.534376 13.794572-102.61295 37.953687-151.799855z" fill="#FFE073" ></path><path d="M695.084594 339.62742c16.619009-40.495184 45.399479-79.233161 83.243961-112.029396 21.855883-19.915013 45.032154-35.784479 69.111847-47.375096 117.708053-62.400706 247.835688-49.440063 296.680088 29.28182 12.285558 19.800844 22.719595 59.472027 23.841428 81.715092l0.044675 0.84882 0.158843 0.833929c11.943051 62.976514 17.626673 138.159164-21.314822 260.865826l23.603162-0.173736 0.620483 3.866849-24.298103-3.569017c-28.100421 93.578721-102.920709 147.238067-205.275538 147.238067-137.022439 0-283.441469-56.329903-283.441469-214.414008 0-46.858855 12.687631-97.465425 36.692866-146.339607l0.183663-0.37229 0.148916-0.377253z m-61.849717 147.099078c0 147.565681 118.120054 239.233316 308.260777 239.233316 114.07947 0 197.571625-60.107402 229.052436-164.924306l-24.303067-3.569016v2.0054l0.650266 1.965689 12.072111 36.181588 11.536015-36.355323c40.713594-128.291006 33.992525-209.991207 22.034582-272.99254l0.203519 1.687713c-1.305496-25.846828-12.687631-69.598305-27.544469-93.548938-56.622771-91.270526-198.043191-107.75551-328.960081-38.340868-25.807117 12.409654-50.983824 29.634255-74.393396 50.968932-40.529931 35.119322-71.638452 77.083809-89.711873 121.152973l0.337543-0.75947c-25.668129 52.274428-39.234363 106.663461-39.234363 157.29485z" fill="#6E6E96" ></path><path d="M1047.538632 290.797912c0-2.268485 0.277976-4.467476 0.764435-6.592009-3.732824-4.333451-6.140297-11.138906-6.140297-18.822963 0-4.51215 0.84882-8.711577 2.283376-12.305414a45.950468 45.950468 0 0 1-8.488203 0.824001c-23.439355 0-42.629645-17.795444-45.017262-40.604388-1.106941-0.362362-2.194027-0.744579-3.31586-1.087086a22.4168 22.4168 0 0 1-10.716977-2.804582c-48.412543-11.089267-108.207222-2.194027-164.532161 27.673529-20.25752 9.739097-39.224435 22.933041-56.439108 38.628772-31.421245 27.226782-54.691829 59.159304-68.019797 91.652743-18.966916 38.633736-29.80799 80.335138-29.80799 119.24685 0 120.636732 104.042542 178.167889 232.373259 178.167889 76.741302 0 124.821267-35.531322 151.090024-89.880644 4.944006-10.235483-133.786001 9.158325-121.9323 7.515287 61.194487-8.468348 120.934563-20.396508 140.963745-66.381723 16.430382-26.402781 20.972316-69.36004 20.783689-109.929682-0.158844-33.982597-3.628583-66.28741-6.229646-85.775531a29.614399 29.614399 0 0 1-27.618927-29.525049z" fill="#FFF1A6" ></path><path d="M695.382426 529.877348c0 145.7638-20.967352 263.94342-46.848927 263.94342s-46.848927-118.17962-46.848927-263.94342c0-145.783655 20.972316-217.377433 46.848927-217.377433 25.891503 0 46.848927 71.58385 46.848927 217.377433z" fill="#C5C5E8" ></path><path d="M682.972771 529.877348c0 161.742471-23.707404 245.011251-35.814262 251.811742a3.117305 3.117305 0 0 1 1.370026-0.277977c0.71976 0 1.231038 0.198554 1.365062 0.277977-12.101895-6.785599-35.814262-90.069271-35.814262-251.811742 0-168.498286 27.608999-204.967779 34.439272-204.967779s34.454164 36.469492 34.454164 204.967779z m-34.444236-229.787087c-48.978424 0-59.258581 124.960255-59.258581 229.787087 0 28.27912 1.662894 276.353074 59.258581 276.353074s59.258581-248.073954 59.258581-276.353074c0.004964-104.826832-10.280158-229.787087-59.258581-229.787087z" fill="#6E6E96" ></path><path d="M645.426121 333.114833m-61.348367 0a61.348367 61.348367 0 1 0 122.696734 0 61.348367 61.348367 0 1 0-122.696734 0Z" fill="#C5C5E8" ></path><path d="M645.426121 284.17612a48.596206 48.596206 0 0 1 34.60308 14.335633 48.62599 48.62599 0 0 1 14.330669 34.598116c0 26.988516-21.950197 48.943677-48.923821 48.943677-26.99348 0-48.943677-21.95516-48.943677-48.943677-0.009928-26.983552 21.945233-48.933749 48.933749-48.933749z m-73.762985 48.928785c0 40.673883 33.094066 73.762985 73.762985 73.762986 40.658991 0 73.74313-33.094066 73.74313-73.762986 0-19.696603-7.669166-38.216771-21.597762-52.150331a73.291418 73.291418 0 0 0-52.155295-21.602726c-40.663955 0.004964-73.753058 33.089102-73.753058 73.753057z" fill="#6E6E96" ></path><path d="M486.334353 48.923821h-0.014892c1.484195 0.665157 148.1812 68.560858 148.181201 222.842645 0 0.183663 0 0.367326 0.014891 0.555952 0.342506 7.152925 6.001309 11.064448 11.282858 10.895677 5.95167-0.188627 10.657411-5.281549 10.573025-11.243147-0.238265-16.678575 1.677785-164.487486 142.864905-218.439699a10.940351 10.940351 0 0 0 6.309068-14.112259 10.935387 10.935387 0 0 0-14.112259-6.309068c-155.061113 59.258581-157.180682 220.941486-156.907669 239.183677-0.08935-5.961598 4.631283-10.736833 10.582953-10.920496a10.890713 10.890713 0 0 1 11.263002 10.304977c-0.019855-168.56778-159.488877-241.983295-161.097168-242.703055a10.930424 10.930424 0 0 0-8.939915 19.944796z" fill="#6E6E96" ></path><path d="M117.380438 443.143792s23.474102 129.258959 108.232041 183.74727c91.796695 59.020316 262.910936 74.825252 367.588853-17.810336 0 0-74.984095 115.394894-243.139875 104.469434-168.160744-10.930424-246.927302-145.972282-232.681019-270.406368zM1172.945635 443.143792s-23.474102 129.258959-108.232041 183.74727c-91.791731 59.020316-262.910936 74.825252-367.593817-17.810336 0 0 74.989059 115.394894 243.144839 104.469434 168.165708-10.930424 246.927302-145.972282 232.681019-270.406368zM236.597505 799.663233s30.497966 168.250093 148.543563 148.548526c118.05056-19.701567 227.354795-194.548633 227.354795-194.548633s-93.12701 240.002715-235.634517 240.002715c-142.502543-0.009928-155.066077-125.9431-140.263841-194.002608zM688.969116 744.911838s142.070687 290.693671 288.509572 181.414255c146.433921-109.294308 76.215133-192.622654 76.215133-192.622655s59.298292 181.692231-45.612926 236.324493c-104.916182 54.652118-277.579148-4.363234-319.111779-225.116093z" fill="#6E6E96" opacity=".15" ></path><path d="M634.912662 320.149226m-18.167734 0a18.167734 18.167734 0 1 0 36.335468 0 18.167734 18.167734 0 1 0-36.335468 0Z" fill="#E8E8E8" ></path><path d="M941.778594 531.376434m-44.193261 0a44.193261 44.193261 0 1 0 88.386522 0 44.193261 44.193261 0 1 0-88.386522 0Z" fill="#FFFFFF" ></path><path d="M349.048829 352.310086m-50.457654 0a50.457654 50.457654 0 1 0 100.915309 0 50.457654 50.457654 0 1 0-100.915309 0Z" fill="#FFFFFF" ></path><path d="M870.69113 388.308011m-17.780552 0a17.780553 17.780553 0 1 0 35.561105 0 17.780553 17.780553 0 1 0-35.561105 0Z" fill="#FFD645" ></path><path d="M308.126753 480.978346m-28.542205 0a28.542205 28.542205 0 1 0 57.08441 0 28.542205 28.542205 0 1 0-57.08441 0Z" fill="#FFD645" ></path><path d="M501.71736 344.472149m-8.686758 0a8.686758 8.686758 0 1 0 17.373516 0 8.686758 8.686758 0 1 0-17.373516 0Z" fill="#FFD645" ></path></symbol><symbol id="icon-a-cowanimal" viewBox="0 0 1173 1024"><path d="M101.929175 53.541686s-93.700298 83.063312 4.144951 183.800168c58.043394 59.752071 155.226764 37.849081 152.368015-12.547513-0.685349-12.162591 15.434426-64.465016 7.036559-59.451644-33.460033 19.968993-157.794474-11.763586-135.417373-97.643399 0.004694 0.004694 14.378238-57.067007-28.132152-14.157612z" fill="#FFFFFF" ></path><path d="M190.517523 285.09563c-34.581939 0-68.431588-14.42518-92.864736-39.581229-33.117359-34.09844-49.208968-70.205984-47.824188-107.31808 1.995022-53.452497 39.820631-89.353497 43.993747-93.155774C107.03643 31.746662 116.804995 25.817927 125.484512 25.817927c6.590613 0 14.6505 3.797582 17.504555 14.453345 1.398862 5.22461 1.520911 11.805834 0.370839 20.119206-0.647795 4.675392-1.173542 8.149077-2.093599 10.834141-4.764581 18.851781-1.544381 35.699151 9.57141 50.086778 19.311809 24.987059 58.353209 38.060318 86.940694 38.060318h0.004695c9.397725 0 17.298011-1.49744 21.672976-4.107398 5.73158-3.417355 12.941823-2.168706 16.913089 2.746089 5.323187 6.585918 3.797582 15.2138-1.83542 41.491755-1.821337 8.487057-4.567426 21.316219-4.384354 24.630303 0.774538 13.645948-4.00882 26.353062-13.82902 36.750645-14.533146 15.387484-38.520347 24.212521-65.802854 24.212521zM120.597883 52.508969c-2.459744 1.858891-5.848934 4.764581-10.331865 9.289759l-0.553912 0.521053c-0.323898 0.291038-34.858895 31.732579-36.436136 76.993752-1.056188 30.375964 12.810386 60.60641 41.2148 89.851079 20.039405 20.630871 47.749082 32.460175 76.026753 32.460175 20.546376 0 38.773832-6.304268 48.74894-16.866147 5.356046-5.665861 7.862732-12.157896 7.454339-19.302421-0.347368-6.149361 1.624182-15.739547 4.867853-30.873546 0.835562-3.910242 1.858891-8.688906 2.732006-13.134284a93.395177 93.395177 0 0 1-16.528167 1.394168h-0.009388c-33.258184 0-80.458048-14.76316-105.510826-47.176393-15.673829-20.278808-20.367997-44.791756-13.580229-70.886639 0.995164-3.971267 1.671124-8.562163 1.905832-12.270556z" fill="#6E6E96" ></path><path d="M77.402144 100.126614c-2.45505 29.568567 7.078806 65.253636 44.219068 103.497027 48.645668 50.082084 124.766305 42.782652 146.453363 9.430585-0.445946 3.008962-0.685349 5.515648-0.596159 7.224325 2.858749 50.396593-94.329316 72.299583-152.368016 12.547513-50.41537-51.903421-49.978812-99.112674-37.708256-132.69945z" fill="#6E6E96" opacity=".15" ></path><path d="M350.846848 364.065627c153.494616 20.912521 265.661772 131.272422 250.030191 246.011983-15.636275 114.744255-153.241131 191.080823-306.735746 170.158914-153.49931-20.907827-265.666466-131.277116-250.034886-246.016677 15.645664-114.739561 153.241131-191.071435 306.740441-170.15422zM21.734 531.173331c-17.312093 127.075836 103.520498 248.856649 269.360777 271.444988 165.835585 22.593033 314.84727-62.404276 332.168752-189.484806 17.312093-127.08053-103.529886-248.856649-269.365471-271.444988C188.062473 319.086104 39.050788 404.088107 21.734 531.173331z" fill="#6E6E96" opacity=".21" ></path><path d="M342.664912 407.364637a339.637174 231.32393 0 1 0 679.274348 0 339.637174 231.32393 0 1 0-679.274348 0Z" fill="#FFFFFF" opacity=".36" ></path><path d="M1102.303425 511.9601c0-193.019515-156.46133-334.797486-413.1901-334.797486-256.724075 0-464.840036 48.809964-464.840036 241.834173 0 112.134297 70.252926 228.760914 179.448673 306.834324l-0.445946-0.300427s62.033437 72.224477 62.033437 216.847114v55.086067h103.299872s-17.082079-127.08053 55.710392-167.253223c7.895591 14.566005 13.157754 32.26302 13.157754 53.626181v86.081662h82.636143v-48.213805s-5.032149-64.521346 13.397156-104.515662c16.274682-16.274682 32.117501-14.913373 47.458044 0.431864 13.875962 17.082079 24.653773 35.633433 24.653773 66.206552v86.081662h82.640837v-48.20911s-3.567568-52.321202 6.360598-96.075547c43.824757 54.133151 28.64851 160.427903 28.64851 160.427903h79.195317v-44.758897c0-144.970006 27.282507-222.592776 42.914089-255.184388 37.036989-46.988627 56.921487-105.501437 56.921487-174.148957z" fill="#F0F0FF" ></path><path d="M568.698514 1009.199287a0.314509 0.314509 0 0 0-0.093883 0H465.304759a11.735421 11.735421 0 0 1-11.735421-11.735422v-55.086067c0-130.004997-51.513805-199.516244-58.437704-208.26148-112.678821-81.29361-182.593766-201.863328-182.593767-315.119531 0-94.366869 48.190334-163.023778 143.233164-204.074282 77.1158-33.305126 186.151946-49.495313 333.346988-49.495313 254.165754 0 424.925521 139.261897 424.925521 346.532908 0 69.849227-19.724896 130.526049-58.62547 180.36873-15.655052 33.14083-41.214799 108.763884-41.2148 248.964615v44.758897a11.735421 11.735421 0 0 1-11.735421 11.735421h-79.195317a11.735421 11.735421 0 0 1-11.618067-13.387769c0.117354-0.849644 9.777953-71.684647-10.571267-123.766446-2.990185 31.615225-1.140683 59.892896-1.112518 60.273123 0.018777 0.267568 0.028165 0.530441 0.028165 0.798009v48.213805a11.735421 11.735421 0 0 1-11.735421 11.735421H805.613199a11.735421 11.735421 0 0 1-11.735422-11.735421v-86.081662c0-26.043247-8.632576-42.209963-21.630728-58.325044-5.576672-5.459318-10.735563-8.228877-15.340543-8.228877-4.159033 0-8.731153 2.276672-13.617783 6.778379-15.927314 36.966577-11.528878 96.131877-11.481936 96.73273 0.023471 0.300427 0.037553 0.610242 0.037554 0.910669v48.213805a11.735421 11.735421 0 0 1-11.735422 11.735421h-82.636142a11.735421 11.735421 0 0 1-11.735421-11.735421v-86.081662c0-12.862022-2.131153-25.001141-6.355904-36.243675-49.36857 39.623476-40.651499 134.741413-39.294885 147.011969a11.74481 11.74481 0 0 1-11.388053 14.59417z m-91.658334-23.470843h78.683653c-2.347084-35.243817-2.126458-129.897031 62.920634-165.788643a11.740115 11.740115 0 0 1 15.988338 4.680086c9.669987 17.842534 14.570699 37.76928 14.570699 59.216936v74.34624h59.1653v-36.041825c-0.474111-6.581224-4.365577-68.976112 14.472121-109.857626a11.735421 11.735421 0 0 1 2.361167-3.38919c20.15676-20.15676 43.599437-20.039405 64.056624 0.431864 0.286344 0.286344 0.553912 0.582077 0.812091 0.896586 14.171695 17.438836 27.282507 38.431158 27.282507 73.609256v74.346241h59.169994v-36.088767c-0.342674-5.44993-3.182646-55.715086 6.651637-99.061038a11.735421 11.735421 0 0 1 20.569846-4.788052c37.389052 46.185924 35.206264 124.695892 32.57753 156.076409h54.405413v-33.023476c0-146.481528 27.611099-225.935024 44.068854-260.258784a11.641538 11.641538 0 0 1 1.366003-2.192177c36.10285-45.796308 54.410107-101.943257 54.410107-166.882384 0-193.235446-161.333877-323.062065-401.454679-323.062065-309.129773 0-453.104615 73.116369-453.104615 230.098752 0 106.402717 66.877819 220.316105 174.538573 297.291079 1.422333 1.018635 2.553628 2.295448 3.365719 3.722476 10.533714 13.37838 63.131872 86.950083 63.131872 222.367456v43.350646z" fill="#6E6E96" ></path><path d="M473.669767 353.146991a213.612832 145.491059 0 1 0 427.225664 0 213.612832 145.491059 0 1 0-427.225664 0Z" fill="#FFFFFF" opacity=".36" ></path><path d="M701.5294 172.219654c0.633713 2.154623 1.262731 4.525178 1.896445 7.144525 20.912521 85.297736-91.001151 150.096038-91.001151 150.096037-24.372123 8.430727-61.62035-6.29488-68.966724-12.256474-107.365022-87.156627 3.234282-87.410112 3.234282-87.410111 75.501006 19.677954 109.252078-32.385069 128.638994-59.531445-61.883223-3.497156-128.80329 1.084353-186.062757 24.221909-156.611544 63.319639 54.194175 296.971876 136.666022 296.971877 82.485929 0 163.765457-73.210252 175.707421-172.651518 14.889902-123.977684 118.302435-93.127609 118.302435-93.127609s-122.653929-44.557047-218.414967-53.457191z" fill="#6E6E96" ></path><path d="M43.552495 437.707742a293.685958 291.939728 0 1 0 587.371917 0 293.685958 291.939728 0 1 0-587.371917 0Z" fill="#F0F0FF" ></path><path d="M337.238454 741.382891c-168.407989 0-305.42138-136.229464-305.42138-303.670455 0-167.445685 137.01339-303.675149 305.42138-303.675149s305.42138 136.229464 305.421379 303.675149c0 167.440991-137.008696 303.670455-305.421379 303.670455z m0-583.879455c-155.470861 0-281.950537 125.700444-281.950537 280.204306s126.48437 280.199612 281.950537 280.199612 281.950537-125.69575 281.950537-280.199612-126.479676-280.204306-281.950537-280.204306z" fill="#6E6E96" ></path><path d="M85.734294 394.202188a231.201881 229.817102 0 1 0 462.403762 0 231.201881 229.817102 0 1 0-462.403762 0Z" fill="#FAFAFA" opacity=".57" ></path><path d="M269.675286 314.495207c2.192177 22.358325-8.369702 33.25349-23.28777 35.605268-14.913373 2.351778-28.521768-4.736416-30.713944-27.090046-2.187483-22.358325 8.1303-42.39773 23.038979-44.730732 14.913373-2.356473 28.779947 13.866574 30.962735 36.21551zM414.316701 322.832051c-0.93414 23.452066-13.275109 25.803844-29.545097 23.686774-16.265294-2.126458-30.305552-7.909674-29.376107-31.36174 0.938834-23.447372 14.885208-40.750077 31.145808-38.628313 16.265294 2.107682 28.70484 22.846518 27.775396 46.303279z" fill="#6E6E96" ></path><path d="M446.927089 814.27394s233.074855-70.839697 174.693481-275.744847l-196.864039 226.958353 22.170558 48.786494z" fill="#6E6E96" opacity=".2" ></path><path d="M610.776388 588.205371a292.23546 221.292492 7.759 1 0-579.119915-78.907416 292.23546 221.292492 7.759 1 0 579.119915 78.907416Z" fill="#FFABAB" ></path><path d="M451.527374 357.484402c46.599011 24.940117 58.104418 94.526471 58.104418 123.860331 0 107.280527-153.278684 195.756215-301.727069 195.756215-63.282086 0-121.414668-27.789478-167.337719-85.579386 30.943959 87.489913 127.953645 159.733166 250.809423 176.477264 159.939709 21.795024 302.961635-58.724048 319.466332-179.838289 12.768138-93.82704-54.170705-184.447963-159.315385-230.676135z" fill="#F0A1A1" ></path><path d="M349.570034 340.594784c153.49931 20.912521 265.661772 131.272422 250.030192 246.011983-15.636275 114.744255-153.236437 191.080823-306.735747 170.158914-153.49931-20.907827-265.661772-131.277116-250.030191-246.016677 15.636275-114.739561 153.236437-191.071435 306.735746-170.15422zM20.457186 507.702489C3.145093 634.783018 123.977684 756.559138 289.817963 779.152171c165.830891 22.593033 314.842576-62.404276 332.168752-189.484806 17.312093-127.08053-103.525192-248.856649-269.365471-271.444988C186.780965 295.615262 37.773974 380.617265 20.457186 507.702489zM1095.942826 446.434201c7.900286 45.880803-24.714797 27.888055-39.923903 5.027455-7.200854-10.824753-2.563016-30.676391-2.563016-30.676391s14.866432-53.856195-57.376821-79.688205c-42.346094-15.148082-51.480946-58.653635-45.707119-77.726042 5.346658-17.673544 25.578524-3.778806 25.578524-3.778806s99.690057 69.023054 119.992335 186.841989z" fill="#6E6E96" ></path><path d="M254.971344 446.029532a28.709535 37.539266 84.098 1 0-74.680557 7.72012 28.709535 37.539266 84.098 1 0 74.680557-7.72012Z" fill="#6E6E96" ></path><path d="M403.595916 463.979838a37.539266 28.155623 6.944 1 0-74.527815-9.076933 37.539266 28.155623 6.944 1 0 74.527815 9.076933Z" fill="#6E6E96" ></path><path d="M776.420165 605.162815c-13.059177-36.464301 30.366576-63.352498 88.363028-84.138276 58.00584-20.790472 108.632448-27.57824 121.691624 8.886061 13.068565 36.464301-15.302989 105.365306-73.304135 126.151084-58.015229 20.790472-123.681952-14.429874-136.750517-50.898869z" fill="#6E6E96" ></path><path d="M677.068088 100.699303s97.089487 79.092045 3.520627 183.81425c-55.49446 62.117932-133.783802 39.712666-152.762326-6.177526-8.566858-14.162306-18.100714-63.765585-9.496303-59.10897 34.26743 18.551354 157.160762-18.340116 131.225481-103.1966-0.014083 0.004694-16.748793-56.423905 27.512521-15.331154z" fill="#FFFFFF" ></path><path d="M601.773626 334.360928c-37.670702 0-71.506269-20.386774-84.485645-50.814374-7.153913-12.937128-18.818922-56.644531-11.618067-69.422058a13.509817 13.509817 0 0 1 18.241539-5.219915c2.262589 1.225178 7.637412 3.27653 18.274398 3.27653 28.103987 0 68.511389-14.242107 88.03913-40.632723 11.280087-15.246659 14.007399-32.76999 8.106829-52.091188l0.098577-0.032859c-0.882504-2.356473-1.422333-4.924183-1.919915-7.294738-1.197013-5.694026-1.802561-10.81067-1.80256-15.204412 0-5.295022 0.87781-9.604269 2.675676-13.171837 3.135705-6.215079 8.900143-9.782647 15.795877-9.782647 8.487057 0 18.250927 5.525036 31.624613 17.898865 4.332718 3.628592 43.618214 37.924187 47.838271 91.245247 2.933855 37.022907-11.636844 73.768858-43.313093 109.214525-24.207827 27.094741-55.301999 42.022196-87.55563 42.02689 0.009388 0.004694 0.004694 0.004694 0 0.004694z m-74.402571-99.924765c1.727454 12.233003 6.210385 30.74211 10.496161 37.82561l0.802702 1.586629c9.017498 21.809107 34.966861 37.036989 63.103708 37.03699h0.009388c25.479947 0 50.363734-12.143814 70.055771-34.192324 27.235566-30.48393 39.820631-61.343394 37.417217-91.724052-3.591039-45.350362-39.23386-74.881376-39.600006-75.172415l-0.572688-0.497582c-4.670698-4.337412-8.172547-7.097583-10.707399-8.848507 0.384922 3.689616 1.253343 8.247654 2.408109 12.167285 8.078664 26.442251 4.036985 51.649936-11.683786 72.895742-24.35804 32.920204-72.219782 50.143108-106.904993 50.143108-5.379517 0-10.327171-0.408393-14.824184-1.220484z" fill="#6E6E96" ></path><path d="M712.724992 136.816235c3.689616 29.446519-4.356188 65.497733-39.858184 105.243258-46.51921 52.0818-122.883943 47.955625-145.941699 15.537698 0.567994 2.985491 0.910669 5.478095 0.891892 7.191466-0.751067 50.467006 97.267866 68.304846 152.762325 6.172832 48.213805-53.954773 45.81039-101.103001 32.145666-134.145254z" fill="#6E6E96" opacity=".15" ></path><path d="M1116.367154 759.23012a11.735421 11.735421 0 0 1-11.233146-15.152776c31.479094-103.436003-19.983075-292.620382-20.504128-294.521521a11.735421 11.735421 0 1 1 22.625893-6.238549c2.210953 8.01764 53.795171 197.638577 20.330443 307.590085a11.740115 11.740115 0 0 1-11.219062 8.322761z" fill="#6E6E96" ></path><path d="M465.300065 947.776092h102.783513v44.998299H465.300065z" fill="#B8B8D4" ></path><path d="M579.823694 1004.505118H453.564643v-68.469142h126.254356v68.469142z m-102.788208-23.470842h79.312671v-21.527457h-79.312671v21.527457z" fill="#6E6E96" ></path><path d="M637.468083 923.389886h82.636142v46.523904H637.468083z" fill="#B8B8D4" ></path><path d="M731.839646 981.649212H625.732662V911.654465h106.106984v69.994747z m-82.636142-23.470843h59.1653v-23.053061H649.203504v23.053061z" fill="#6E6E96" ></path><path d="M805.60381 924.305249h82.640837v45.61793h-82.640837z" fill="#B8B8D4" ></path><path d="M899.984762 981.653906h-106.111679v-69.088772h106.111679v69.088772z m-82.64553-23.470843h59.169994v-22.147087h-59.169994v22.147087z" fill="#6E6E96" ></path><path d="M925.248777 938.115493h77.209684v47.946237h-77.209684z" fill="#B8B8D4" ></path><path d="M1014.193882 997.797151h-100.680526v-71.417079h100.680526v71.417079z m-77.209684-23.470842h53.738841v-24.475395h-53.738841v24.475395z" fill="#6E6E96" ></path><path d="M525.681154 992.769697s-16.42959-206.158492 70.412528-206.158492c0 0 41.374401-4.694169 41.374401 107.965875 0 0 5.567284-51.635854-27.291896-51.635853s-42.083221 114.237285-42.08322 149.82847h-42.411813z" fill="#6E6E96" opacity=".2" ></path><path d="M678.786154 969.91379s-17.664156-163.821787 73.078815-163.821786c0 0-31.770132 4.454766-31.770132 163.821786h-41.308683z" fill="#6E6E96" opacity=".2" ></path><path d="M847.231697 969.91379V842.931838s0.234708-64.455628 47.392325-17.307399l-6.360598 144.279963-41.031727 0.009388z" fill="#6E6E96" opacity=".2" ></path><path d="M964.585909 986.06173s-21.123758-211.181253 16.42959-269.858359 128.99575-174.792058 100.877681-319.75737c0 0 51.757902 120.161325 7.618636 204.909844-44.139266 84.757907-87.053355 98.417937-87.053355 336.759648v47.946237h-37.872552z" fill="#6E6E96" opacity=".2" ></path><path d="M351.095639 329.408581c-159.930321-21.795024-302.947553 58.71466-319.452249 179.814818-16.504696 121.109547 99.765163 236.956932 259.686096 258.737874 159.920933 21.799719 302.947553-58.719354 319.456943-179.828901 16.500002-121.100159-99.765163-236.938155-259.69079-258.723791z m225.888083 222.818096c-14.622335 98.319359-141.355496 163.680962-283.058361 145.998029-141.707559-17.697015-244.730475-111.739987-230.112834-210.054652 14.622335-98.314665 141.350802-163.676267 283.05836-145.988641 141.712253 17.687627 244.735169 111.730599 230.112835 210.045264z" fill="#6E6E96" opacity=".15" ></path></symbol><symbol id="icon-a-dolphinanimal" viewBox="0 0 1110 1024"><path d="M676.308458 101.633399s181.480141-96.711061 215.507103-60.16643c34.036002 36.549151-53.463191 114.809354-34.582928 203.596762-0.00452 0.00452-180.924174-41.100845-180.924175-143.430332z" fill="#A3D9FF" ></path><path d="M681.624041 111.609157c83.602906-44.540605 184.576377-81.076196 201.919822-62.440017 10.830048 11.630097 2.458909 32.779427-12.104703 66.327262-15.942228 36.725433-35.785262 82.432212-25.262578 131.922277l13.55564-13.370318c-1.71762-0.388725-172.123631-40.305315-172.12363-132.410442l-5.984551 9.971238z m186.655602 131.108666c-9.017506-42.41618 8.46154-82.689855 23.883962-118.221994 15.765946-36.314108 29.380347-67.678758 7.914613-90.726511-37.055397-39.80811-184.711979 34.248444-229.094382 57.897363l-5.980031 3.191158v6.78008c0 110.081379 181.972827 152.691921 189.720198 154.450222l17.234963 3.914366-3.679323-17.284684z" fill="#6E6E96" ></path><path d="M46.326027 454.739965s-32.725186-68.881093 60.19807-87.151149c0 0-80.420789-264.414079 278.204762-329.073442 389.013869-70.151228 687.296708 359.855005 656.293662 776.079596l-99.472814 39.365144s0-517.288462-691.061912-387.969737c0.00904 0-183.229402 59.976588-204.161768-11.250412z" fill="#A3D9FF" ></path><path d="M56.536827 449.894467l0.0226 0.049721c-0.094921-0.216963-9.916997-21.868018-0.235043-40.870322 7.553009-14.816735 25.176697-25.045615 52.387418-30.397359l12.267425-2.413708-3.638643-11.964581c-0.275723-0.899491-26.993758-92.683693 25.077256-177.601936 42.547262-69.387339 124.748952-115.500923 244.313402-137.061576 144.429264-26.044547 283.13614 16.376153 401.105012 122.674247 164.914145 148.583193 259.871426 400.363723 241.917774 641.449807l7.110044-9.672914-99.472814 39.365144 15.458583 10.500084c0-7.697651-1.70406-190.099883-149.939209-313.158334-123.713859-102.709172-310.27906-131.614913-554.502062-85.912654l13.379358 11.110291v-5.754028l-4.655655-3.38552-4.655655-3.38552-5.505425 1.785422c-43.19363 13.998605-135.163155 35.043973-174.080813 14.500331-8.271698-4.366372-13.420038-10.319282-15.734306-18.193215l-0.253123-0.85881-0.366124-0.80457z m196.039233 27.206201c237.302799-44.409524 417.612247-17.131002 535.906562 81.080717 140.162333 116.359733 141.775993 293.997828 141.775992 295.783249v16.624756l15.458583-6.120152 99.472813-39.365144 6.585718-2.603551 0.524326-7.064843c18.450858-247.784803-79.412817-506.824539-249.330661-659.914225C679.603577 44.368843 534.283863 0.067801 382.721955 27.396043c-126.353571 22.781069-213.748802 72.506175-259.753904 147.787664-57.278116 93.723306-28.507976 191.57342-27.246882 195.691188l8.628782-14.378289c-34.506087 6.7846-57.486038 21.108649-68.293486 42.565342-14.595252 28.982582-0.542406 59.248859 0.067801 60.523514l-0.637327-1.66338c4.068048 13.844923 13.103635 24.54389 26.862677 31.807615 56.026061 29.579229 177.882178-8.538381 191.60054-12.986113l-10.097799-1.622699-4.651135-9.135028v13.609881l13.374838-2.49507z" fill="#6E6E96" ></path><path d="M854.651682 223.127912c-2.52219-79.584579 68.365807-148.158308 37.163879-181.660943-20.195598-21.687216-92.326609 3.557282-147.629462 27.671767 0 0 110.357102-66.97815 110.357102-18.563859 0 25.086296-35.482419 93.361701-39.921111 132.2884-124.495829-124.486789-271.637124-172.882999-429.897751-144.347903C26.107828 103.179257 106.528617 367.593336 106.528617 367.593336 13.605361 385.863392 46.330547 454.744485 46.330547 454.744485c20.932367 71.22248 204.170809 11.245893 204.170808 11.245892 546.194203-102.211966 660.682634 199.501593 684.688637 330.483699-23.079392-141.134145-128.916441-486.958905-609.50207-397.027924 0 0-177.240331 52.622461-177.240331 19.45431 0 0-28.408535-59.795785 52.260857-75.656653 0 0-2.630671-4.501973-5.265862-12.199624 52.337697 71.638325 316.426333 21.456693 316.426332 21.456693 342.787284 9.912477 426.078306 375.684232 426.078307 375.684232v-0.05876c1.365056 25.140537 3.823965 72.790939 3.823965 89.677858 0 23.377716 95.612688 0 95.612688 0s7.66601-43.939438 2.106345-111.202352c3.123357 31.170288 4.018327 62.602739 2.427268 94.003549 12.796271-220.094956-58.873695-435.443857-187.265809-577.477493zM199.465433 258.773053c1.600099-3.36744 3.557282-6.78008 5.677187-10.197241l0.0226 0.158202a201.797781 201.797781 0 0 0-5.699787 10.039039z m173.836731-159.047117c232.475382-41.914454 509.622452 160.620095 605.678105 387.413771 72.560416 171.310021 45.968942 342.005315-26.338351 128.90288-27.355363-85.261766-108.734403-177.624535-204.451052-247.852604-131.171947-96.245495-297.993555-144.10834-427.841127-109.981937-29.534028 6.531477-119.867294 43.369912-143.23145 0.565007-0.00452 0-24.073804-116.554095 196.183875-159.047117z" fill="#61A7D9" opacity=".36" ></path><path d="M938.819595 823.98764c22.05786-331.265668-271.176079-498.146037-583.489163-498.146036-115.550643 0-337.828785 13.53304-313.958384 115.207119 1.464497 10.545284 4.953978 17.931052 4.953979 17.931052 20.936887 71.21796 204.170809 11.241373 204.170808 11.241372 581.794143-108.856444 673.781749 240.557238 688.32276 353.766493z" fill="#F0F0FF" ></path><path d="M950.092608 824.737969c8.570021-128.572917-30.126155-242.717823-111.87584-330.099494-107.080063-114.45227-283.09094-180.092485-482.886336-180.092484-116.906659 0-266.018698 12.303585-312.457726 70.910596-13.388398 16.900479-17.596568 36.47683-12.497948 58.182127l-0.189842-1.026053c1.65434 11.910341 5.487345 20.281479 5.92127 21.19453l-0.623767-1.631739c4.077088 13.872044 13.148835 24.58909 26.957598 31.852816 57.522199 30.261757 186.131276-11.273013 191.57342-13.058434l-1.432857 0.370644c224.723491-42.054576 398.691303-19.698392 517.066979 66.431224 117.399345 85.419968 149.365162 210.634485 157.971344 277.657835l22.473705-0.691568zM246.980234 459.490541c-34.591968 11.309173-133.296372 35.966064-174.026573 14.531971-8.303338-4.370892-13.465239-10.332842-15.788547-18.220335l-0.248603-0.84073-0.375164-0.791009c-0.00452-0.01356-2.788873-6.133712-3.977647-14.667573l-0.076841-0.519806-0.117521-0.506246c-3.484961-14.852895-0.800049-27.603966 8.208417-38.98094C91.974045 359.873085 199.406672 337.150777 355.321392 337.150777c193.562243 0 363.556929 63.032144 466.383622 172.93272 78.468126 83.874109 114.077106 189.232032 105.832528 313.153815l22.482745-0.682528c-9.071747-70.639393-42.845585-202.643031-167.088291-293.053138-123.605378-89.935501-303.44022-113.61606-534.523426-70.37271l-0.732248 0.135602-0.696088 0.226003z" fill="#6E6E96" ></path><path d="M938.146107 747.205495a473.86883 473.86883 0 0 1-2.965155 49.264061c-9.767835-105.249442-69.256257-465.520292-639.867788-388.620625 0 0-176.697924 34.73661-194.317093 14.007646 0 0-7.114564-6.969922-8.127055-16.782958-4.090648-20.123277 2.458909-36.124266 16.344512-48.825616C62.060332 373.487486 31.771455 400.12416 41.376568 441.062283c1.464497 10.545284 4.953978 17.931052 4.953979 17.931052 20.936887 71.22248 204.170809 11.241373 204.170808 11.241372 581.794143-108.874524 673.777228 240.539158 688.32276 353.761974 1.771861-26.668315 1.473537-52.251816-0.678008-76.791186z" fill="#6E6E96" opacity=".15" ></path><path d="M413.856082 421.006807s-2.621631 118.072833 209.414071 151.81051c0 0 65.26505 5.437624 18.319776-44.98357-46.949794-50.412155-49.734147-84.335155-143.968219-112.449887-94.234072-28.119252-83.765628 5.622946-83.765628 5.622947z" fill="#94CBEB" ></path><path d="M402.560469 420.753684c-0.108481 5.225182-0.311884 128.337874 218.942343 163.219125l0.415845 0.067801 0.420365 0.03616c5.97099 0.501726 36.210147 2.038544 45.245733-16.570515 9.049147-18.62714-11.096731-40.260115-17.714089-47.370159-11.209732-12.041422-19.757153-23.011591-28.00625-33.620157-25.972226-33.367034-46.488748-59.723465-121.001827-81.953086-49.666346-14.821255-78.933691-15.521863-92.105127-2.201266-7.028683 7.105524-7.458088 16.294792-5.686227 22.003619l-0.510766-3.611522z m91.833923 5.455704c67.574797 20.159438 85.216565 42.818465 109.620333 74.178595 8.163216 10.486524 17.415765 22.369744 29.303506 35.143415 15.033697 16.14111 13.935324 22.05786 13.917244 22.1121l0.00452-0.00904c-1.365056 2.436309-12.773671 4.777696-23.034191 3.918887l0.84073 0.094921C425.065814 529.83161 425.129095 422.335702 425.156216 421.250889l0.04068-1.844181-0.542406-1.758301c0.135602 0.456525 0.158202 0.628287 0.158201 0.632807v-0.113001a0.397765 0.397765 0 0 1-0.05876 0.135602c0.081361-0.094921 9.238989-10.111359 69.640461 7.905573z" fill="#6E6E96" ></path><path d="M641.589929 527.833747c-24.087364-25.863745-36.567231-47.374679-55.714177-66.006339 1.342456 1.952663 2.721072 3.918886 4.162969 5.93031 36.341229 50.425715-14.183927 44.983571-14.183928 44.983571-97.199227-19.983156-136.112366-69.554581-151.692989-106.655178-13.55564 4.388972-10.305722 14.920696-10.305722 14.920696s-2.621631 118.077353 209.414071 151.81051c0.00452 0 65.27409 5.437624 18.319776-44.98357z" fill="#61A7D9" opacity=".36" ></path><path d="M950.580774 777.033327s-105.10028 2.815993-120.36902 87.137588c-15.146699 83.679747 126.186329-9.681954 213.143114 115.726925 54.480203 78.544967 78.83877-215.041537-92.774094-202.864513z" fill="#A3D9FF" ></path><path d="M950.27793 765.742233c-39.518826 1.053172-117.80615 22.568626-131.176467 96.421778-2.919954 16.11399-0.917571 28.277454 6.106592 37.168398 11.87418 15.015617 33.633717 16.190831 61.187962 17.682449 43.672755 2.354948 103.491141 5.586786 147.683702 69.328578 15.006577 21.628455 29.095583 19.46787 36.146866 16.245071 26.329311-12.005262 30.560081-75.860055 17.872291-125.662002-19.237347-75.521051-69.644982-116.043329-137.820946-111.184272z m102.370168 207.719051c-50.502556-72.822579-119.428849-76.560663-165.040707-79.010532-20.118757-1.084813-39.125582-2.119905-44.680727-9.135028-2.730112-3.457841-3.272519-9.889877-1.600099-19.119826 13.469759-74.431718 108.589761-77.830798 109.552532-77.857918 82.811897-5.867029 108.815764 66.399583 116.178931 97.746153 12.018822 51.212204 1.333416 92.828335-6.237674 95.947172a0.971811 0.971811 0 0 1 0.397765-0.045201c-0.0226-0.01356-3.127877-0.682528-8.570021-8.52482z" fill="#6E6E96" ></path><path d="M1025.532298 796.537357c37.426042 35.138895 42.135937 97.538231 1.446417 97.53823-12.574788 0-25.158617-2.431789-37.439602-13.727402-8.764383-8.059255-17.379605-38.203491-25.701023-38.827258-15.2823-1.148094-29.588269 27.481924-42.154017 33.00091-28.485376 12.484387-48.025567 6.436556-49.702506-21.375333-3.127877-51.980613 53.282389-71.611205 62.381256-74.436238-30.103555 4.646615-92.647533 21.890618-104.151069 85.442568-15.142179 83.679747 126.186329-9.677434 213.143114 115.731446 44.603886 64.329399 68.994094-120.802945-17.82257-183.346923z" fill="#61A7D9" opacity=".36" ></path><path d="M235.793102 220.180837m-25.881826 0a25.881825 25.881825 0 1 0 51.763651 0 25.881825 25.881825 0 1 0-51.763651 0Z" fill="#6E6E96" ></path><path d="M631.776893 787.158246c11.395054 18.717541 6.608318 28.652618-3.127877 34.578408-9.745235 5.93483-20.774165 5.613906-32.160179-13.094595-11.395054-18.722061-20.36736-51.248365-10.626646-57.174154 9.745235-5.93483 34.519647 16.9728 45.914702 35.690341z" fill="#61A7D9" ></path><path d="M724.695629 654.670963c6.7394 11.069611 4.601414 16.543395-0.325444 19.535671-4.917818 3.001315-10.757727 2.391108-17.501646-8.687543s-12.74203-29.918233-7.819692-32.910508c4.917818-3.001315 18.902863 10.98373 25.646782 22.06238z" fill="#61A7D9" opacity=".51" ></path><path d="M1019.79183 211.430014c9.681954 6.233154 8.054735 14.581692 2.784353 22.767509s-12.195104 13.112675-21.881578 6.879521-19.748113-22.107581-14.473211-30.293397c5.274902-8.185817 23.883962-5.586786 33.570436 0.646367z" fill="#61A7D9" opacity=".31" ></path><path d="M1093.51842 451.670848c6.74392 11.074131 4.601414 16.547915-0.325444 19.540191-4.917818 3.001315-10.757727 2.391108-17.501646-8.687543-6.7394-11.078651-12.73751-29.918233-7.815172-32.915028 4.913298-3.001315 18.893823 10.98373 25.642262 22.06238z" fill="#61A7D9" opacity=".51" ></path><path d="M433.13863 601.158052c6.368755 10.459403 2.309747 16.877879-4.859058 21.23069-7.155244 4.370892-14.708254 5.030819-21.081528-5.437624s-10.007398-29.511428-2.843114-33.87328c7.159764-4.361851 22.410424 7.60725 28.7837 18.080214z" fill="#61A7D9" opacity=".51" ></path></symbol><symbol id="icon-a-elephantanimal" viewBox="0 0 1140 1024"><path d="M1090.995936 606.717788c0-173.489377-151.712303-252.720954-349.646677-252.720954-197.943135 0-591.551376 469.102975-438.419686 379.230378 25.951999-15.236505 88.199122-35.055351 117.436739 5.353367l-0.516937-0.109521s34.735551 29.645033 8.56451 172.328459c-6.001728 61.331531-2.746776 58.08096 10.001421 70.829157 33.714819 33.706057 165.717796 26.670454 203.112506 0 8.568891-26.771213 13.98797-51.172401 17.313015-72.931952 27.778803 7.846055 55.58389 12.148024 82.512813 12.148024 45.218861 0 87.187152-6.260197 125.36603-17.641577 3.206763 23.117606 8.83174 49.376263 18.123467 78.425505 22.464864 22.460483 155.379052 26.670454 182.06265 0 15.284694-56.337392 19.525331-202.328339 20.664345-289.598727 3.425804-55.732838 3.425804-55.732838 3.425804-85.312159z" fill="#D8D8E6" ></path><path d="M1101.947995 606.717788c0-165.104481-134.802324-263.673013-360.598736-263.673013-96.132794 0-224.727491 102.489369-292.823013 163.579954-89.237377 80.059552-173.826701 178.373996-188.563791 219.168226-4.280065 11.841366-3.162955 20.581109 3.320664 25.973903 8.735362 7.250263 21.825263 4.62615 45.188196-9.085828 18.452029-10.833777 76.984214-33.662249 103.019448 2.326217a10.952059 10.952059 0 0 1 11.175482-17.12902l-0.516938-0.109521a10.960821 10.960821 0 0 0-12.121739 5.857161 10.943297 10.943297 0 0 0 2.71173 13.181899c-0.021904 0.017523 28.974767 30.757763 4.902142 162.016a10.597212 10.597212 0 0 0-0.127044 0.911211c-5.384032 55.031906-4.332635 62.92177 10.251127 76.817743 0.933115 0.889307 1.896897 1.804899 2.908867 2.82125 39.120755 39.125136 177.633637 29.399707 217.214378 1.178442a10.952059 10.952059 0 0 0 4.074166-5.576789c8.021288-25.062692 13.979208-50.169192 17.716051-74.618569a10.969582 10.969582 0 0 1-13.808356 8.897453c29.509228 8.327946 58.282478 12.559821 85.496154 12.559821 45.004201 0 88.24293-6.089345 128.502699-18.101563a10.934536 10.934536 0 0 1-13.974827-8.993831c3.627322 26.157898 9.865615 53.161295 18.530884 80.256689 0.53008 1.664713 1.450053 3.176097 2.685445 4.407109 26.017712 26.017712 166.445013 31.095086 197.54448 0a10.952059 10.952059 0 0 0 2.830012-4.867095c15.753442-58.045913 19.94589-208.062837 21.049857-292.32798-0.008762 0.179614-0.008762 0.354847-0.026285 0.53446 3.438947-56.087685 3.438947-56.087685 3.438947-86.004329z m-25.347446 85.163211c-1.086444 83.226887-5.169372 231.171682-20.287594 286.869474 0.499414-1.844327 1.480718-3.530944 2.830012-4.871476-22.298392 22.289631-148.501159 18.062136-166.563295 0 1.231011 1.231011 2.150984 2.746776 2.681064 4.407108-8.288518-25.908191-14.242058-51.680576-17.698527-76.589939a10.973963 10.973963 0 0 0-4.924046-7.705869 10.912632 10.912632 0 0 0-9.055163-1.283581c-38.231448 11.403284-79.349858 17.185971-122.233741 17.185971-25.202878 0-51.960949-3.947122-79.533853-11.744988a10.938917 10.938917 0 0 0-8.901833 1.340532 10.934536 10.934536 0 0 0-4.902142 7.556921c-3.557229 23.310363-9.239157 47.282229-16.909979 71.254096 0.718455-2.256124 2.142223-4.209972 4.078547-5.576789-34.406989 24.532612-160.776227 29.408469-189.015016 1.174061a193.812018 193.812018 0 0 0-3.285618-3.189239c-7.053126-6.720183-8.520702-8.122047-3.56161-58.838843-0.030666 0.306658-0.074474 0.613315-0.127044 0.915593 26.54341-144.716128-8.183379-179.175686-12.231259-182.627776a10.952059 10.952059 0 0 1-9.410009 19.04344l0.516937 0.10514a10.947678 10.947678 0 0 0 11.175481-17.12902c-35.738759-49.380644-107.299513-22.789045-131.85403-8.376135-17.221018 10.110941-22.412294 9.94885-22.626954 9.940089 1.945086 0.100759 4.455298 2.632875 4.556057 4.577961-0.547603-10.886347 32.207815-62.290931 104.25046-138.048515 103.220966-108.543667 258.862868-235.294037 357.786246-235.294037 212.084434 0 338.698998 90.380772 338.698998 241.768895 0 29.241998 0 29.241998-3.421423 84.62437a3.837601 3.837601 0 0 0-0.030666 0.512556z" fill="#6E6E96" ></path><path d="M1086.60635 606.717788c0.008762-93.644486-51.251256-173.515662-121.764992-208.124169 25.592772 14.815946 46.949287 32.851796 63.079479 54.168884-9.690382-7.197693-21.303945-13.663789-35.239345-19.113534 0 0-152.417616 118.584515-232.792587 118.584515l-19.389525 38.235829s1.577097 0.122663 4.499106 0.275992h-24.67718s-61.401624 110.274092-285.726079 98.415203c-37.705749-39.164563-65.786828-84.475422-77.60629-132.169449-0.385512-1.555192-0.709693-3.097242-1.038255-4.652435-1.826803 16.975692-0.854261 35.094778 3.346949 54.387925 10.172272 46.682057 31.80478 91.458455 61.046777 131.871553l-0.398655-0.091997 0.381132 0.455606c0.420559 0.442463 1.086444 1.191584 1.923181 2.334979 0.021904 0.035047 0.05257 0.061332 0.078855 0.091997 41.192885 55.960641 60.266991 81.500843 120.612836 113.480855 32.466284 11.937744 44.390886 47.036903 44.390886 62.238361 0 67.079171-32.558281 84.059244-57.568403 87.213437 44.631831 0.21466 91.725685-8.441847 111.732906-22.718951 8.577653-26.793117 13.974827-51.176782 17.286731-72.940714 27.791945 7.850436 55.58389 12.156786 82.539098 12.156786 85.447965 0 159.418172-22.171348 217.65246-59.653675l-0.324181 0.280372 1.029493-0.735978c2.07651-1.344913 4.117974-2.685445 6.137534-4.061023 20.125504-12.638676 75.148649-41.324309 66.518426 29.474181-2.374406 19.516569-4.393966 36.2776-5.80021 50.401376-1.463195 14.52243-20.072934 39.94435-125.677068 39.94435-21.137474 0 128.616601 23.13513 141.75031 16.813601 24.234716-11.679276 44.903442 27.625474 44.903442-300.918775 0 0-0.091997 0.205899-0.258469 0.499414 8.143951-27.371386-0.648362-56.258537-0.648362-86.144516zM470.018567 721.876498l50.804412 36.189984a452.276231 452.276231 0 0 1-50.804412-36.189984z m560.320485-89.171665c-38.603818 108.197582-141.741549 187.043646-309.676042 187.043646-65.944538 0-137.356344-23.371694-199.691083-61.59438 0.670266 0.017523 169.24874 3.557229 257.920991-167.435079h-0.035047c55.4218-2.304313 157.801648-17.199114 217.091715-91.318269-0.017523 0.013142 71.267239-12.590487 34.389466 133.304082z" fill="#6E6E96" opacity=".15" ></path><path d="M653.916781 202.836515c-120.306179-66.422048-316.378702-9.782379-388.999615 121.75185-42.717411 77.378488-46.984333 156.277121-18.793733 221.665295l-0.026285-0.008762s0.048189 0.091997 0.078855 0.135806c1.70414 3.93398 3.495897 7.854817 5.432221 11.688037 9.699144 24.918125 21.939165 83.305742-57.143463 116.880375 0 0-112.950776 40.413098-127.946335-55.978165 0 0-0.998828-42.97588-21.991735-21.996115-20.988526 20.988526 17.987662 165.941218 143.940722 165.941218 83.98477 0 157.262807-42.669222 202.131203-86.512505 118.40052 43.194921 274.966776 15.394214 340.022006-102.436799 72.616532-131.525468 43.602338-304.712568-76.703841-371.130235z" fill="#D8D8E6" ></path><path d="M659.208816 193.251273c-58.983409-32.567043-137.619193-38.314683-215.751183-15.766584-83.034131 23.958724-151.602783 75.648062-188.130089 141.811641-43.08102 78.035611-49.923866 160.180435-19.262482 231.294345l13.278276-14.807184-25.785527-7.933671a12839.536933 12839.536933 0 0 0 12.92781 23.652067l0.175233 0.306657 0.271611 0.446844-0.810452-1.533288a229.064506 229.064506 0 0 0 5.708213 12.279449l-0.429321-0.968162c10.115322 25.987046 16.909979 73.895733-51.216209 102.831073l0.591411-0.236565c-0.512556 0.179614-52.837114 18.386317-86.249655-1.546431-14.877277-8.862406-23.765968-23.849204-27.183011-45.810272l0.127044 1.428148c-0.219041-9.30925-2.242982-31.581358-16.336091-37.228239-5.405936-2.164127-14.018636-2.584686-24.348618 7.745296-14.631951 14.631951-8.822979 51.014691 3.425804 80.585251 10.110941 24.405568 50.686129 104.062084 148.255833 104.062084 73.922018 0 152.347523-33.504539 209.784501-89.636032l-11.407664 2.462023c61.835326 22.556861 133.474934 26.013331 196.545652 9.471341 69.580622-18.24613 125.269652-59.771958 156.811582-116.91104 40.754802-73.803736 51.636768-164.442977 29.119334-242.456684-18.311843-63.473754-57.423836-114.453398-110.112002-143.542067z m61.817803 375.427823c-62.317216 112.86754-215.028347 138.175558-326.673638 97.433898l-6.479238-2.356883-4.928426 4.818906c-53.441667 52.219418-126.141436 83.388978-194.477904 83.388978-78.93368 0-114.479683-60.196897-126.097627-86.083184-14.978036-33.368734-13.260753-57.590307-10.080275-61.173821l-0.017523 0.017523c2.242982-2.247363 3.373234-2.681064 3.381995-2.685445-1.060159 0.407417-3.123527-0.113901-3.868267-0.968162 1.75671 2.006417 3.596656 10.846919 3.789413 18.167276l0.017523 0.700931 0.10952 0.714075c4.424632 28.435926 17.102735 49.065225 37.688226 61.305246 42.33628 25.172213 102.239662 4.205591 104.771778 3.29876l0.297896-0.100759 0.293515-0.122663c90.805712-38.551248 71.232192-109.963054 63.066337-130.934057l-0.188375-0.490652-0.240946-0.464367a205.670908 205.670908 0 0 1-5.156229-11.105388l-0.346085-0.79731-0.464367-0.731598 0.284753 0.47751-12.827051 15.731538 22.666381 6.974271c0.026285 0.008762-9.36182-21.772693-9.36182-21.772694-27.918989-64.752954-21.413466-140.054931 18.324985-212.027482 33.741104-61.11687 97.534657-108.990511 175.027047-131.354616 72.590248-20.949099 145.15421-15.880486 199.09091 13.895972 47.566983 26.263038 82.964038 72.590248 99.659357 130.447786 20.927194 72.55082 10.74616 156.96053-27.261865 225.796411z" fill="#6E6E96" ></path><path d="M46.984333 604.466044s74.149821 270.515859 329.762118-6.06744c0 0 100.63628 7.188932 156.553113-44.94287 59.180546-55.163331 55.697792-210.984847-67.972859-237.664063l140.983666-40.338624 134.793562 268.185261s-54.238977 202.135583-350.492175 132.752099c0 0-100.20696 101.026174-213.933141 88.391878-113.743705-12.643057-129.694284-139.498567-129.694284-160.316241z" fill="#6E6E96" opacity=".15" ></path><path d="M375.445347 414.044784a25.921333 25.921333 0 0 1-26.788737 25.395634c-14.46986-0.468748-25.921333-12.634295-25.597152-27.161106a25.908191 25.908191 0 0 1 26.801879-25.400016c14.46986 0.495033 25.921333 12.612391 25.58401 27.165488z" fill="#6E6E96" ></path><path d="M956.986541 122.233741c-89.789361-112.236701-246.69294-135.932576-350.457129-52.92035-63.968787 51.176782-127.096455 141.807261-145.092878 230.089619 54.764676-12.997904 116.288963 22.955516 143.08208 86.543171 19.985317 47.409273 15.464307 97.907027-7.81977 133.014948 111.145876 35.830756 260.247209 16.581417 334.979679-43.208064 103.764188-82.999084 115.092998-241.282623 25.308018-353.519324z" fill="#D8D8E6" ></path><path d="M877.308121 173.616421c-64.284206-80.353067-176.626047-97.315616-250.916054-37.885363-45.79713 36.636828-90.994088 101.525588-103.87809 164.736492 39.217133 6.619425 58.913316 19.932748 78.096943 65.462648 14.303389 33.942621 18.513361 38.152593 18.749925 91.738827 79.564519 25.654103 186.32081 11.86327 239.83257-30.937376 74.285626-59.425873 82.407673-172.749018 18.114706-253.115228z" fill="#E0A1CB" ></path><path d="M602.84514 201.066662c72.187212-57.743636 181.339813-41.258597 243.779692 36.812061 39.883018 49.862535 51.036595 112.779924 35.125444 166.786717 52.596168-62.531876 52.596168-159.746734-4.442155-231.044638-64.284206-80.353067-176.626047-97.315616-250.916054-37.885363-45.79713 36.636828-90.994088 101.525588-103.87809 164.736492 0.367989 0.061332 0.718455 0.144567 1.086444 0.205899 20.020364-39.6815 49.472641-75.801391 79.244719-99.611168z" fill="#CF94BB" ></path><path d="M109.187648 470.478554s28.926578 154.388986 195.253309 154.388986c0 0 62.505592 7.719011 62.505592-54.488684 0-46.300925-45.924174-30.034927-105.643562-38.603818-142.543239-20.432161-163.685094-126.921222-152.115339-61.296484z" fill="#F0F0FF" ></path><path d="M98.423964 472.493733c0.306658 1.634047 32.60647 163.321486 206.016993 163.321485l-1.340532-0.083235c1.344913 0.16209 33.158454 3.837601 55.123904-15.58259 13.054854-11.547851 19.67866-28.29574 19.67866-49.788061 0-44.132417-35.90085-45.227623-70.618877-46.283401-13.374655-0.411797-28.536685-0.867403-44.425933-3.149812-83.371454-11.950887-122.461544-53.77461-139.152481-71.639609-6.956748-7.4474-12.967238-13.878449-21.43537-9.650955-8.858025 4.429013-7.49997 12.139262-3.846364 32.856178z m161.323831 70.119463c17.098355 2.453261 32.913128 2.935152 46.866051 3.360091 40.658424 1.239773 49.380644 3.478374 49.380644 24.396807 0 14.881658-4.104832 26.087805-12.191832 33.29864-14.474241 12.888383-37.828412 10.351886-38.060596 10.321221l-0.630839-0.078855-0.674647-0.004381c-154.971636 0-183.359373-139.529233-184.494006-145.469629-1.003209-5.712594-2.562782-14.544334-2.510212-16.625226-0.048189 1.91442-1.612143 5.651262-5.594312 7.526255-3.99093 1.879373-7.885483 0.696551-9.405628-0.490652 0.810452 0.635219 3.176097 3.162955 5.261369 5.397175 16.70408 17.86938 61.051158 65.326842 152.054008 78.368554z" fill="#6E6E96" ></path><path d="M595.783252 368.834684s8.419943-40.014443 55.807312-55.811693" fill="#D8D8E6" ></path><path d="M606.498747 371.090808l-0.013143 0.070093c0.311038-1.393102 8.122047-34.262422 48.570192-47.746597a10.947678 10.947678 0 1 0-6.930463-20.778246c-52.736355 17.580245-62.663301 62.063128-63.066337 63.946882a10.952059 10.952059 0 0 0 21.439751 4.507868z" fill="#6E6E96" ></path><path d="M519.517493 922.724119c-3.995311 23.5075-23.384837 39.826068-43.304441 36.426549-19.919605-3.386377-15.516877-13.878449-11.521566-37.385949 3.99093-23.5075 6.067441-51.128593 25.995807-47.737835 19.915224 3.381996 32.825511 25.189736 28.8302 48.697235zM945.578876 922.649645c3.732462 15.862962-2.878201 30.989946-14.772137 33.789293-11.889555 2.794965-14.434814-3.894552-18.167276-19.766276-3.736843-15.854201-7.228359-34.89326 4.656816-37.692607 11.885175-2.786204 24.554516 7.806628 28.282597 23.66959z" fill="#D8D8E6" ></path><path d="M123.337708 451.816245s6.483619 177.594209 231.968992 125.15575c0 0-16.590179 104.938249-184.664858 0 0 0-64.126496-41.477638-47.304134-125.15575z" fill="#6E6E96" opacity=".15" ></path><path d="M531.862654 319.0291c19.564758 10.365029 37.377187 26.22361 51.268779 46.467396a141.807261 141.807261 0 0 0-5.300796-13.567411c-8.893072-19.503427-25.645342-29.128096-45.967983-32.899985z m419.507671-188.371035c-39.335415-49.161603-91.541691-81.329991-146.512265-94.989399 43.965946 14.84223 84.922266 41.184123 117.064369 78.311603 87.660281 101.267119 76.59432 244.08635-24.712226 318.97653-64.507628 47.698408-185.73816 66.768133-287.951538 48.215345-3.088481 16.975692-9.217253 32.737895-18.162894 46.22207 111.132734 35.835137 260.234066 16.581417 334.975298-43.208063 103.764188-83.003465 115.092998-241.291385 25.299256-353.528086z" fill="#6E6E96" opacity=".15" ></path><path d="M926.360203 112.407553C839.685607 0.170852 692.266512-15.100699 592.107741 67.915909c-61.760852 51.172401-110.501895 133.378556-127.86748 221.665295 8.993831-2.207935 1.910039-2.970198 11.079103-2.457643 26.429509-70.228984 75.402736-136.64227 124.919186-177.681825 100.167532-83.012227 251.63889-59.316352 338.326628 52.920349a281.730768 281.730768 0 0 1 43.330726 80.120884c-6.728945-45.5299-25.080215-90.648003-55.535701-130.075416z" fill="#EFEFFF" opacity=".82" ></path><path d="M973.143018 577.339984c11.964029 15.740299-3.097242 101.950527-33.649106 125.182036-30.565006 23.240269-65.033327 29.312091-76.997356 13.580553-11.964029-15.74468 16.068861-34.363181 46.625106-57.590308 30.556245-23.240269 52.052946-96.91258 64.021356-81.172281z" fill="#D8D8E6" ></path><path d="M965.537909 115.390894c-46.997476-58.742464-115.198138-97.013339-187.122501-105.003961-65.550264-7.28531-129.019637 10.605974-178.728842 50.375091-59.94281 47.956876-129.25182 139.665038-148.98305 236.454955l-3.425804 16.80484 16.686557-3.960265c50.112241-11.893936 106.199926 22.556861 130.460928 80.138407 17.860618 42.384469 15.236505 89.403849-6.847228 122.706869l-7.990622 12.042885 13.760167 4.437774c115.452226 37.215097 267.068151 17.413774 345.178236-45.083056 49.713587-39.760355 81.097807-97.753698 88.387498-163.299582 7.981861-71.928743-14.391006-146.871493-61.375339-205.613957z m-40.702233 351.810804c-71.740368 57.397551-217.433419 75.932816-324.781121 41.337451l5.760783 16.476278c26.096566-39.344177 29.469801-94.262182 8.787932-143.318645-28.365833-67.324498-95.296056-107.28199-155.703233-92.947935l13.260753 12.844575c18.636024-91.419027 84.343997-178.242571 141.198326-223.728663C658.507885 41.75363 716.264663 25.518298 775.992813 32.155245c66.189864 7.355403 129.045922 42.682365 172.433599 96.916962 43.387677 54.238977 64.052022 123.315804 56.692238 189.51443-6.636948 59.728149-35.142967 112.508312-80.282974 148.615061z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-fishanimal3" viewBox="0 0 1104 1024"><path d="M1056.616352 409.901582c-23.970409 0.945789-67.351809 30.033277-99.406041 62.087509-108.065368 108.074291-229.880373-4.662028-229.880373-144.710248 0-167.886551 129.443779-230.835085 129.443779-230.835086 15.270931-15.275392-11.791139-37.38099-54.713028-46.142926 0 0-510.182032-121.583019-619.697313 272.119687-40.668947 146.200313-94.552178 165.923592-124.099176 183.554535-17.073284 5.763962-25.576467 9.26606-32.826033 11.429777-17.001904 5.099233-13.455193 28.168465-8.489798 39.045044 4.791405 10.501832 14.467902 17.430186 26.723013 21.886996 0.745032 2.565231 1.534677 5.201842 2.413548 7.990136 23.948103 76.211893 95.502429 34.592696 148.172194 125.718617 25.228488 43.66246 53.325573 79.60692 84.041424 107.530016l-0.008923-0.004461s69.756434 67.048442 180.021209 116.907607c145.785415 65.906357 363.361603 116.149191 312.24882 3.725161-48.05235-105.687511-11.246864-205.624443 34.918369-245.111152 79.879058-68.315443 115.02049-9.752338 115.020489-9.752339 32.388828 42.011789 82.154306 99.236513 120.14649 92.517839 30.657854-5.420444-5.166152-52.482392-5.166152-182.76489-0.013384-145.870179 45.107911-186.142072 21.137502-185.191822z" fill="#6EC9F0" ></path><path d="M353.542345 512.769569c0-210.148172 115.40862-464.003416 230.406803-476.298678-56.479691 5.920107-87.088472 6.910509-142.238704 33.263236-85.611791 42.26162-181.819101 278.557302-181.8191 451.962446 0 116.149191 29.279322 304.2453 87.284767 341.095398 31.188746 24.273776 80.374259 58.215126 142.354697 86.637884 5.362448 2.45816 10.836427 4.902937 16.377326 7.312023-132.160693-53.981379-152.365789-282.121857-152.365789-443.972309z" fill="#F0F0FF" ></path><path d="M364.695523 512.769569c0-210.505073 115.364007-453.974478 220.435862-465.207959l-2.346628-22.181439-14.922952 1.525755c-47.655297 4.818173-79.129564 7.994598-130.960611 32.763574C347.149344 103.974383 248.738166 345.748505 248.738166 521.692111c0 117.674946 29.386392 310.450928 92.464303 350.508681l-0.865486-0.615655c30.921069 24.073018 81.101446 58.875394 144.549642 87.980726 5.585511 2.551847 11.1621 5.041236 16.578083 7.396787l8.663789-20.553076c-96.501754-39.401946-145.432974-185.298892-145.432974-433.640005z m145.660499 433.733692a1029.987026 1029.987026 0 0 1-16.185492-7.218337c-61.49416-28.199694-110.14432-61.953671-140.141906-85.299502l-0.41936-0.321211-0.450588-0.285521c-52.879445-33.584448-82.118616-217.433427-82.118616-331.686579 0-166.008356 93.548392-401.447473 175.60455-441.955814 48.195111-23.029081 76.519721-25.888756 123.461214-30.635548l14.998794-1.534677-2.342168-22.18144c-127.19976 13.597954-240.373283 283.879598-240.373283 487.389399 0 258.280825 53.59771 411.12397 159.303066 454.291228l8.663789-20.561998z" fill="#6E6E96" ></path><path d="M200.850883 419.587001m-20.820752 0a20.820752 20.820752 0 1 0 41.641504 0 20.820752 20.820752 0 1 0-41.641504 0Z" fill="#6E6E96" ></path><path d="M578.078116 532.408084c0-197.464778 128.221391-446.078029 281.167145-446.078028-10.252001-8.463031-35.890925-31.66164-57.197956-36.015841 0 0 18.857793 1.079628-35.306499-4.148982-136.037537 0-276.915554 240.060994-276.915554 486.247313 0 187.168165 102.636001 385.574271 224.04057 474.259877 46.321377 0 82.680736-9.270521 56.68491-66.455093-0.356902-0.776261-0.660268-1.552522-1.008248-2.324322-78.629902-78.643286-191.464369-243.094658-191.464368-405.484924z" fill="#F0F0FF" ></path><path d="M589.231293 532.408084c0-195.778418 124.598839-434.924851 270.013968-434.924851a11.144255 11.144255 0 0 0 10.448297-7.365558 11.19779 11.19779 0 0 0-3.345954-12.384489l-3.577939-2.997974c-12.794925-10.787353-36.60919-30.871996-58.482802-35.342189a11.153178 11.153178 0 1 1-2.868597 22.060985c12.25065 0.70042 14.610663-6.116403 14.931874-10.243078 0.838719-10.925653-9.538197-12.094506-17.117897-12.95107l-31.41627-3.189808a9.480201 9.480201 0 0 0-1.066244-0.053536c-145.3839 0-288.068731 246.378154-288.068732 497.400491 0 180.297807 98.281801 388.050276 228.613373 483.258261 1.909424 1.396378 4.206979 2.145871 6.580375 2.145872 27.476968 0 57.345178-2.743682 70.44793-23.109384 9.176835-14.253761 7.994598-33.58891-3.613629-59.120764-0.156144-0.339057-0.298905-0.687036-0.468434-1.08855l-0.477356-1.128702a10.653515 10.653515 0 0 0-2.324322-3.381643c-69.908117-69.899194-188.207641-232.298382-188.207641-397.584013z m170.108265 409.972963l0.343517 0.803028c0.20968 0.504124 0.45505 1.075166 0.73611 1.690822 5.540899 12.197115 10.965804 28.71274 5.130462 37.764659-8.28458 12.879689-40.958929 12.879689-51.692747 12.87969 2.364474 0 4.670951 0.749494 6.580374 2.14141-125.116346-91.393598-219.458844-291.410223-219.458844-465.24811 0-235.327585 134.119191-475.094135 265.762376-475.094136-0.356902 0-0.713803-0.017845-1.070705-0.053535 30.938915 2.989052 36.140757 3.738545 36.99286 3.899151-4.541574-0.84318-9.09207-5.594434-8.543334-11.800062s5.86211-10.078011 10.483986-10.113702c-0.276599 0-1.195621-0.031229-1.913885-0.075841a11.153178 11.153178 0 0 0-2.864136 22.060985c16.310407 3.337031 38.099255 21.713006 48.57878 30.541862l3.756391 3.149657a11.211174 11.211174 0 0 1-3.350415-12.384488 11.130871 11.130871 0 0 1 10.452758-7.365559c-75.132265 0-148.836924 54.86025-207.542789 154.480432-53.084664 90.077523-84.777533 203.255508-84.777534 302.750774 0 172.579808 122.408354 341.02848 194.725558 413.354606a10.260923 10.260923 0 0 1-2.328783-3.381643z" fill="#6E6E96" ></path><path d="M1056.616352 409.901582c-21.597013 0.852103-58.906623 24.550374-89.524325 52.669766-1.003786 9.404359 0.727187-9.515891 0 0-38.759523 59.620426-27.066531 247.074112 14.878339 290.330596 20.138177 17.028672 40.718021 28.146159 58.661252 24.965272 30.653393-5.420444-5.166152-52.47347-5.166151-182.76489 0-145.879101 45.121295-186.150995 21.150885-185.200744z" fill="#F0F0FF" ></path><path d="M1056.174687 398.757327c-27.829409 1.101934-69.444145 30.640009-96.62667 55.596359l-3.100583 2.846291-0.450588 4.184673c-0.182912 1.730973-0.240909 2.136949-0.249831 2.181561l12.098967-9.395437 10.060166 11.550231c0.040151-0.651346 0.312289-3.693932 0.401514-4.340817l-11.991896 9.538198-10.194005-11.434238c-0.004461 0.040151-0.022306 0.459511-0.156144 2.230636l1.766663-5.22861c-40.78494 62.725471-30.470481 256.032344 16.221182 304.169459l0.383669 0.397053 0.423821 0.35244c25.933368 21.949453 48.114808 30.925531 67.806858 27.436817 7.494935-1.324997 13.151827-4.679873 16.832376-9.957557 7.713538-11.072875 4.94755-26.375034-0.075842-54.150908-5.072465-27.981092-12.723545-70.278402-12.723545-129.644536 0-82.903799 14.798036-130.773238 22.752482-156.496926 5.183997-16.77884 8.048133-26.022594 2.136949-33.709364-3.323647-4.331894-8.480876-6.393001-15.315543-6.125325z m-31.862398 196.344999c0 61.360322 7.874143 104.839869 13.071524 133.610606 2.895365 15.998118 6.183322 34.124262 3.725161 37.434525l0.031229-0.03569c-0.004461 0.008923-0.557659 0.446127-2.444776 0.776261-12.402333 2.194945-29.524692-5.585511-49.520109-22.49819l0.803029 0.749494c-36.845637-37.987723-51.572293-217.977702-13.531035-276.487272l1.556984-2.391241 0.218602-2.84183c0.950251-12.451407-6.682984-14.441134-10.006631-14.722194-3.328108-0.28106-11.193329 0.410437-12.326492 12.799386-1.137624 12.442485 6.468843 14.548205 9.79249 14.873878 3.319186 0.330134 11.188868-0.240909 12.509404-12.620936l-3.551172 7.035425c30.653393-28.146159 65.317469-49.060597 82.426444-49.738711 0.463972-0.017845 0.660268 0 0.664729 0-2.342167-0.249831-5.188458-3.345953-5.241993-5.714888 0.049074 2.199407-2.324322 9.895099-4.425581 16.680692-8.306887 26.85239-23.751807 76.818626-23.751807 163.090685z" fill="#6E6E96" ></path><path d="M1056.196993 399.301602c-29.542537 1.173314-75.917449 34.610541-106.486078 65.188092-37.336377 37.336377-79.432931 48.980295-118.527049 32.785881-54.025992-22.382197-93.245026-93.874065-93.245025-169.992271 0-159.405675 122.234365-220.694616 123.474598-221.296888 1.057321-0.517507 2.025417-1.204543 2.864136-2.038801 6.696368-6.700829 8.971616-15.12817 6.393001-23.725039-5.206303-17.309732-31.304739-33.13386-66.477399-40.312045-4.943088-1.182237-130.750931-30.559707-272.3026-11.701914-189.32742 25.224026-313.729962 125.981833-359.739051 291.374533-36.234443 130.264653-81.560957 155.87681-111.554082 172.820717-2.716914 1.534677-5.291067 2.98459-7.75815 4.461271 0.642423-0.383669 1.329459-0.70042 2.043262-0.941328-8.382728 2.832907-14.731117 5.126-19.834811 6.968505-5.331219 1.927269-9.19468 3.319186-12.643242 4.349739-7.847376 2.35109-13.75856 7.486013-17.100052 14.856033-6.174399 13.611338-1.65067 30.764925 1.99865 38.759523 5.643508 12.362182 16.658386 21.610397 32.75019 27.459123a10.63567 10.63567 0 0 1-6.562529-7.013118c0.820874 2.828446 1.628364 5.50967 2.476005 8.2132 13.348123 42.466839 41.373828 53.187273 68.489433 63.546344 27.427894 10.501832 55.801578 21.342721 80.62409 64.295838 25.696921 44.465488 54.655031 81.489577 86.093608 110.068479a10.604441 10.604441 0 1 0 7.12465-18.451817 10.604441 10.604441 0 0 0-7.352175 18.255521c2.899826 2.788294 72.352894 68.886486 183.005799 118.919641 100.191225 45.304207 276.509578 99.771865 323.112015 53.075741 10.028937-10.046782 18.715032-29.207941 3.163042-63.416968-46.321377-101.873124-9.083148-197.375553 32.161302-232.664206 26.696246-22.823863 51.255543-33.191856 71.010051-29.97528 18.799796 3.060432 27.927557 17.488182 28.012321 17.626482 0.214141 0.356902 0.446127 0.695958 0.695958 1.021631 55.337606 71.772928 96.778352 102.435244 130.398491 96.488369 7.343252-1.29823 12.888612-4.568342 16.484397-9.738954 7.584161-10.885501 4.836018-26.116281-0.165067-53.744932-5.068004-28.003398-12.728006-70.331938-12.728007-129.733762-0.004461-82.979641 14.806959-130.902614 22.770328-156.644148 5.130462-16.609312 7.958908-25.754918 2.226174-33.214163-3.243344-4.202517-8.24889-6.192244-14.896184-5.929029z m-31.335968 195.791802c0 61.306786 7.865221 104.755105 13.067063 133.507996 3.042587 16.805608 6.183322 34.182259 3.627013 37.83604-0.098148 0.147222-0.80749 0.624578-2.761526 0.972557-16.711921 2.9489-49.337196-10.011092-109.903412-88.551769 0.254292 0.325673 0.477356 0.664729 0.691497 1.021631-0.557659-0.941328-14.084233-22.984468-42.801434-27.664341-26.491027-4.314049-56.171863 7.396787-88.208251 34.806836-54.021531 46.209845-85.598407 152.1918-37.679895 257.56256 8.45857 18.594578 8.828855 31.924855 1.133163 39.647316-32.054232 32.11669-180.663631-3.765313-299.355747-57.425481-107.155269-48.444942-176.354044-114.226383-177.045541-114.891112 3.12289 2.997974 4.108831 7.588622 2.502773 11.617149a10.617825 10.617825 0 0 1-17.345422 3.546711 10.608903 10.608903 0 0 1 14.63743-15.351234c-29.810213-27.102221-57.398713-62.426565-81.989238-104.98263-28.592286-49.466573-63.430351-62.79239-91.424828-73.503901-26.446415-10.113701-45.549577-17.412341-55.819423-50.091151a357.927774 357.927774 0 0 1-2.342167-7.767073 10.59998 10.59998 0 0 0-6.56253-7.013118c-10.689205-3.885767-17.461415-9.216986-20.695836-16.314868-2.792756-6.129786-4.354201-15.966889-1.980804-21.186576 0.794106-1.762202 1.913885-2.707992 3.858999-3.287957 4.015144-1.200082 8.32027-2.748143 13.767483-4.724486 5.010007-1.806815 11.242403-4.059757 19.415451-6.821283 0.713803-0.240909 1.396378-0.548736 2.043262-0.936867a378.793139 378.793139 0 0 1 7.329868-4.21144c31.032601-17.532795 82.970719-46.879036 121.560713-185.611181C298.133359-54.19552 794.592521 59.437514 799.593606 60.628673c31.362735 6.410846 48.761692 19.112085 50.733574 25.705844 0.196296 0.637962 0.356902 1.186698-1.066244 2.609843 0.838719-0.834258 1.797892-1.521293 2.864136-2.0388-1.347304 0.655807-135.417421 67.84701-135.41742 240.377744 0 85.696555 43.738301 163.661728 106.356701 189.604018 47.539304 19.69205 97.853519 6.415308 141.654278-37.385451 32.304064-32.304064 72.857017-58.215126 92.317081-58.986925 0.517507-0.022306 0.740571 0.004461 0.749493 0.004461-2.110181-0.254292-4.684335-3.069354-4.760176-5.19292 0.084764 2.203868-2.324322 9.984325-4.452348 16.854682-8.280119 26.812239-23.716117 76.724939-23.711656 162.912235z" fill="#6E6E96" ></path><path d="M41.043693 588.30781l84.848914-2.489389a11.153178 11.153178 0 0 0-0.646884-22.297433l-84.853375 2.48939a11.153178 11.153178 0 1 0 0.651345 22.297432z" fill="#6E6E96" ></path><path d="M1035.554692 604.863587c-1.869273 1.079628-2.904287 1.771125-2.904287 1.771125 0 72.138752-29.707604 55.163616-148.538019-12.732468-88.328705-50.470359-172.370129 11.612688-209.702045 96.55975v-0.008922C522.1427 436.169546 745.978051 146.062013 745.978051 146.062013c-283.687763 303.250437-90.840401 617.248075-90.840401 617.248076l0.017845-0.071381a207.29742 207.29742 0 0 0-0.972557 19.692051c0 63.35451-100.726577 40.057753-201.488844-7.093421-5.233071-2.449238-47.030719-42.306233-53.182812-160.119479-20.432621-391.476533 96.497292-506.541635 90.099829-500.474306C284.651398 309.732664 384.472337 740.49961 370.753929 732.299794c-58.937852-35.226196-106.637761-73.017623-117.47865-97.398469-32.692194-73.53513-199.423276-59.531201-199.423276-59.531201-4.724486 0-9.078687 0.651346-13.12506 1.784509 0.972557 0.401514 1.93173 0.811951 2.944439 1.177775 0.745032 2.565231 1.534677 5.201842 2.413548 7.990137 23.952564 76.211893 95.502429 34.592696 148.172194 125.718617 25.232949 43.66246 53.325573 79.60692 84.041424 107.530016l-0.008923-0.004462s69.756434 67.048442 180.021209 116.907608c145.785415 65.906357 363.361603 116.149191 312.24882 3.725161-48.05235-105.687511-11.246864-205.624443 34.918369-245.111153 79.879058-68.315443 115.02049-9.752338 115.020489-9.752338 32.388828 42.011789 82.154306 99.240974 120.14649 92.517838 29.863748-5.282145-3.372721-50.144686-5.09031-172.990245z" fill="#6E6E96" opacity=".15" ></path></symbol><symbol id="icon-a-piganimal" viewBox="0 0 1252 1024"><path d="M634.608631 76.217982c-227.109489 0-369.456978 92.657543-442.076177 222.664224-93.11296 172.117896-128.417672 39.29456-128.417672 249.127907 0 160.034497 28.983327 88.048922 135.437033 186.50313a311.450723 311.450723 0 0 0 31.191109 32.889022l-0.168306-0.074252s59.189349 68.995664 98.681917 196.73021c17.786011 57.526088 98.2364 51.150251 112.537481-12.09825 15.637631-30.503033 18.756247-55.585615 47.571268-55.585615 39.378713 10.415187 84.24223 16.340557 131.8828 16.340557 50.170114 0 97.246364-6.563944 138.085381-18.043421 45.106076 0 49.402836 36.438304 49.402836 73.71814 0 51.274005 66.802732 46.997046 112.537482 4.692774 125.056497-115.661048 181.280686-272.022508 199.388459-332.64246a302.188929 302.188929 0 0 0 6.370887-23.13221c0.381164-1.544457 0.564321-2.371138 0.56432-2.371138 5.301647-23.513374 8.098501-48.576155 8.098501-75.247746 20.701669-239.885914-157.282194-463.470872-501.087319-463.470872z" fill="#FFE8B0" ></path><path d="M1048.538062 377.793088c0 170.07347-138.763556 307.965793-382.461112 307.965794-152.307259 0-345.379284-53.862951-424.67133-135.778596-47.576218-49.165227-189.156429-31.864334-161.509651-86.039147 22.835199-44.749663 50.477026-75.980373 89.182514-126.006932 92.350632-119.378636 246.578562-248.202223 418.290543-248.202223 243.702506 0.014851 461.169036 117.977734 461.169036 288.061104z" fill="#FFF2B8" ></path><path d="M782.60428 799.29135s49.744398 122.99227 84.950107 122.99227c83.470002 0 67.961075-75.242796 110.854419-163.450123 23.008455-47.333659 140.367416-67.352203 140.367416-329.004075 0 0 84.554092 307.970744-264.973446 579.829895 0 0-48.194991 20.919477-48.194991-78.539618 0-99.464046-69.817394-6.261983-184.3399-18.399834-114.522505-12.123-179.409517-36.522457-185.42399 56.110335 0 0-49.689946 67.317551-106.56756-4.757127-56.882564-72.059828-44.279395-202.734783-211.348103-285.704816 0 0-94.444559 17.469199-52.783811-87.266793 0 0 196.403498 20.478911 244.954902 133.758921 27.419069 63.986078 14.429786 200.898265 77.688186 202.269465 51.689821 1.133592 50.650282-127.8385 90.603217-127.8385-0.014851 0 124.586229 66.347315 304.213554 0z" fill="#F2DBA2" ></path><path d="M634.608631 64.085081c-268.473226 0-394.351453 124.477325-452.66957 228.891555C143.867196 363.353402 116.819391 380.174127 97.068157 392.465433c-33.507795 20.845225-45.091226 34.235472-45.091226 155.559531 0 106.532909 13.667458 118.289595 56.862763 139.41203 19.63243 9.603357 46.521829 22.760946 82.470065 56.001431l-1.168244-1.242496a326.786393 326.786393 0 0 0 32.398954 34.151319l12.707122-20.221502-13.885266 19.10276c0.569271 0.668275 58.115159 68.921411 96.295929 192.4186 9.385549 30.359478 35.428466 49.194928 66.352265 47.992033 28.032892-1.08904 60.431846-20.370007 69.619387-61.015967l-1.039539 2.851306c3.539382-6.905507 6.479791-13.558554 9.073688-19.454223 9.67761-21.939215 13.73181-29.532797 27.701229-29.532797l-3.103765-0.400965c41.418189 10.954757 88.093473 16.746472 134.986565 16.746472 49.402836 0 98.285902-6.395638 141.372304-18.488937l-3.286923 0.455417c28.211098 0 37.269935 14.954506 37.269935 61.570388 0 21.320442 9.608307 37.245184 27.072556 44.878367 28.354654 12.39031 72.861757-0.762328 105.849784-31.280212 126.947467-117.408463 184.092391-275.537138 202.789235-338.072812a321.662952 321.662952 0 0 0 6.558994-23.845036c0.366314-1.504856 0.559371-2.385989 0.589071-2.499843 5.559057-24.627165 8.380661-50.843339 8.380662-77.866393l-0.044552 1.044488c10.360735-120.145914-27.493322-233.792237-106.58241-319.99474-65.565186-71.455905-189.339586-156.648571-406.608109-156.648571z m488.969269 475.608723c0 25.240988-2.613697 49.655295-7.791589 72.574647-0.0099 0.044552-0.173256 0.757378-0.51482 2.143429a286.962163 286.962163 0 0 1-6.148128 22.340181c-18.182026 60.842711-73.530032 214.085555-196.061935 327.434866-28.349703 26.216174-62.748532 34.240422-79.63856 26.854748-8.430163-3.682937-12.523965-11.083462-12.523965-22.637191 0-27.869536 0-85.85599-61.545637-85.85599h-1.673162l-1.60386 0.450467c-40.967722 11.514128-87.583604 17.607804-134.803409 17.607804-44.828866 0-89.36072-5.514505-128.783985-15.949493l-1.524657-0.405915h-1.579108c-30.503033 0-40.36875 22.379782-49.912705 44.026936-2.579046 5.846167-5.247195 11.885392-8.459864 18.167175l-0.697976 1.366251-0.341563 1.494956c-6.781752 30.008015-29.493196 41.44789-46.888142 42.121115-15.60298 0.603922-34.883946-7.197567-42.215169-30.913899-34.898797-112.879044-82.60867-176.483958-100.567937-200.432948l-14.216928 18.548339 12.875428-20.137348a301.852316 301.852316 0 0 1-29.983264-31.606924l-0.53957-0.663325-0.628673-0.579171c-38.561933-35.661125-67.302701-49.719647-88.286531-59.971479-34.953249-17.097935-43.254707-21.152136-43.254707-117.62132 0-114.002736 9.850866-120.140964 33.64145-134.946965 20.810573-12.949681 52.259092-32.512808 93.315917-108.399128 55.065846-98.617564 174.691991-216.323038 431.39368-216.323038 164.994581 0 299.411876 51.457162 388.718144 148.802529 74.445816 81.143415 110.047539 188.210944 100.290727 301.495903l-0.049502 0.514819v0.499969z" fill="#6E6E96" ></path><path d="M303.381923 292.352913c-56.956816-71.168795-45.432788-175.043454 25.740957-232.00027s175.043454-45.432788 232.00027 25.740956 45.432788 175.038504-25.740956 232.000271" fill="#FFF2B8" ></path><path d="M1123.30069 553.326611v233.015058a12.137851 12.137851 0 0 0 24.270752 0v-233.015058a12.137851 12.137851 0 0 0-24.270752 0z" fill="#6E6E96" ></path><path d="M289.04619 419.00832m-27.508172 0a27.508172 27.508172 0 1 0 55.016345 0 27.508172 27.508172 0 1 0-55.016345 0Z" fill="#6E6E96" ></path><path d="M343.691271 131.551138c71.173745-56.956816 175.043454-45.432788 232.000271 25.740957a165.301492 165.301492 0 0 1 18.30578 28.359603 164.257003 164.257003 0 0 0-36.106642-97.924538c-56.956816-71.183645-160.826526-82.697773-232.00027-25.740957-62.189161 49.769149-78.831679 135.352879-44.041787 203.650568-1.544457-50.135463 19.676981-100.345179 61.842648-134.085633z" fill="#F2E2BA" ></path><path d="M518.32386 318.09882s-20.973929 27.73093 11.83094 36.190795c32.804869 8.454914 174.91475-111.928609 104.453831-265.928832l-65.614688 3.776991c0-0.00495 66.149308 146.084878-50.670083 225.961046z" fill="#F2E2BA" ></path><path d="M312.856575 284.774182c-25.518198-31.889085-37.096678-71.807368-32.587061-112.408777 4.504667-40.601409 24.547962-77.014962 56.437047-102.53316s71.812318-37.096678 112.408777-32.592011 77.010012 24.547962 102.52821 56.432097c25.523148 31.889085 37.101629 71.822219 32.592011 112.408777-4.509618 40.596458-24.547962 77.019912-56.441997 102.53811a12.127951 12.127951 0 0 0-1.89097 17.048433 12.127951 12.127951 0 0 0 17.058333 1.895921c36.953123-29.577349 60.184336-71.762817 65.401831-118.809365 5.222444-47.041598-8.192554-93.301067-37.764954-130.24924C509.557084 2.227583 397.826483-10.167678 321.539198 50.877991c-36.953123 29.577349-60.179386 71.772717-65.39688 118.809364-5.217494 47.041598 8.192554 93.301067 37.769903 130.24924a12.127951 12.127951 0 1 0 18.944354-15.162413z" fill="#6E6E96" ></path><path d="M946.148457 340.038035c-16.711821 37.443191-73.772591-4.56902-127.452386-28.52296-53.674844-23.95889-83.638308-20.775922-66.931437-58.229013 16.706871-37.443191 73.772591-48.383098 127.452386-24.434108 53.674844 23.96384 83.643258 73.73794 66.931437 111.186081z" fill="#FFFFFF" ></path></symbol><symbol id="icon-a-penguinanimal" viewBox="0 0 1024 1024"><path d="M625.348562 898.027473c-50.575167-8.443803-96.675911-9.25354-127.249742-3.643816-22.217679-0.680346-47.223524 0.34226-73.544148 3.35999-87.681153 10.03406-156.450357 38.182853-153.6288 62.838091 2.825731 24.655237 76.182054 36.52164 163.85486 26.470884 36.337988-4.165554 69.403637-11.432317 95.507218-20.276814 23.060807 7.997196 50.504211 14.963438 80.255782 19.926206 87.038372 14.533526 160.903911 6.469548 164.998508-18.014559 4.082076-24.492455-63.159481-56.122282-150.193678-70.659982z" fill="#FFE38F" ></path><path d="M627.068209 887.738805c-50.078473-8.364499-97.769473-9.679278-130.851818-3.614599l2.195472-0.166956c-23.666023-0.726259-48.918128 0.429912-75.050926 3.4226-74.516667 8.527281-137.233714 30.189831-156.087229 53.918462-5.259116 6.619808-7.521371 13.498398-6.715807 20.46464 0.793041 6.962068 4.562075 13.160312 11.181882 18.423602 23.720283 18.845166 89.722191 25.765495 164.230511 17.225692 35.974859-4.119641 69.745897-11.302926 97.665125-20.765161l-6.770068-0.029217c24.321325 8.435455 52.662118 15.472654 81.958734 20.364466 80.848476 13.506746 170.725101 10.948144 177.006823-26.587754 6.260853-37.52755-77.910049-69.153203-158.762699-82.655775z m138.177016 79.220654c-1.93669 11.557534-57.683322 25.364801-152.986019 9.44554-28.161315-4.695639-55.325067-11.436491-78.55283-19.496295l-3.385034-1.168692-3.389209 1.143649c-26.529319 8.994758-58.810275 15.844131-93.33679 19.800989-76.144489 8.727628-132.525553 0.146087-148.870551-12.834747-2.041038-1.623648-3.289035-3.243122-3.426774-4.457727s0.709563-3.071992 2.329037-5.11303c12.985008-16.344999 65.97269-37.45242 142.113005-46.171701 24.784628-2.838253 49.698648-3.973554 72.045718-3.293208l1.110258 0.037565 1.089388-0.200347c30.795047-5.651463 75.869011-4.307467 123.647664 3.673033 95.302698 15.915087 143.54048 47.077437 141.612137 58.634971z" fill="#6E6E96" ></path><path d="M260.094598 330.180668s-121.318627 140.794052-86.787939 351.050176c0 0 40.574498 115.58786 51.389078-74.207798 10.810405-189.80818 35.39886-193.36017 35.398861-276.842378z" fill="#9595AB" ></path><path d="M252.189228 323.373034c-5.087986 5.901897-124.098445 146.929688-89.179584 359.556588l0.146087 0.901563 0.30052 0.863998c4.720683 13.452485 17.814212 44.431184 37.343899 41.663887 14.42083-2.036864 28.562009-17.830908 34.309472-118.739156 6.060505-106.371885 16.641346-154.522015 24.363064-189.674615 6.173201-28.098706 11.052492-50.295516 11.052492-87.756283v-28.094533l-18.33595 21.278551z m-37.915723 283.053144c-5.033725 88.332282-16.203086 98.721123-17.459431 99.618512 0.538433-0.383999 1.798952-0.517564 2.408341-0.258782-3.756512-1.6153-11.570056-15.22222-16.082043-28.015228l0.446607 1.773908C150.316809 476.868269 266.822927 338.361515 268.008315 336.988302l-18.348472-6.80346c0 35.198513-4.432684 55.366806-10.564145 83.277687-7.876153 35.841294-18.665688 84.930552-24.822193 192.963649z" fill="#6E6E96" ></path><path d="M784.895954 330.180668s121.301931 140.8024 86.783764 351.050176c0 0-40.561977 115.58786-51.389077-74.207798-10.806232-189.80818-35.394686-193.36017-35.394687-276.842378z" fill="#9595AB" ></path><path d="M776.994758 336.992476l-0.008348-0.008348c1.181214 1.377388 117.674811 139.892489 84.400467 342.56046l0.446607-1.769734c-4.499466 12.784661-12.31301 26.395754-16.069521 28.011054 0.60939-0.258782 1.865734-0.121043 2.404167 0.258782-1.256344-0.897389-12.421531-11.28623-17.459431-99.618512-6.156505-108.033098-16.946041-157.122356-24.818019-192.963649-6.135636-27.915055-10.559971-48.083348-10.559972-83.277687l-18.33595 6.807634z m32.886172 270.623264c5.75581 100.908248 19.901163 116.702292 34.321993 118.734982 19.53386 2.754775 32.60652-28.223923 37.327203-41.659713l0.300521-0.863998 0.146087-0.901562c34.910514-212.614379-84.087424-353.654691-89.17541-359.556589l-18.340124-21.286898v28.098706c0 37.464942 4.879291 59.657577 11.044144 87.756283 7.73424 35.160948 18.315081 83.306904 24.375586 189.678789z" fill="#6E6E96" ></path><path d="M746.821623 227.33573c38.929981 100.924943 87.130198 213.666202 87.130198 326.674591 0 253.794093-119.102285 387.429904-309.181769 387.429903-190.096179 0-309.181769-145.656648-309.181768-399.438219 0-110.191005 34.175907-222.656786 83.331947-314.62871C362.952057 107.51136 374.13394 22.426374 524.761704 22.426374c120.592368 0 171.255187 73.201888 222.059919 204.909356z" fill="#9595AB" ></path><path d="M737.088084 231.092242l10.472319 26.955057c35.603382 91.337491 75.956663 194.866949 75.956664 295.958848 0 239.581958-108.888748 376.995149-298.747015 376.995149-187.065926 0-298.747014-145.427083-298.747014-389.003464 0-100.65364 29.154703-210.652645 82.100646-309.720202 10.739449-20.101511 19.826033-38.871547 28.616271-57.019671C379.752012 86.462374 405.709506 32.861128 524.761704 32.861128c114.206298 0 162.73208 69.666593 212.32638 198.231114zM524.761704 11.99162c-132.133206 0-163.454165 64.670433-206.800133 154.179755-8.698411 17.964473-17.697343 36.542509-28.248967 56.28089-54.523678 102.039375-84.563248 215.523588-84.563248 319.54974 0 125.909919 29.576267 230.111375 85.535767 301.33066 55.78837 71.01059 136.732846 108.542314 234.080755 108.542314 97.999038 0 178.893427-35.390513 233.934669-102.348244 56.852715-69.174073 85.681854-168.604759 85.681854-295.516414 0-105.019541-41.117106-210.485689-77.384137-303.542828l-10.447276-26.888274C704.869737 89.571931 650.366928 11.99162 524.761704 11.99162z" fill="#6E6E96" ></path><path d="M703.64261 210.243603c32.781824 84.972291 73.356322 179.903511 73.356322 275.0476 0 213.67455-100.269641 326.211287-260.317901 326.211287-160.056609 0-260.326249-122.654275-260.326249-336.324651 0-92.781661 28.783226-187.474969 70.163287-264.917541C380.432358 109.352051 389.840332 37.707028 516.672683 37.707028c101.530159 0 144.18326 61.64018 186.969927 172.536575z" fill="#A9A9BA" ></path><path d="M632.314803 208.348651c0 22.584982-17.029519 23.645153-43.450316 38.053462-18.795079 10.234407-42.340059 34.630862-67.901033 34.630862-22.964807 0-44.31014-24.584281-62.032527-34.630862-29.73905-16.862563-49.297953-20.14325-49.297953-38.053462 0 0 49.84056-12.23788 111.33048-12.23788 61.498268 0 111.35135 12.23788 111.351349 12.23788z" fill="#6E6E96" ></path><path d="M786.118907 633.452192c0 197.421377-100.682857 301.372398-261.357203 301.372398-160.686868 0-261.348855-113.304736-261.348855-310.71359 0-197.417203 153.253149-320.071478 261.348855-320.071478 108.108228 0 261.357203 131.999641 261.357203 329.41267z" fill="#F0F0FF" ></path><path d="M775.684153 633.452192c0 184.899671-91.458534 290.937644-250.922449 290.937644-157.118182 0-250.914101-112.257086-250.9141-300.278836 0-86.207766 31.01209-166.801634 87.318023-226.930862 47.770305-51.009253 110.458135-82.697514 163.591904-82.697514 99.902337-0.008348 250.926622 127.212176 250.926622 318.969568zM524.761704 293.604767c-58.718449 0-127.241393 34.217646-178.826644 89.304801-59.945576 64.006783-92.956965 149.663593-92.956965 241.197258 0 98.629297 25.21454 180.291684 72.913889 236.167706 47.469784 55.596371 116.243162 84.980639 198.86972 84.980639 83.173339 0 151.888283-27.714707 198.706939-80.138913 48.49239-54.285766 73.085019-132.23338 73.085019-231.66824 0-207.451262-160.970693-339.84325-271.791958-339.843251z" fill="#6E6E96" ></path><path d="M458.551102 100.181989a19.963772 15.88587 90 1 0 31.77174 0 19.963772 15.88587 90 1 0-31.77174 0Z" fill="#6E6E96" ></path><path d="M556.742139 101.525985a21.307768 16.954389 90 1 0 33.908778 0 21.307768 16.954389 90 1 0-33.908778 0Z" fill="#6E6E96" ></path><path d="M637.30679 194.829384c0-4.895987-16.052826-3.322426-41.279888-14.5377-20.176641-8.957193-46.209266-31.604784-74.654406-31.604784-32.001304 0-60.97653 22.334548-81.967081 31.629827-20.973856 9.295279-33.950516 5.551289-33.950517 14.516831 0 14.207961 20.36864 16.812476 51.322296 30.194004 18.461167 7.967978 40.687194 21.616637 64.595302 21.616637 26.600276 0 51.1136-13.494224 70.680852-21.616637 27.435056-11.398926 45.128225-12.279619 45.236746-30.052092 0.008348-0.054261 0.016696-0.100174 0.016696-0.146086z" fill="#FFE38F" ></path><path d="M722.934383 589.851615c0 159.839566-81.512126 244.010467-211.612642 244.010467-130.10469 0-211.604295-91.738185-211.604295-251.569403s124.08175-259.140861 211.604295-259.140861c87.526719-0.004174 211.612642 106.868579 211.612642 266.699797z" fill="#FFFFFF" ></path><path d="M413.084791 198.047462h218.098885S561.825952 246.635852 521.372496 246.635852c-40.432586 0-115.859163-36.888943-108.287705-48.58839z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-birdanimal" viewBox="0 0 1024 1024"><path d="M445.289056 821.713137s-28.931868 27.902654-36.718459 102.836994" fill="#FFBB3F" ></path><path d="M419.060982 925.642616l-20.980771-2.18497c8.090293-77.865911 38.59129-108.088514 39.890461-109.337068l14.640985 15.185118-7.318383-7.592559 7.381654 7.529288c-0.26574 0.26574-26.409451 27.033728-33.613946 96.400191z" fill="#6E6E96" ></path><path d="M430.648071 806.532237c-3.53054 3.403997-34.714867 35.566921-43.054028 115.837142a21.090442 21.090442 0 1 0 41.957325 4.357286c6.723633-64.751874 30.391327-89.845282 30.62754-90.077277l-0.248868 0.248867a21.077787 21.077787 0 0 0 0.539916-29.813448 21.077787 21.077787 0 0 0-29.821885-0.55257z" fill="#FFBB3F" ></path><path d="M408.587469 956.185794a32.901089 32.901089 0 0 1-3.273237-0.164506c-17.361652-1.813778-30.011699-17.395396-28.210574-34.740175 8.727225-84.015884 42.412878-118.663261 46.22603-122.337217a31.48803 31.48803 0 0 1 21.95515-8.866422 31.340396 31.340396 0 0 1 22.781895 9.688949c11.878137 12.308382 11.722068 32.074344-0.295266 44.205566-1.358224 1.548038-21.693628 25.688158-27.729713 83.842942a31.551301 31.551301 0 0 1-31.454285 28.370863z m36.697369-145.017878c-2.741757 0-5.3401 1.050304-7.314166 2.952662-1.299171 1.252772-31.79595 31.454285-39.886243 109.341286a10.557875 10.557875 0 0 0 9.402119 11.578653c5.681765 0.598969 10.979684-3.644428 11.578652-9.402119 6.858612-66.046827 30.66972-93.249279 33.360861-96.134452l0.084362-0.092798v-0.004218l0.004218 0.004218 0.101234-0.105452 0.113889-0.10967a10.570529 10.570529 0 0 0 0.160287-14.788618 10.477731 10.477731 0 0 0-7.605213-3.239492z" fill="#6E6E96" ></path><path d="M356.148195 964.596662c-0.118106 0.134979-0.050617 0.063271-0.172942 0.194032 3.90595-4.175907 40.038095-39.455998 105.376283 6.837521a21.090442 21.090442 0 1 0 24.393205-34.419601c-78.490188-55.628149-139.719958-24.726434-161.130975-0.620059a21.090442 21.090442 0 1 0 31.534429 28.008107z" fill="#FFBB3F" ></path><path d="M473.533375 986.058295a31.458503 31.458503 0 0 1-18.276977-5.82518c-20.305877-14.392117-39.32102-21.68941-56.513947-21.68941-21.769554 0-33.744707 12.042642-35.035442 13.421957a31.673625 31.673625 0 0 1-23.330247 10.262609 31.580827 31.580827 0 0 1-20.993425-7.980623 31.42054 31.42054 0 0 1-10.57053-21.786426 31.39945 31.39945 0 0 1 7.930006-22.878912c14.653639-16.501162 43.906082-34.136989 82.041819-34.136989 30.703465 0 62.018553 11.161062 93.063683 33.158393 14.227612 10.102322 17.597865 29.885156 7.516633 44.10855a31.715806 31.715806 0 0 1-25.831573 13.346031z m-74.795142-48.605032c21.647229 0 44.766572 8.600682 68.712659 25.570052 4.610371 3.269018 11.468982 2.062645 14.704256-2.501327a10.574747 10.574747 0 0 0-2.513981-14.712692c-27.40492-19.420079-54.61159-29.269315-80.860753-29.269315-31.150582 0-54.662207 13.974527-66.278823 27.054819a10.448205 10.448205 0 0 0-2.640523 7.622086c0.168724 2.817683 1.417278 5.394935 3.522104 7.267766 4.188562 3.720354 11.173716 3.290109 14.881416-0.885799l0.282611 0.248867-0.269957-0.257303 0.071707-0.084362c3.150912-3.349162 20.402893-20.052792 50.389284-20.052792z" fill="#6E6E96" ></path><path d="M781.11216 810.632219c-175.974428 107.708886-417.767906 76.545649-515.467269-45.80844-128.50828-160.941161-17.724407-308.835775 80.590796-403.911486 98.319421-95.067275 155.634806 20.187771 275.719563 144.380947 120.10163 124.180521 275.808143 233.93518 159.15691 305.338979z" fill="#6CB7E6" ></path><path d="M712.661022 723.798652c-33.487403 33.757361-125.846666 67.379743-206.218121 59.124945-53.223839-5.470861-111.235208-66.008865-83.454878-28.463661 64.34272 87.010726-4.682078 40.375542-108.25302-67.582211-14.079979-14.674729 69.590022 128.035854-43.058246 10.608492-99.517358-103.739665 6.618181-266.621146 86.711243-347.359575 80.093062-80.734211 126.7873 17.138093 224.613204 122.594519 97.842777 105.464863 209.752879 170.34328 129.659818 251.077491z" fill="#9EDBFF" ></path><path d="M212.146876 649.695276s-21.09466-90.971511 75.444729-90.971511c37.271029 0 71.374273 1.446804 98.045245 60.386152l65.287572-140.766044s-275.867196-109.100855-238.777546 171.351403z" fill="#6CB7E6" ></path><path d="M775.675044 801.753143c-164.248142 100.533918-403.468587 79.835758-501.889242-43.437874-94.852153-118.802458-68.788585-246.340578 79.692343-389.920087 23.161523-22.406485 44.319454-32.884217 64.684385-32.074344 40.472558 1.6324 80.877626 47.516765 132.034601 105.599842 19.057323 21.638793 40.658154 46.166977 64.27523 70.598145 21.60083 22.347432 44.357417 44.209784 66.346312 65.371933 69.906378 67.227892 135.940551 130.722776 130.832446 177.754461-1.885485 17.361652-13.65817 32.441317-35.976075 46.107924z m-146.232687-303.710797c-23.288066-24.081066-43.787975-47.364914-63.625645-69.88107-54.438648-61.824521-97.454713-110.661548-146.819001-112.639831-26.358834-1.054522-52.523636 11.338221-79.996046 37.903742-65.878104 63.705788-107.734195 123.016329-127.951491 181.314527-28.619729 82.518462-12.987494 162.118008 46.462243 236.567267 49.212437 61.630489 135.033662 102.832776 235.466346 113.053204 103.760755 10.545221 208.023463-12.48976 293.574731-64.84889 27.80142-17.019986 43.210097-37.747673 45.800003-61.613617 6.225898-57.201496-60.196339-121.063354-137.09209-195.002224-21.862352-21.035607-44.471305-42.775634-65.81905-64.853108z" fill="#6E6E96" ></path><path d="M705.068463 512.371192l-347.920581 65.321316s28.337118 18.572243 43.615033 87.470498c17.513503 78.996359 111.011649 163.185184 216.716943 125.935246 26.746898-9.418991 62.356-58.011369 104.444086-63.444267 16.944061-2.197624-6.719415-44.922641 31.669407-44.922641 19.799707 0 52.667051-89.706085 16.522252-138.256282l-65.04714-32.10387z" fill="#6CB7E6" ></path><path d="M718.549473 799.180109s32.276812 17.817205 66.540344 8.908603c0 0 15.050139-11.679887 21.66832-18.276977 0 0-44.931077 15.847358-88.208664 9.368374z" fill="#347FAB" ></path><path d="M915.880082 418.177061c37.022161 15.130283 42.155575 88.246626-4.745349 202.995502-46.892488 114.753094-114.926035 195.525267-151.93976 180.386548-37.017943-15.134501-29.007794-120.422204 17.89313-235.17108 46.896706-114.753094 101.761381-163.337035 138.791979-148.21097z" fill="#6CB7E6" ></path><path d="M936.894599 446.779918c19.259791 8.98031 7.896261 45.812658-39.477089 103.153351-112.783246 136.47203-18.108253-6.968282-40.337579 8.697698-22.233544 15.657544-72.913875 82.341303-82.543771 77.853256-19.259791-8.98031 4.517573-62.288511 53.122605-119.068198 48.579724-56.783905 89.976043-79.620636 109.235834-70.636107z" fill="#9EDBFF" ></path><path d="M911.940388 427.819611c7.187623 2.940008 12.793462 9.085762 16.644576 18.264322 13.797367 32.875781 3.922822 95.265525-27.101217 171.153153-35.448814 86.757641-85.487997 157.967409-121.649668 173.152527-6.710979 2.817683-12.325254 3.33229-16.716284 1.539602-27.092781-11.072482-22.756587-108.193966 23.595986-221.593053 46.605658-114.0318 97.577038-153.812592 125.226607-142.516551z m-144.494835 134.632944c-43.075118 105.388937-61.993244 228.392612-12.202929 248.749106 9.688949 3.956567 20.664415 3.425088 32.65644-1.615528 41.497553-17.420705 94.885897-91.553608 132.85291-184.46544 33.588638-82.164143 43.176352-148.599034 27.021074-187.08909-5.981249-14.252921-15.657544-24.443822-27.974362-29.48022-47.276334-19.331499-105.658895 39.645812-152.353133 153.901172z" fill="#6E6E96" ></path><path d="M980.450579 482.009392c32.226195 23.684566 19.411643 95.856058-54.021058 195.736172-73.436918 99.884332-159.06833 161.658236-191.294524 137.973669-32.217759-23.680348 1.176847-123.85151 74.609546-223.735842 73.436918-99.88855 138.484059-133.662784 170.706036-109.973999z" fill="#6CB7E6" ></path><path d="M960.309207 493.92971c19.888287 17.530375 4.175907 62.790463-52.20728 124.488441-134.211135 146.873836-18.825328-14.51866-44.222438-0.409155s-86.20929 87.17945-96.151324 78.414263c-19.888287-17.509285 10.726599-80.860754 68.362558-141.474683 57.652832-60.605493 104.330197-78.540805 124.218484-61.018866z" fill="#9EDBFF" ></path><path d="M974.283734 490.39917c6.263861 4.606152 10.203556 11.928754 11.700977 21.765335 5.373845 35.246346-19.39477 93.354731-67.940749 159.414213-72.563774 98.703267-153.15457 153.082862-176.729466 135.750738-3.813152-2.805029-6.301824-7.862517-7.402745-15.045921-5.917978-38.781104 28.716745-118.604208 84.235224-194.120644 48.567069-66.067918 96.632186-107.046646 131.891187-112.428927 9.815492-1.510076 17.990147 0.063271 24.245572 4.665206z m-172.916314 95.421594c-59.462391 80.86919-94.83528 165.095978-88.044158 209.588374 1.965629 12.856733 7.229803 22.507719 15.657544 28.704091 43.332422 31.863439 138.403915-48.448963 205.842711-140.192384 52.574253-71.51347 78.055725-133.624821 71.753901-174.886161-2.336821-15.282134-9.229177-27.523026-19.94734-35.406634-10.718162-7.883607-24.464912-10.815179-39.73861-8.491012-41.278213 6.301824-92.954013 49.157602-145.524048 120.683726z" fill="#6E6E96" ></path><path d="M1002.477436 557.947636c24.692689 27.607388-0.66224 90.60032-86.268343 167.179714-85.597667 76.570958-175.025358 116.258951-199.722265 88.651563-24.701125-27.607388 24.671599-112.070389 110.269266-188.641347 85.606103-76.583612 151.015999-94.793099 175.721342-67.18993z" fill="#6CB7E6" ></path><path d="M974.891138 565.578158c18.141998 19.162775-2.298858 62.263202-65.241172 117.676229-149.830716 131.937585-17.382742-16.096225-44.327891-4.614589-26.953585 11.490073-95.505956 77.697187-104.570628 68.113691-18.13778-19.158557 19.116376-78.650475 83.218665-132.895092 64.093852-54.210871 112.783246-67.438797 130.921026-48.280239z" fill="#9EDBFF" ></path><path d="M994.720372 564.886392c18.188397 20.339622-0.793001 76.722809-85.454252 152.467021-64.591587 57.775156-134.90712 96.729202-171.009738 94.708738-6.50851-0.362756-11.224333-2.125917-14.004053-5.243084-2.792374-3.100295-4.024056-7.997496-3.657083-14.501788 2.016246-36.106836 48.516452-101.668583 113.099603-159.431085 84.669687-75.735776 142.824472-88.330988 161.025523-67.999802z m-174.91147 52.481455c-69.459261 62.128223-117.676229 131.97133-120.008831 173.797894-0.674894 12.22402 2.332603 22.170272 8.925474 29.547709 6.601308 7.377437 16.142624 11.4732 28.370863 12.156531 41.822346 2.332603 116.59218-37.853125 186.051441-99.97713 85.585013-76.558304 118.950091-146.253777 87.086652-181.875534-31.863439-35.625974-104.836368-10.203556-190.425599 66.35053z" fill="#6E6E96" ></path><path d="M778.889227 623.226772c-15.176682 63.638299-69.484569-52.696578-64.853108-33.833287 3.897514 15.919065 30.943896 84.977608 18.082944 72.129311-47.364914-47.360696-11.131535 54.932165-22.714405 51.405843-51.56613-15.746124-38.144173 30.711901-59.542535 38.928737-37.456625 14.345718-78.515497 14.624112-117.022426 3.46305-103.136478-29.872502-148.944918-165.969122-127.428449-240.262312 21.520687-74.2721 122.569211-110.286138 225.693036-80.409418 103.13226 29.851411 165.716037 113.34847 147.784943 188.578076z" fill="#6CB7E6" ></path><path d="M748.784731 589.887001c-2.551943 8.820023-15.366496-38.401476-53.789063-40.211036-6.516946-1.092485-25.810483-5.011089 10.41446 83.020415 3.433524 8.347597-20.685505-37.595821-24.987955-16.281821-1.598655 7.917352-5.968595 0 6.875484 43.741576 7.63474 26.000297-32.909525-24.545056-32.909526 14.476479 18.125126 39.07637-25.869536 36.58348-36.743767 39.869371-27.666441 2.547725-61.377404-3.825806-89.073372-11.857046-88.03994-25.50678-94.915424-91.254123-94.915424-136.299089 0 0 48.516452-16.273385 93.709051-47.892175-17.467104 11.599743 43.724704-27.075909 54.531446-67.308036 88.027286 25.481472 185.254222 75.326622 166.888666 138.741362z" fill="#9EDBFF" ></path><path d="M768.765815 620.809807c-2.265113 9.520225-4.833929 11.338221-4.850802 11.350876a0.940634 0.940634 0 0 1 0.438682-0.122325c-3.201529-0.046399-11.928754-5.356972-34.470218-40.388196-7.086388-11.000774-11.350876-17.656918-20.090755-13.902819-1.982502 0.852054-8.259017 4.386812-5.871579 14.130596 1.261208 5.175594 4.47961 14.615676 8.187309 25.565834 4.530227 13.333377 12.957967 38.152609 13.029675 43.496927-0.02109-1.586001 1.273863-5.462424 5.378063-7.34791 4.116854-1.885485 7.887825-0.345883 9.073108 0.695984l-0.122325-0.10967c-10.068577-10.072795-21.86657-19.597238-33.05294-13.974527-13.472574 6.778468-10.321662 28.159958-6.980936 50.781566 0.965942 6.559127 2.290422 15.535219 1.944539 18.002801 0.101234-0.793001 0.974378-3.231056 3.652864-4.918291a9.035145 9.035145 0 0 1 7.411181-1.079831c-42.18932-12.894696-52.110263 11.4732-58.05355 26.017169-2.999061 7.343692-5.040616 11.895009-8.271671 13.130909-34.183388 13.101382-72.352869 14.206522-110.395808 3.193093-98.003065-28.383517-140.563576-157.499201-120.316752-227.354962 19.888287-68.649388 115.347844-101.537823 212.785685-73.310375 95.775914 27.700186 157.507637 105.081017 140.57623 176.143151z m-134.767923-196.179071c-108.476578-31.42054-215.506352 7.83299-238.587731 87.521115-22.511938 77.73515 25.114498 221.466511 134.540146 253.161227 42.433969 12.287291 85.175858 10.98812 123.644824-3.758317 11.873919-4.547099 16.433672-15.729251 20.107627-24.71378 5.782999-14.168559 8.685044-21.29291 32.673312-13.96609a11.781121 11.781121 0 0 0 11.203243-2.27355c6.474766-5.567877 5.14185-14.62833 2.4718-32.673312-1.282299-8.701916-3.956567-26.81017-2.0753-31.146365-0.674894 1.581783-3.568503 2.982188-5.221993 2.547726 0.139197 0.033745 3.44196 0.974378 12.021552 9.549752 7.284639 7.284639 13.852202 4.108418 15.703943 2.95688 9.680513-6.027648 6.765814-15.822049-8.625991-61.094792-3.412433-10.051705-6.630835-19.529749-7.676921-23.815327a3.146694 3.146694 0 0 1-0.067489-0.261521c0.514607 2.712231-0.944852 7.782373-5.711292 10.051704-4.770658 2.277768-9.629896 0.215123-11.414147-1.889703 0.788783 0.932198 3.344944 4.901419 5.399153 8.094511 18.0492 28.062942 35.870623 52.991844 55.36241 49.659555 10.283699-1.746289 17.450232-10.81096 21.288692-26.940931 19.496004-81.889967-48.583942-170.182993-155.035838-201.008782z" fill="#6E6E96" ></path><path d="M345.940421 281.405546m-260.660988 0a260.660988 260.660988 0 1 0 521.321975 0 260.660988 260.660988 0 1 0-521.321975 0Z" fill="#6CB7E6" ></path><path d="M545.96217 223.25498c1.885485 35.685027-21.841261 133.397044-23.629731 99.386598-5.458206-103.566723-35.018569 103.575159-43.189006 52.62487-5.3401-33.306026-17.78346 15.682852-27.965926 22.06482-30.568486 19.204956-68.311941 29.758613-107.91979 31.800168-117.625612 6.095138-217.568997-76.19133-223.238108-183.8032-5.652238-107.616088 85.099932-199.785537 202.717108-205.880674 117.625612-6.099356 217.564779 76.199766 223.225453 183.807418z" fill="#9EDBFF" ></path><path d="M269.588804 206.146414c4.87611 15.590055-0.130761 34.339457-11.177935 41.809692-11.047173 7.482889-23.967178 0.88158-28.855942-14.742219-4.892982-15.606927 0.118106-34.352112 11.177934-41.826564 11.064046-7.466016 23.971396-0.906889 28.855943 14.759091z" fill="#6E6E96" ></path><path d="M345.940421 31.154801c137.986324 0 250.246527 112.264421 250.246527 250.250745s-112.251767 250.250746-250.246527 250.250746c-137.986324 0-250.250746-112.264421-250.250746-250.250746S207.954097 31.154801 345.940421 31.154801zM74.869191 281.405546c0 149.472179 121.603269 271.075448 271.075448 271.075448s271.075448-121.603269 271.075448-271.075448c0-149.480615-121.603269-271.079666-271.075448-271.079666-149.476397 0-271.075448 121.607487-271.075448 271.079666z" fill="#6E6E96" ></path><path d="M190.107365 407.868053c-25.818919 17.07904-124.302846 51.359444-144.19535 42.315862-17.488194-7.94266 29.332586-92.245374 77.005421-123.779802 0 0 34.234005-29.357895 72.10822 6.525382 30.311183 48.579724-4.918291 74.938558-4.918291 74.938558z" fill="#FFDC6E" ></path><path d="M184.362329 399.183009c-28.923432 19.124813-120.443295 47.453494-134.147864 41.518644 1.526948 0.691766 2.315731 2.020464 2.442273 2.51398-3.146694-12.392744 33.483185-79.996046 76.009952-108.126476l0.539915-0.358538 0.493517-0.426027c2.762848-2.298858 28.337118-22.085911 58.171656 6.1795l-1.674581-2.045773c24.958429 40.00435-1.202155 60.246956-2.324167 61.090573l0.489299-0.345883z m17.825641-73.812328c-35.34758-33.483185-71.741247-19.137467-86.044784-6.867048l1.033431-0.788782C73.418169 346.663591 29.655502 416.856799 31.84469 444.438879c0.77191 9.743784 6.449457 13.721441 9.764875 15.218863 26.586611 12.076387 132.173798-28.518495 154.242836-43.113081l0.253085-0.168724 0.24465-0.181378c14.835017-11.09779 35.499432-43.939826 7.516633-88.786541l-0.704421-1.138884-0.974378-0.898453z" fill="#6E6E96" ></path><path d="M50.214465 440.701653S189.542141 387.444069 187.86756 340.48831c0 0 35.178857 50.811092-3.505231 70.817485-38.684088 20.006393-134.147864 54.662207-134.147864 29.395858z" fill="#6E6E96" opacity=".15" ></path><path d="M536.834227 830.149314s-34.035755 32.825164-43.189006 120.970556" fill="#FFBB3F" ></path><path d="M504.135606 952.203918l-20.980771-2.176533c9.4443-90.929331 44.855152-126.023826 46.361009-127.474848l14.640985 15.185118-7.318384-7.592559 7.373219 7.537724c-0.320575 0.316357-31.517556 32.112307-40.076058 114.521098z" fill="#6E6E96" ></path><path d="M522.197461 814.968414c-4.053583 3.90595-39.856717 40.860622-49.528794 133.970704a21.090442 21.090442 0 0 0 41.957325 4.357285c8.132474-78.300374 36.570826-107.692014 36.84922-107.978844a21.086224 21.086224 0 1 0-29.277751-30.349145z" fill="#FFBB3F" ></path><path d="M493.674747 982.75975c-1.088267 0-2.189188-0.059053-3.294327-0.172941-17.348997-1.805342-29.994826-17.38696-28.202139-34.73174 10.064359-96.885271 48.364601-136.299089 52.700796-140.479214a31.483811 31.483811 0 0 1 21.95515-8.862204c8.668172 0 16.754247 3.433524 22.769241 9.676295 5.863143 6.069829 9.014055 14.075761 8.862204 22.524592s-3.589593 16.332438-9.672077 22.199799c0.004218 0.008436-26.08044 28.261192-33.681435 101.474551a31.547083 31.547083 0 0 1-31.437413 28.370862z m43.15948-163.155657a10.50304 10.50304 0 0 0-7.318383 2.952662c-1.505858 1.45524-36.908273 36.503337-46.356791 127.47063a10.566311 10.566311 0 0 0 9.402119 11.58287 10.536785 10.536785 0 0 0 11.574434-9.402119c8.478358-81.636882 38.553328-112.998369 39.831409-114.293322 2.214496-2.142789 3.361816-4.770658 3.416651-7.584122a10.435551 10.435551 0 0 0-2.952662-7.499762 10.473513 10.473513 0 0 0-7.596777-3.226837z" fill="#6E6E96" ></path><path d="M429.192831 995.768335c-0.097016 0.10967-0.042181 0.059053-0.143415 0.160287 4.795966-5.175594 49.157602-48.925607 128.833072 7.541942a21.086224 21.086224 0 0 0 29.404294-5.011089 21.103096 21.103096 0 0 0-5.011089-29.408512c-90.186947-63.89982-160.198777-28.788453-184.625727-1.303389a21.090442 21.090442 0 0 0 1.763161 29.775485 21.090442 21.090442 0 0 0 29.779704-1.754724z" fill="#FFBB3F" ></path><path d="M570.064327 1017.904862a31.42054 31.42054 0 0 1-18.281195-5.833616c-24.93312-17.669572-48.411-26.628792-69.767181-26.628792-26.679409 0-41.708458 13.970309-44.964822 17.370088l-0.324793 0.341665a31.673625 31.673625 0 0 1-23.313374 10.245737 31.580827 31.580827 0 0 1-21.00608-7.993277 31.403668 31.403668 0 0 1-10.566311-21.777991 31.416322 31.416322 0 0 1 7.925788-22.878911c16.433672-18.500535 49.313671-38.262279 92.300209-38.262279 34.984825 0 70.749996 12.772372 106.304263 37.962795 14.227612 10.102322 17.597865 29.885156 7.516633 44.10855a31.698934 31.698934 0 0 1-25.823137 13.346031z m-88.048376-53.557067c25.814701 0 53.392562 10.266827 81.965893 30.513651 4.623025 3.277455 11.468982 2.066863 14.704256-2.505545a10.570529 10.570529 0 0 0-2.513981-14.708474c-31.90562-22.604735-63.57081-34.073718-94.101333-34.073718-36.005602 0-63.140564 16.104661-76.537213 31.18011a10.477731 10.477731 0 0 0-2.640523 7.626303c0.164505 2.813465 1.417278 5.390717 3.522103 7.263548 4.201216 3.737226 11.177934 3.298545 14.889852-0.877362l0.15607 0.134979-0.151852-0.143415 0.118107-0.126543c3.800498-4.057801 24.553492-24.283535 60.588621-24.283534z" fill="#6E6E96" ></path><path d="M293.264934 297.581915c0 12.42227-18.255886 14.058888-40.776261 14.058888s-40.77626-1.636618-40.77626-14.058888c0-12.426488 18.255886-22.495065 40.77626-22.495065s40.77626 10.068577 40.776261 22.495065z" fill="#FFFFFF" opacity=".45" ></path><path d="M792.4082 273.678008m-29.526618 0a29.526618 29.526618 0 1 0 59.053237 0 29.526618 29.526618 0 1 0-59.053237 0Z" fill="#9EDBFF" opacity=".41" ></path><path d="M90.796693 696.895685m-16.872354 0a16.872353 16.872353 0 1 0 33.744707 0 16.872353 16.872353 0 1 0-33.744707 0Z" fill="#9EDBFF" ></path><path d="M706.64181 390.379859m-14.058889 0a14.058888 14.058888 0 1 0 28.117777 0 14.058888 14.058888 0 1 0-28.117777 0Z" fill="#9EDBFF" ></path><path d="M165.688851 878.644675m-37.591603 0a37.591603 37.591603 0 1 0 75.183207 0 37.591603 37.591603 0 1 0-75.183207 0Z" fill="#9EDBFF" opacity=".41" ></path></symbol><symbol id="icon-fish" viewBox="0 0 1309 1024"><path d="M406.404805 819.176179s253.542157 277.925688 335.468437 163.257048c81.92628-114.684882 9.511959-241.778079-44.890816-189.194324-54.386533 52.572927-102.877493 102.352359-290.577621 25.937276z" fill="#E8BF56" ></path><path d="M466.085986 878.635397s157.242371 52.323895 214.866326 29.629454c97.739844-38.524246 72.9178 61.2241-28.817391 54.310741-67.125087-4.563791-186.048935-83.940195-186.048935-83.940195z" fill="#FFE95F" ></path><path d="M396.81164 827.930213c7.514285 8.234314 185.307251 201.651363 295.915579 195.046588 25.038594-1.483368 45.129021-12.597796 59.702836-33.007634 61.326961-85.845835 42.070252-176.320426 4.59086-208.635101-21.660414-18.661197-48.133652-17.686722-69.068624 2.560704l-1.808192 1.737814c-52.074862 50.380358-97.063125 93.885254-274.850678 21.508829l-14.481781 20.7888z m309.190094-25.358005c11.211876-10.843741 22.672785-11.368875 34.063316-1.553746 29.201768 25.168524 42.887728 101.572779-8.759448 173.862584-9.934231 13.897096-23.057162 21.156935-40.121302 22.180134-98.29746 5.868505-273.426862-184.711739-275.18633-186.644448l-14.487195 20.783386c193.460359 78.76465 246.525937 27.442299 302.699008-26.89551l1.791951-1.7324z" fill="#6E6E96" ></path><path d="M756.322541 157.296509s199.696999-30.224967 316.975067 115.648529c87.995094 109.482268-175.275573 272.723074-171.924461 169.948442 2.880115-87.978853 106.95946-246.899486-145.050606-285.596971z" fill="#E8BF56" ></path><path d="M820.578341 153.777571s171.269398 14.357265 213.886438 138.489141c0 0 9.089686 24.724597-14.882399 75.971155-51.39273 109.909954-76.593736-71.672637-199.004039-214.460296z" fill="#FFE95F" ></path><path d="M758.271491 170.137924h-0.010827c1.927295-0.292343 193.855563-27.19868 304.918645 110.94398 27.788779 34.588449 12.121386 72.820352-5.917229 98.811767-35.882336 51.717555-107.051494 90.333834-133.9849 81.411973-2.820564-0.931165-9.403684-3.112906-8.916447-17.995305 0.552203-16.80428 5.278406-37.306152 10.280712-59.009876 12.251316-53.103475 26.126758-113.271893-7.627974-163.062152-26.689788-39.363377-78.613065-64.477763-158.709497-76.777804l-0.032483 25.677417zM888.396388 442.471208c-0.969061 29.835177 16.32787 40.056337 26.727684 43.499482 41.101191 13.604754 122.080064-31.600059 163.479011-91.259585 32.628672-47.029247 34.350244-93.159811 4.823652-129.89752-120.569628-149.977118-320.580625-121.636137-329.031489-120.347664l-0.032482 25.672003c72.576734 11.146911 118.756022 32.628672 141.163533 65.685029 27.404403 40.413644 14.871571 94.724385 3.822107 142.646901-5.310889 22.970542-10.318608 44.674266-10.952016 64.001354z" fill="#6E6E96" ></path><path d="M918.550976 252.437752C843.110369 116.937002 680.134836-45.697464 407.871931 64.613107c-46.179288 18.715334-89.067016 54.538118-113.483029 93.582084C218.341954 279.744708 22.109755 266.91412 32.298433 396.053715c4.098209 51.972001 118.063062 73.085626 129.431937 195.72872 18.32013 197.645188 293.046292 393.368495 656.065303 258.333326 0 0 179.346713-113.055343 220.610316-6.837566 41.236534 106.201535 97.550363 255.204179 207.487386-66.036924 96.13196-280.849113-4.617929-162.526191-117.142725-152.591959-112.530209 9.955886-106.585912 39.287584-159.386216-224.464906 0.016241 0.010828-8.391313-71.53188-50.813458-147.746654z" fill="#FFE95F" ></path><path d="M1284.341828 620.73517c-96.884471 337.455284-253.802017 266.502675-212.505932 205.489712 59.01529-87.193859 40.624781-136.772982 40.62478-136.772982-35.595407-26.955062-47.256624-46.130564-50.678114-64.705141-37.755493-13.81589-60.552795-65.528031-92.391059-224.556939 0 0-8.407554-71.548121-50.8297-147.757481C843.121196 116.937002 680.134836-45.702878 407.871931 64.613107c-46.179288 18.720748-89.067016 54.538118-113.483029 93.582084C218.341954 279.744708 22.109755 266.91412 32.303847 396.059128c4.092795 51.972001 118.057648 73.085626 129.431937 195.723307 18.325544 197.650602 293.051706 393.368495 656.065303 258.333326 0 0 179.346713-113.055343 220.610316-6.837566 41.236534 106.201535 97.550363 255.204179 207.487385-66.036924 25.937277-75.754605 37.522702-125.057627 38.44304-156.506101z" fill="#E8BF56" ></path><path d="M929.90361 246.12532c-55.599213-99.85662-218.217438-318.620847-526.909468-193.546979-47.808827 19.370398-93.641635 57.201683-119.616808 98.725146-31.724575 50.710597-85.862076 76.64246-138.207626 101.71895C77.194662 285.575317 12.982173 316.330831 19.354157 397.076913c2.051811 26.007655 23.317022 43.775583 47.933343 64.358661 33.473217 27.967433 75.12661 62.777846 81.504007 131.5433 8.505001 91.741409 69.848204 181.880348 164.101593 241.117601 138.278005 86.90693 323.953391 97.182228 509.433882 28.183983l1.250576-0.465583 1.142302-0.720029c1.050268-0.665891 107.067735-66.708228 167.83708-46.623215 15.997631 5.294648 27.030854 16.252078 33.727663 33.500285l0.801235 2.084294c24.719183 63.687356 52.746167 135.874299 99.472244 134.926893 43.142174-0.871614 83.723645-63.64946 131.608264-203.546175 46.958868-137.189841 45.464673-175.681604 27.837503-193.341257-17.578447-17.600102-45.708292-8.006936-81.325354 4.141519-23.522744 8.01235-50.180049 17.102037-77.064732 19.484086-11.455495 1.017785-21.736207 2.230465-30.793411 3.296974-69.550447 8.218073-69.550447 8.218073-114.609089-216.815277l-12.841415 14.974433h7.433079l3.762556-6.404466c1.142301-1.954364 4.63417-7.898661-8.153108-55.279802-6.951255-25.699072-19.960497-64.845898-42.508765-105.367818z m26.727684 156.61979l0.113689 0.56303c47.895447 239.201134 49.757777 248.534439 143.123311 237.506629 8.889378-1.03944 18.958953-2.235879 30.035485-3.215767 30.024658-2.652738 58.262778-12.294626 83.166029-20.777973 21.573794-7.357286 48.420581-16.506524 54.565187-10.356504 7.812041 7.812041 8.250555 43.066382-34.020006 166.575676-55.128217 161.042824-91.043035 185.648318-107.549559 185.983971-28.562945 0.56303-56.351725-70.995919-74.753061-118.360818l-0.795821-2.084294c-9.566096-24.60008-26.316239-41.009157-49.822742-48.767061-72.381839-23.901707-185.052805 46.320046-189.816905 49.308436l2.392877-1.185611c-177.836276 66.156026-355.169074 56.736101-486.555374-25.834416-87.453719-54.949563-144.292681-137.763698-152.055999-221.519826-7.3627-79.430541-55.534248-119.681773-90.707383-149.083849-20.956627-17.502654-37.511874-31.340199-38.702899-46.466217-4.731618-59.930213 39.152241-84.108021 111.133462-118.588196 53.103475-25.433798 113.288134-54.256603 149.013471-111.366253C328.61463 127.948569 369.748303 94.063908 412.744306 76.64246c289.489458-117.288895 442.222175 88.282023 494.454036 182.107725 40.841331 73.377969 49.173092 142.192146 49.259712 142.879692l3.210354-10.069575 9.696026-4.347241h-15.846046l3.112906 15.532049z" fill="#6E6E96" ></path><path d="M969.380675 400.195233s-8.407554-71.542707-50.829699-147.757481C843.110369 116.937002 680.134836-45.697464 407.871931 64.613107c-46.179288 18.715334-89.067016 54.538118-113.483029 93.582084C197.455707 313.131305-1.981433 220.171802 32.298433 396.053715c9.955886 51.094973 118.057648 73.09104 129.437351 195.72872 18.32013 197.645188 293.046292 393.368495 656.065303 258.333326 0 0 42.227251-22.938059 91.519445-38.037008 61.944128-39.195551 127.943156 13.864614 161.237719-27.788779 79.733711-96.148201 24.215704-150.502252 7.931144-155.764417-48.290651-5.245924-72.836594-47.132108-109.10872-228.330324z" fill="#FF99AD" ></path><path d="M982.276228 398.679383c-0.34648-3.0317-9.192548-74.99668-52.372618-152.564891-55.599213-99.85662-218.217438-318.620847-526.909468-193.546979-47.808827 19.370398-93.641635 57.201683-119.616808 98.725147-41.133673 65.749995-101.957155 84.064711-155.618246 100.230169C61.283651 271.54829-1.51585 290.463933 19.554465 398.538626c4.661239 23.928775 24.583839 40.776366 47.641001 60.282107 33.440734 28.292258 75.056231 63.497875 81.612282 134.163554 8.505001 91.735995 69.848204 181.874934 164.101593 241.112188 138.278005 86.90693 323.953391 97.182228 509.433882 28.183983l0.855373-0.330239 0.806649-0.4331c0.406031-0.221964 41.740013-22.510373 89.121153-37.030051l1.672849-0.514306 1.467126-0.936579c27.252818-17.248208 55.761626-14.070336 83.328442-10.995326 29.526593 3.275319 60.060143 6.66974 81.10339-19.651913 47.933343-57.808023 48.859094-101.572779 41.166155-128.083913-8.261383-28.460084-28.535877-44.647197-39.363377-48.155307l-1.277645-0.411445-1.326368-0.146171c-38.269799-4.146933-61.467718-36.602364-97.783154-217.957578l0.162412 1.044853z m92.217819 242.18411c3.313215 1.098991 16.820521 11.168566 22.47789 30.858376 5.873919 20.447734 4.336414 55.155286-36.42371 104.279654-11.688286 14.622539-28.811978 13.491065-58.089539 10.242815-29.0177-3.237423-65.132827-7.249011-100.083997 14.871571l3.139975-1.456299c-49.963499 15.304671-92.142026 38.080318-93.912323 39.038552l1.672849-0.757925c-177.836276 66.156026-355.169074 56.736101-486.555375-25.834415-87.453719-54.949563-144.298095-137.763698-152.055998-221.519826-7.53594-81.249561-55.604627-121.906824-90.696555-151.59583-19.321674-16.338698-36.001438-30.452344-38.91945-45.415949C28.476325 308.551272 68.662592 296.456954 135.246304 276.39901c55.171527-16.614799 123.839533-37.300738 170.159579-111.322943 23.219574-37.122084 64.353247-71.006746 107.349251-88.428193 289.489458-117.288895 442.222175 88.282023 494.454036 182.107725 40.559816 72.863662 49.194747 142.273352 49.28678 142.966312l0.059552 0.508892 0.113688 0.525134c36.239643 181.052044 62.13361 232.35274 120.439698 238.676l-2.614841-0.568444z" fill="#6E6E96" ></path><path d="M344.568951 310.105018c-13.436928 13.534375-31.020788 14.16237-39.271343 1.402162-8.250555-12.743968-4.044071-34.068729 9.409098-47.613932 13.447755-13.534375 31.026202-14.173198 39.276757-1.402162 8.250555 12.754795 4.038658 34.074143-9.414512 47.613932z" fill="#6E6E96" ></path><path d="M620.545689 608.575888c-2.869288 8.385899-12.565314 12.803519-21.655 9.847611-9.0951-2.939666-14.135301-12.132214-11.255187-20.523526 2.863874-8.375071 12.565314-12.798105 21.655001-9.842198 9.084273 2.939666 14.129888 12.137628 11.255186 20.518113zM536.85994 598.322245c-3.535179 10.318608-15.467084 15.743185-26.651891 12.115973-11.195635-3.610971-17.399793-14.931123-13.870028-25.238903 3.529765-10.324021 15.472498-15.754013 26.657305-12.1268 11.190221 3.616385 17.388965 14.936536 13.864614 25.24973z" fill="#E3AA00" ></path><path d="M407.866517 64.607693a235.048787 235.048787 0 0 0-22.69444 10.740881c125.945482 69.615412 194.873348 173.575655 124.489183 379.179055-46.958868 137.200668-172.141011 205.381437-328.219426 213.258443 37.787976 88.384884 125.479899 167.279464 246.612557 204.455686 103.6679-98.476114 184.473534-225.103728 233.543765-368.459831 51.86914-151.536278 126.205342-381.523209 35.936473-454.906591-77.936346-28.703703-173.922135-31.161545-289.668112 15.732357z m597.510183 481.038764c-11.585425-33.852179-23.057162-80.729841-36.006852-145.451224 0 0-8.396726-71.542707-50.824286-147.757481-24.248187-43.553619-57.569818-89.906148-100.630786-129.107111 106.331465 86.425106 62.225643 322.68116 1.808192 499.196481-35.075687 102.476875-88.325333 192.669952-153.079197 266.340262 48.209444-6.702223 98.768456-19.267537 151.157316-38.746209 0 0 42.227251-22.938059 91.519445-38.037008 0.682133-0.443928 1.364265-0.790408 2.03557-1.207266a954.471208 954.471208 0 0 0 94.020598-265.230444z" fill="#FFE95F" ></path><path d="M1097.562036 734.86785s-46.915558-104.669444-230.983061-28.876943a316.48783 316.48783 0 0 1-38.470108 12.873897c72.306046-142.771417 68.668006-359.862795 63.405841-449.942183 5.993021 195.441792-101.432021 458.084463-101.448263 458.116946-125.447417 20.512699-279.923362-11.872354-376.25563-68.234906 0.032483-0.032483 167.263222-134.526276 133.627593-400.503817 0 0-6.27995 266.551399-172.915178 373.456722-24.941147-20.436907-42.395077-42.936452-49.308435-66.513334-28.254362-96.343096-75.792501-185.004081-151.049041-185.004081-105.199992 29.808108-129.789244-43.261277-129.789245-43.261277-4.877789 0.90951-9.576924 1.829848-14.238162 2.750185-2.761013 14.969019-2.306258 33.332459 2.176327 56.335483 9.955886 51.094973 118.057648 73.09104 129.437351 195.72872 18.32013 197.645188 293.046292 393.368495 656.065303 258.333327 0 0 42.227251-22.938059 91.519445-38.037008 61.944128-39.195551 127.943156 13.864614 161.237719-27.78878 13.306998-16.051769 22.78106-30.907099 29.36418-44.587645-1.461713-3.123734-2.376636-4.845306-2.376636-4.845306zM374.52323 631.762979l39.249689 27.014613c-14.514264-8.494174-27.67509-17.535137-39.249689-27.014613z m415.548629 95.271174l37.143739-7.952799a388.869668 388.869668 0 0 1-37.143739 7.952799z m-38.746209-526.368093c0 126.432719-145.521602 457.510605-145.521602 457.510606l37.490219 13.128344c106.867427-173.489035 108.031383-470.638949 108.031383-470.63895z m140.178231 68.256561a429.256244 429.256244 0 0 0-2.98839-39.666546c0.465583 4.715376 1.764883 18.774885 2.98839 39.666546z m-2.98839-39.67196l-0.178654-1.770296c0.075793 0.579271 0.108275 1.191025 0.178654 1.770296z" fill="#6E6E96" opacity=".15" ></path><path d="M402.977901 52.578341a247.863134 247.863134 0 0 0-23.955844 11.341806l-20.983696 11.276842 20.853766 11.525874c67.655635 37.398186 109.000444 79.354749 130.087 132.057605 24.545943 61.299892 20.750904 137.04367-11.60708 231.551505-42.340939 123.698776-154.773701 196.318819-316.590691 204.482754l-18.612472 0.936579 7.324803 17.134519c41.166156 96.283545 136.399433 175.448813 254.738597 211.764248l7.259839 2.225051 5.50037-5.224269c105.654747-100.360099 187.564785-229.575486 236.878634-373.667858 46.330873-135.359993 132.571912-387.310508 31.838265-469.193478l-1.678263-1.358851-2.024742-0.747097C611.715863 3.426904 511.106731 8.764861 402.977901 52.578341z m286.349483 6.371984c86.674139 70.454544 1.098991 320.466936-40.029268 440.625119-47.960412 140.151162-127.558779 265.760991-230.198067 363.251802l12.749381-2.993803c-111.122634-34.106625-200.287098-107.809419-238.481105-197.147123l-11.287669 18.071097c173.142555-8.737793 293.836699-87.583649 339.853575-222.01789 64.217903-187.613509 23.977499-309.368748-130.493032-394.749001l-0.124516 22.802715a222.364371 222.364371 0 0 1 21.433037-10.150781c101.930086-41.296086 196.226785-46.547423 280.275255-15.580773l-3.697591-2.111362zM1017.665912 541.445387c-11.146911-32.585362-22.445408-78.277412-35.55751-143.80003l0.162412 1.034026c-0.351894-3.0317-9.187134-74.99668-52.372618-152.564891-28.373464-50.965043-64.071732-96.749128-103.2348-132.398672l-16.928797 19.684396c118.810159 96.581301 28.292258 395.577305-2.290016 484.909594-33.26208 97.1714-85.320701 187.770508-150.55639 261.982194l-23.067989 26.245861 34.610105-4.807411c50.743079-7.05953 102.525599-20.328632 153.907501-39.444583l0.860786-0.330238 0.801235-0.427687c0.400618-0.221964 41.740013-22.515787 89.121154-37.035464l1.716158-0.530547 1.510437-0.979889c0.097448-0.070379 0.362721-0.211136 0.573857-0.341066a27.555988 27.555988 0 0 0 1.185611-0.687547l3.037114-1.856916 1.678263-3.134561a970.533804 970.533804 0 0 0 61.121238-140.995707 969.526847 969.526847 0 0 0 34.177004-127.845708l0.660478-3.405249-1.115233-3.269905z m-58.29526 126.129549a945.414004 945.414004 0 0 1-59.475459 137.211496l4.709963-4.991478c-0.119103 0.075793-0.319411 0.178654-0.51972 0.30317a39.774822 39.774822 0 0 0-1.808193 1.071923l3.237423-1.499609c-49.963499 15.304671-92.142026 38.080318-93.912323 39.038552l1.672849-0.757925c-49.611606 18.460888-99.548036 31.264407-148.417959 38.053249l11.547529 21.43845c67.449912-76.739907 121.257174-170.34906 155.607419-270.709159 40.949606-119.665532 122.366993-409.219955-5.895574-513.483367l-16.93421 19.684395c37.105843 33.770973 71.001332 77.281282 98.015945 125.815552 40.700573 73.128936 49.183919 142.267938 49.27054 142.955485l0.070378 0.51972 0.108275 0.525133c13.344894 66.659505 24.924905 113.407237 36.445366 147.107831l-0.460169-6.691395a943.990188 943.990188 0 0 1-33.26208 124.407977z" fill="#6E6E96" ></path><path d="M712.092203 831.741493c-38.746209 45.139848-106.2665 52.713685-167.474359 2.972149-61.213272-49.757777-40.716814-172.200563-40.716814-172.200562 38.746209-45.145262 99.234039-17.475585 160.447311 32.282191 61.2241 49.763191 86.490071 91.811788 47.743862 136.946222z" fill="#FFE95F" ></path><path d="M19.516569 347.725168c10.52433 24.29691 49.963499 66.865227 123.942394 54.002157a13.539789 13.539789 0 0 0-4.639583-26.668133c-71.678051 12.467866-94.237148-37.576839-94.453698-38.085732a13.534375 13.534375 0 0 0-24.849113 10.751708z" fill="#6E6E96" ></path><path d="M671.56487 687.578743c-24.448495-19.873877-48.772474-36.201747-71.650982-45.794912 14.129888 7.682111 28.736185 17.838307 43.391206 29.515765 50.645632 40.354093 71.553535 74.466132 39.504135 111.079324-32.060228 36.607778-87.919301 42.746971-138.55952 2.398291-27.707573-22.082687-35.167721-61.792543-36.25047-93.251845-1.239749 40.153784 3.930383 103.505488 43.856789 135.96092 61.213272 49.741536 128.717322 42.167699 167.474359-2.972149 38.724554-45.123607 13.458583-87.172204-47.765517-136.935394z" fill="#E8BF56" ></path><path d="M325.198554 565.233405s249.368156-122.675577 183.780573-346.463764c0 0 88.89919 248.512784-154.811597 394.034385l-28.968976-47.570621z" fill="#6E6E96" opacity=".15" ></path><path d="M702.244592 823.285216c-37.143739 43.266691-97.198469 43.802652-149.43033 1.353437-54.711358-44.479371-36.299194-158.834014-36.104299-159.976315l-2.955908 6.307019c10.242815-11.915664 41.393533-48.209444 142.403282 33.906317 39.807304 32.368812 59.258908 57.667266 61.234927 79.652505 1.163956 12.852243-3.800453 25.531245-15.147672 38.757037z m-29.699833-138.55952c-80.053122-65.07869-134.910652-85.78087-173.299554-41.05788l-7.552182 13.133757-0.595512 3.573075c-0.893269 5.300061-20.972868 130.503859 45.340157 184.403156 62.967327 51.187007 139.257893 49.297608 185.518388-4.580033 15.927253-18.569163 23.105885-38.074904 21.319347-58.008332-2.690634-29.824349-24.502633-59.886903-70.730644-97.463743z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-chickenanimal" viewBox="0 0 1024 1024"><path d="M481.403358 114.169918c32.120616 3.207202 95.345423 27.933435 32.238051 60.738415-26.633546 13.841183-17.728701 61.228405-21.300358 71.858336 0 0-54.530536-46.771698-148.924327-47.686884-71.429089-0.704613-114.621032-39.595988-100.338453-82.091417C257.360849 74.492939 403.333092-36.742712 396.465144 31.961065 388.143426 115.060807 450.072394 111.035606 481.403358 114.169918z" fill="#FF87CF" ></path><path d="M499.176603 185.971561c7.264799-17.291355 46.739302-23.956828 31.229726-39.462355-4.158834-3.041173-33.950989-19.320153-70.817615-14.485053-12.881452 5.551861 70.817615 14.485053 3.697191 51.663491-16.481456 23.30081-57.620302 1.085265-112.810906-29.047047-149.867859-13.525322-10.233081-127.980325-10.16019-128.061314-33.930741 24.317234-90.793787 71.230664-97.240588 90.405036-14.282578 42.495429 28.913413 81.386804 100.338454 82.087367 94.393791 0.927335 148.924326 47.686885 148.924326 47.686884-5.604505-14.472905-2.271768-39.126247 6.839602-60.787009z" fill="#6E6E96" opacity=".15" ></path><path d="M383.450058 20.436195s-1.000226 2.320362-2.441847 6.333414c-8.981786 24.981351-25.098787 105.088514 64.597587 105.088514 104.104486 0 91.113698 24.296986 91.113698 24.296987s6.074247-42.519726-105.28694-42.519726c0 0-34.42073-32.865723-34.42073-70.866209" fill="#FFFFFF" opacity=".25" ></path><path d="M480.395033 124.245068c22.660989 2.263669 48.37125 13.70755 50.015345 22.264138 0.664118 3.462321-4.547586 10.63803-21.44209 19.417341-24.953005 12.970541-25.39035 46.063036-25.645469 65.836734-0.056693 4.308666-0.133633 10.212833-0.595276 11.828582l16.20204-4.51114c-2.34061-2.000452-58.4464-49.185199-155.415671-50.128732-38.976415-0.384702-70.926952-12.812611-85.464648-33.246376-7.689996-10.808109-9.548716-23.074038-5.377733-35.493847 11.241406-33.444801 105.355781-105.250494 130.778527-99.779623 1.170305 0.251069 3.907765 0.842296 2.939936 10.520595-2.89944 28.978205 2.138135 51.416472 14.98719 66.687128 18.635788 22.158851 48.278111 24.301036 69.922677 25.87629 3.263895 0.230821 6.345563 0.453544 9.095172 0.72891zM406.540294 32.96939c2.49854-24.981351-12.33477-30.930063-18.830164-32.32714C346.518639-8.2221 245.840028 76.995529 233.480961 113.764968c-6.232177 18.54265-3.365133 37.603635 8.070649 53.680141 18.283482 25.702162 56.328513 41.308926 101.763877 41.75842 89.668027 0.878741 141.914646 44.803642 142.432982 45.257186l11.403385 9.783586 4.782457-14.250182c1.44972-4.308666 1.526661-10.038705 1.631947-17.963572 0.214623-16.234436 0.534534-40.754145 14.744221-48.144477 24.070214-12.512948 34.837828-26.378428 31.978883-41.203639-5.086169-26.475616-51.890263-36.992161-67.889828-38.591713a361.458162 361.458162 0 0 0-9.645904-0.773454c-19.048837-1.376829-42.758646-3.097866-55.891166-18.70463-9.184261-10.933644-12.662779-28.305989-10.32217-51.643244z" fill="#6E6E96" ></path><path d="M358.853409 850.498179s72.490058 52.777103 72.490058 130.175152c0 28.901265 0 0 0 0h34.26685s23.964927-111.498869 44.564721-111.276147c0 0.008099-91.636083-18.899006-151.321629-18.899005z" fill="#FFBF00" ></path><path d="M352.892549 858.682214l-0.008099-0.008099c0.680316 0.498088 68.335273 50.821196 68.335273 121.995167v12.845006h20.247488v-12.845006l-10.123744 10.123744h42.446835l1.721036-8.005857c11.038931-51.327383 27.564931-98.7551 36.089124-103.565903a3.454222 3.454222 0 0 1-1.53476 0.295613l2.158382-20.036914c-3.782231-0.773454-93.336872-19.117679-153.366625-19.117679h-31.104192l25.139282 18.319928z m157.403974 0.599325c-14.5134-0.16198-26.054468 18.000017-39.802512 62.690274-8.597084 27.933435-14.529598 55.417376-14.780667 56.571482l9.896973-7.997758H421.219723V993.514288h20.247488v-12.845006c0-81.605477-73.52268-136.07932-76.652941-138.359188l-5.960861 18.307779c57.948312 0 148.373595 18.510254 149.272584 18.696531l2.17053-20.032865z" fill="#6E6E96" ></path><path d="M543.935701 998.329141c0 27.289565-40.55167 10.362665-90.562966 10.362664-50.019395 0-90.571065 13.739946-90.571065-10.362664 0-11.52487 40.55167-20.850864 90.571065-20.850864 50.015346-0.012148 90.562966 9.325993 90.562966 20.850864z" fill="#FFBF00" ></path><path d="M533.811956 998.329141c0 1.830373-0.287514 3.178856-0.773454 3.6243-3.725538 3.320588-21.296308 1.356582-35.416906-0.24297-13.160867-1.465918-28.071118-3.14241-44.248861-3.14241-15.339497 0-29.626125 1.239146-42.236261 2.328461-15.185616 1.312037-34.084622 2.952084-37.838506-0.48189-0.218673-0.210574-0.372554-1.065018-0.372554-2.085491 0 1.364681-0.534534 2.300115-0.720811 2.522837 3.778181-4.470645 32.310942-13.249956 81.164082-13.249956 48.84909 0 77.377802 8.78336 81.160033 13.249956a4.389655 4.389655 0 0 1-0.716762-2.522837z m-80.439221-30.986756c-16.813514 0-100.694809 1.490215-100.69481 30.974607 0 8.791459 3.770082 14.096301 6.93274 16.995742 10.31812 9.463676 28.334335 7.89652 53.275192 5.738138 12.197087-1.060968 26.022072-2.25962 40.486878-2.259619 15.039834 0 29.358858 1.603601 41.989241 3.020925 23.624769 2.652421 40.693402 4.575932 51.169453-4.798655 4.99708-4.466596 7.528016-10.759515 7.528016-18.708679 0-29.464145-83.873196-30.962459-100.68671-30.962459z" fill="#6E6E96" ></path><path d="M698.573868 612.201439c-16.497654 175.930426-149.1349 307.38117-296.285547 293.588581-147.130399-13.78449-302.890278-179.753152-236.555456-343.531036 49.25404-121.606415 24.313184-176.266535 34.222305-244.638254 12.81666-88.441029 50.157078-138.298445 133.228474-131.466942 197.542596 16.242535 381.879779 250.113174 365.390224 426.047651z" fill="#FFD9DB" ></path><path d="M557.756636 744.109776c-15.756595 2.753658-30.521064 26.086864-30.521064 26.086864s182.612098 96.248461 352.877277-92.377141c0 0 104.614723-129.810697-39.126246-135.577182-132.511712-5.32104-97.718428 169.45528-283.229967 201.867459z" fill="#C5C5E8" ></path><path d="M556.019402 734.139913c-19.607668 3.429925-35.574837 27.884841-37.340418 30.650647l-5.851525 9.261202 9.698547 5.110466c1.943759 1.028572 48.626368 25.224321 117.228909 25.718359 63.151916 0.445445 157.408024-20.036914 247.873802-120.261981l0.198425-0.210574 0.178178-0.230822c2.251521-2.786054 54.745159-68.724025 34.169661-114.029805-10.674476-23.503285-37.846605-36.287549-80.763181-38.016684-68.861708-2.769856-96.742499 39.733671-126.259288 84.719541-31.100142 47.379123-66.326722 101.075462-159.13311 117.289651z m284.558201-181.773852c34.643453 1.393027 55.883068 10.192586 63.135718 26.127359 12.82071 28.200702-18.38067 76.689387-31.484844 92.988615l0.372554-0.425197c-163.097568 180.676438-338.886262 91.129896-340.631596 90.194462l3.826775 14.371667c5.167159-8.123292 15.946922-20.170548 23.70576-21.52713 101.448016-17.724651 140.877975-77.831345 172.561244-126.125654 28.557058-43.5321 51.104661-77.912335 108.514389-75.604122z" fill="#6E6E96" ></path><path d="M585.349913 744.628112c-12.731621 4.134537-22.219594 25.224321-22.219593 25.224321s162.668322 58.272272 281.58182-118.095501c0 0 71.42099-119.881329-48.387447-107.740935-110.450049 11.156366-61.046177 151.916905-210.97478 200.612115z" fill="#6E6E96" opacity=".15" ></path><path d="M214.824926 258.020224c-6.766711 17.186068-11.613959 37.146042-14.865706 59.604556-6.454899 44.548524 1.866818 83.290068-5.16311 138.509018 29.66257-91.603687 14.655132-141.602835 20.028816-198.113574zM418.486312 834.923811c-26.961556-5.960861-47.824568-13.14062-57.948312-26.819823-143.056604-193.23393 81.131686 93.774218-136.771784-84.112117-37.340418-46.585421-63.350342-90.12562-37.328269-193.258227-0.255118 0.631722-20.445914 30.87742-20.705082 31.517241-66.334821 163.781933 89.425057 329.746546 236.555456 343.531036 143.319822 13.420035 272.834906-110.940038 294.718392-279.994418-43.827713 131.547932-156.120284 220.608534-278.520401 209.136308z" fill="#EDB4B8" ></path><path d="M663.821079 682.861124s151.605094-123.914629 77.381851-260.609473c-74.202995-136.715091 228.881658-54.631773 106.720462 127.012495-91.684677 136.366834-191.610081 190.662499-219.170963 182.482513l35.06865-48.885535z" fill="#C5C5E8" ></path><path d="M331.539548 183.371783c-83.071395-6.835552-120.411813 43.025913-133.228474 131.466942-4.377507 30.197104-1.959957 57.729639-2.134085 89.518196a219.037329 219.037329 0 0 1 0.927335-7.200007c12.950294-88.242604 50.687562-172.925699 134.629599-166.106345 49.505109 4.021151 112.025304 110.753761 155.9907 134.176056 19.66841 10.47605-33.821405-114.098646 45.042563-35.238729 82.966108 76.519308 145.5106 185.240222 163.773834 282.804769 0.113386-1.12576 0.279415-2.243422 0.388752-3.377281 16.489555-175.934476-167.851679-409.805115-365.390224-426.043601zM164.088769 559.476979c-15.967169 39.42186-19.036689 78.965205-12.484601 116.495949a213.999754 213.999754 0 0 1 10.917446-34.724443c38.680802-94.288504 32.08417-148.239961 31.91814-199.619987-3.016876 32.136814-10.868852 69.744498-30.350985 117.848481z" fill="#FFF5F5" opacity=".5" ></path><path d="M670.227385 690.700951c1.583354-1.29179 157.19745-130.847369 79.876341-273.280351-7.309343-13.452431-17.566721-37.579338-4.179081-47.921755 15.87808-12.257829 58.422103-3.964458 89.48175 25.114985 19.251312 18.024314 58.183183 68.622788 4.134537 148.997217-88.797385 132.070317-185.969131 184.940559-207.893112 178.437066l5.345337 15.606764 35.060551-48.885536-1.826323 1.93161z m-44.354148 50.760453c36.566964 10.844555 141.930844-54.878792 230.448813-186.548209 43.524001-64.706923 40.87563-130.167053-7.09067-175.067883-36.708696-34.376186-89.692324-46.455837-115.690099-26.36628-10.836456 8.370312-25.398449 29.071344-1.235097 73.611769 69.299054 127.644216-73.449789 246.76019-74.89141 247.946693l1.384928-0.947582-1.919462 1.097413-1.283691 1.793928-35.068649 48.885536-8.289322 11.557266 13.634659 4.037349z" fill="#6E6E96" ></path><path d="M682.829421 618.214943s116.127445-107.202352 49.691386-213.732488c-66.436059-106.554432 181.753604-55.14201 92.158468 97.139351-67.237859 114.329468-145.125898 162.931539-167.722094 157.695538l25.87224-41.102401z" fill="#6E6E96" opacity=".15" ></path><path d="M177.743675 631.027553s-13.577966-53.716587 26.917011-53.716586 86.772636-98.439239 42.519726-190.326391c0 0-115.459278 139.825105-69.436737 244.042977z" fill="#EDB4B8" ></path><path d="M688.48657 611.257906c-15.946922 170.09915-143.915098 297.71502-285.254716 284.452914-79.524035-7.451076-163.32434-62.410858-208.528882-136.755586-37.818259-62.200284-44.775296-130.701587-19.587421-192.893772 34.384285-84.901768 33.420504-138.104069 32.57011-185.033697-0.380653-21.105982-0.745108-41.053807 2.283917-61.945166 13.160867-90.834282 50.906235-128.709234 122.379869-122.829364 89.186137 7.33364 182.130207 61.386335 255.000918 148.320952 71.044387 84.735739 108.854547 184.434372 101.136205 266.683719zM334.013791 176.06649c-82.30604-6.77076-129.434094 39.057405-144.077078 140.10452-3.263895 22.527356-2.887292 43.272932-2.490441 65.213111 0.813949 45.002068 1.741284 96.005491-31.096093 177.076434-27.645921 68.262382-20.170548 143.198337 21.053339 210.999076 49.120407 80.795578 137.022853 138.270098 223.94127 146.409589 152.455488 14.282578 290.316587-121.517326 307.30828-302.732347 8.196183-87.509645-31.343112-192.780386-105.785028-281.585871-76.320883-91.036757-174.314677-147.713527-268.854249-155.484512z" fill="#6E6E96" ></path><path d="M244.973436 457.640211c0 43.515902-11.889325 78.791076-36.085074 78.791077-24.199798 0-59.677447-21.595971-59.677447-65.107824 0-43.515902 47.07946-92.46623 71.283307-92.46623 24.195749-0.004049 24.479213 35.271125 24.479214 78.782977z" fill="#FF87CF" ></path><path d="M234.849692 457.640211c0 40.422086-10.674476 68.667332-25.96133 68.667332-17.279207 0-49.553703-16.129149-49.553703-54.984079 0-38.389238 43.414665-82.342486 61.159563-82.342486 3.288192 0 4.810803 1.081216 5.871772 2.142185 8.483698 8.483698 8.483698 39.312523 8.483698 66.517048z m-14.35547-88.906721c-31.407904 0-81.407052 56.016701-81.407051 102.589974 0 49.088011 40.535472 75.231568 69.801191 75.231568 28.504414 0 46.208818-34.072473 46.208818-88.914821 0-35.639629 0-66.42391-14.416212-80.836072-5.357485-5.357485-12.148493-8.070649-20.186746-8.070649z" fill="#6E6E96" ></path><path d="M684.837972 603.292544s79.734609-218.54329-79.009749-313.1922c-158.744358-94.657008 200.689055-194.643155 186.070369 65.018735-10.953891 194.954967-80.119311 311.037867-113.228005 319.400079l6.167385-71.226614z" fill="#C5C5E8" ></path><path d="M694.350242 606.758914c0.838246-2.296065 20.543102-57.093868 20.644339-124.562549 0.117435-90.724946-35.834005-160.169782-103.974902-200.798391-16.149397-9.629705-42.070231-28.767631-34.153463-48.751903 9.054677-22.859414 58.567885-40.843234 108.83025-29.780006 31.075845 6.835552 102.646667 35.315669 96.09458 151.673936-11.196861 199.1219-80.965657 303.926949-105.602801 310.155076l12.569641 10.690674 6.159286-71.226615-0.56693 2.599778z m-13.193263 77.576227c43.366071-10.96604 110.324515-141.303172 120.853208-328.641034 5.146912-91.506499-36.696548-156.014997-111.952412-172.585541-56.51074-12.440057-118.196738 7.228353-132.017674 42.094528-5.770534 14.566043-7.90057 43.483506 42.604765 73.60367 149.811166 89.331919 75.450241 298.91772 74.676787 301.035608l-0.453544 1.259393-0.113386 1.336335-6.159286 71.226614-1.235097 14.177292 13.796639-3.506865z" fill="#6E6E96" ></path><path d="M309.67631 627.565233s36.996211 161.757185 182.733582 213.189854l47.107807-27.654019-229.841389-185.535835z" fill="#EDB4B8" ></path><path d="M251.683453 321.909148c11.909573 26.840071 7.216205 56.397354-23.312958 68.833362-30.533212 12.452205-125.583022 3.851072-136.593606-11.711147 0 0 4.122389-40.292502 83.160485-81.467795 29.290017-15.254458 64.840557-2.49854 76.746079 24.34558z" fill="#FFBF00" ></path><path d="M636.025327 488.404245c90.635857 79.556431 144.498226 235.121934 87.355764 300.221659-57.150561 65.107824-255.288432 11.658504-345.932388-67.885779-90.639906-79.556431-70.752823-197.692427-9.010133-258.475387 88.02798-86.630904 176.958999-53.408825 267.586757 26.139507z" fill="#EDB4B8" ></path><path d="M629.347706 496.013251c90.842381 79.72651 136.07527 229.383796 86.428428 285.930982-52.145382 59.406131-242.184258 9.690448-331.637661-68.813114-46.459887-40.778442-57.296343-87.234279-58.20748-119.022836-1.320136-46.148075 17.230613-92.741596 49.622545-124.63139 72.882859-71.732802 151.15155-63.548767 253.794168 26.536358z m-267.999806-40.964718c-36.328044 35.765163-57.134363 87.975337-55.660346 139.638828 1.024523 35.813757 13.148719 88.072525 65.091626 133.66177 89.024157 78.126959 296.50422 139.529492 360.214967 66.954394 63.2815-72.105356 4.345111-233.202472-88.291198-314.508286-69.784993-61.248652-174.869458-130.551756-281.355049-25.746706z" fill="#6E6E96" ></path><path d="M600.138679 480.997714c72.461711 63.597361 115.515971 187.961484 69.837637 240.017777-41.227936 10.739268-86.651151-54.583179-102.213371-59.272498 15.56222 15.570319 44.653811 83.958235 16.902603 81.978031-64.472052-4.608328-145.194739-36.583162-191.233478-76.985-72.461711-63.60141-56.563384-158.043795-7.204056-206.637768 70.364072-69.258559 141.461102-42.697903 213.910665 20.899458z" fill="#FFD9DB" ></path><path d="M336.755301 296.356818m-38.555268 0a38.555267 38.555267 0 1 0 77.110535 0 38.555267 38.555267 0 1 0-77.110535 0Z" fill="#EDB4B8" opacity=".43" ></path><path d="M769.124217 244.312674c31.654923 50.695661 37.955942 218.328667-32.371685 352.549267-17.777295 33.910494 58.211529-186.236398-33.829503-317.176905-34.052226-48.444141-109.96006-43.155497-79.609075-66.484653 30.359084-23.345354 114.139141-19.571222 145.810263 31.112291z" fill="#6E6E96" opacity=".15" ></path><path d="M337.617844 297.219361m-17.546474 0a17.546473 17.546473 0 1 0 35.092947 0 17.546473 17.546473 0 1 0-35.092947 0Z" fill="#6E6E96" ></path><path d="M99.924479 373.034056s142.501823-15.606764 142.501823-47.010618-85.505143-58.300618-142.501823 47.010618z" fill="#FFF59F" opacity=".51" ></path><path d="M242.430351 326.015339c5.827227 13.128471 6.77076 25.989676 2.66052 36.19441-3.450172 8.556589-10.358615 14.999339-20.539052 19.150075-28.735235 11.719246-115.220357 1.793927-124.623291-8.341966l0.113386 0.149832 1.806076 6.876047c0.028346-0.174128 5.831277-36.044579 77.770603-73.51863a47.929854 47.929854 0 0 1 37.826358-2.709114c11.395286 4.000904 20.498557 12.087751 24.9854 22.199346z m-72.170147-37.429507C87.33864 331.785873 81.896115 376.135972 81.705789 378.00279l-0.388752 3.778181 2.194828 3.110015c16.108902 22.758177 118.464005 27.556832 148.681356 15.23421 15.226111-6.20788 26.180002-16.696079 31.675171-30.330738 6.179533-15.339497 5.138813-33.797108-2.931836-51.983401-6.742414-15.193715-20.15435-27.24907-36.805885-33.080347a68.20164 68.20164 0 0 0-53.870467 3.855122z" fill="#6E6E96" ></path><path d="M191.750888 406.478858s-28.597553 52.384302-5.312941 75.668913 53.404775-26.479665 45.755274-82.030674c0 0 30.504866 140.468975-29.277868 140.468975-39.697226 0-83.281969-97.414716-11.164465-134.107214z" fill="#6E6E96" opacity=".15" ></path></symbol><symbol id="icon-a-turtletortoiseanimal" viewBox="0 0 1375 1024"><path d="M349.94658 606.222728s16.99202 201.447758 169.89272 262.123337c152.9007 60.675579 267.717734-184.455738 126.203666-184.455738-160.055813 0-208.525934-53.201728-213.57628-111.629657-5.050345-58.460901-82.520106-45.843282-82.520106 33.962058z" fill="#B3D492" ></path><path d="M349.94658 606.222728s16.99202 201.447758 169.89272 262.123337c144.157394 57.207932 254.418676-157.396002 147.960265-182.125656 33.269627 33.275123 37.413218 85.405233-93.12638 114.371901-130.528607 28.955677-224.726605-194.369582-224.726605-194.369582" fill="#E3D0BC" ></path><path d="M337.081665 607.299842c0.719908 8.561956 19.481472 210.147101 177.993055 273.048348 52.152092 20.695972 107.304715 10.457896 151.318003-28.087391 41.479872-36.319618 64.374036-91.499718 54.432715-131.204551-6.13845-24.482357-23.927314-41.325999-50.102278-47.398503a12.897888 12.897888 0 0 0-12.046089 21.701645c7.512319 7.506824 19.443003 22.443534 14.903738 38.028712-3.73143 12.793474-21.899482 36.902139-101.693831 54.608571-118.499004 26.290369-209.141428-184.653576-210.042687-186.785822 0.236306 0.560539 0.428647 1.121078 0.582521 1.698103l-0.577025-1.692607a12.914375 12.914375 0 0 0-23.795423 10.034744c4.017195 9.523664 99.984737 232.887391 239.421515 201.958837 70.754287-15.695087 111.431819-40.138976 120.889538-72.600767 6.116468-21.003719-1.489275-43.562659-21.426871-63.50575a12.914375 12.914375 0 0 1-12.05708 21.701644c16.733732 3.885303 27.131178 13.480409 30.901076 28.516039 7.600247 30.340537-12.34834 75.689226-46.39283 105.507693-21.432366 18.772555-66.138085 46.788505-124.780336 23.515153-143.525414-56.949644-161.62752-249.280404-161.792385-251.225803v0.010991a12.914375 12.914375 0 1 0-25.735326 2.170714z" fill="#6E6E96" ></path><path d="M1213.264282 493.158752c0 188.357528-65.484123 351.485314-495.763608 351.485314-239.383047 0-371.065704-174.530904-371.065705-233.255588 0-90.900711-10.023753-76.282738-10.023753-165.06769 0-188.352033 76.859763-283.489758 353.035039-283.489758 276.164285 0.005495 523.818027 141.981184 523.818027 330.327722z" fill="#E3D0BC" ></path><path d="M1200.355403 493.158752c0 75.123192-9.3588 169.942179-82.33326 236.866117-74.650581 68.446186-205.66279 101.715813-400.515974 101.715813-231.139829 0-358.15133-165.496337-358.15133-220.352204 0-46.585172-2.632334-66.291958-5.171245-85.37226-2.500443-18.723096-4.852508-36.418537-4.852508-79.684439 0-167.051558 56.900185-270.580879 340.120665-270.580879 281.714718-0.005495 510.903652 142.38785 510.903652 317.407852z m-510.909148-343.231106c-263.337838 0-365.943918 83.102627-365.943918 296.404133 0 44.985988 2.582875 64.35755 5.077822 83.102627 2.538911 19.085797 4.940435 37.105471 4.940436 81.959567 0 63.27494 132.023377 246.169963 383.985574 246.169963 201.612622 0 338.329138-35.495296 417.964118-108.497234 80.404347-73.727341 90.71936-175.487117 90.719361-255.896959-0.010991-189.269778-240.789889-343.242096-536.743393-343.242097z" fill="#6E6E96" ></path><path d="M1164.354523 262.95865c-12.584646-52.553262-81.102273-108.255432-173.514241-135.485529a398.323278 398.323278 0 0 0-26.768476-6.869348c-45.348689-41.837078-122.747009-69.407894-210.663675-69.407895-74.996796 0-142.354877 20.085974-188.676266 51.95975a333.23483 333.23483 0 0 0-64.308091 12.10654c-88.922339 25.883704-154.829613 83.591725-172.448117 143.558386C227.512813 352.567923 204.085588 454.085899 303.72411 454.085899c56.416583 0 91.955843-11.578973 131.688153 0 149.856205 43.689055 208.014855 192.644001 475.611688 192.644001 106.249583 0 316.297765-40.836901 316.297765-236.525397 0-56.411088-24.240556-105.672557-62.967193-147.245853z" fill="#8DBFAA" ></path><path d="M1176.911691 259.947127c-14.040948-58.631261-87.350632-116.850361-182.422411-144.860815a411.314589 411.314589 0 0 0-27.625771-7.094663c2.225669 0.494593 4.280978 1.571707 5.96809 3.115937-49.442821-45.601481-131.473829-72.826082-219.423468-72.826082-74.474726 0-145.915947 19.767236-196.007235 54.234878 1.840985-1.26396 3.984222-2.038823 6.204396-2.225669-22.256688 1.923418-44.733196 6.149441-66.803038 12.573655C406.143344 129.253656 335.004374 189.038967 315.577857 255.177052c0.648466-2.220173 1.884949-4.220528 3.577557-5.79773-70.424558 65.725924-104.958145 136.040572-87.971621 179.136115 6.918808 17.552559 25.119833 38.484836 72.540317 38.484837 21.003719 0 39.287176-1.571707 55.416406-2.956568 27.730185-2.385038 49.640658-4.264491 72.655722 2.439993 52.514793 15.310403 94.033134 44.551845 137.980476 75.507875 78.288588 55.147127 167.029576 117.647205 341.247237 117.647206 34.896289 0 124.598986-4.506292 204.008652-46.365353 81.904613-43.161489 125.192497-113.377218 125.192497-203.068924 0-56.229737-22.344616-108.733539-66.434841-156.04961 1.527743 1.632157 2.593866 3.627016 3.121432 5.792234z m37.490155 150.257376c0 80.635157-37.473668 141.272268-111.404342 180.229715-76.392648 40.254381-166.249218 43.392299-191.973553 43.392299-166.045885 0-247.549328-57.411265-326.376472-112.93758-45.76085-32.236477-88.982789-62.681429-145.630182-79.195342-27.642257-8.056372-52.871999-5.885658-82.091459-3.379719-16.376526 1.406843-33.313591 2.863144-53.207224 2.863144-26.405775 0-42.727346-7.446373-48.514085-22.130292-10.364473-26.284874 10.743661-84.69082 81.563893-150.784941 1.692607-1.582698 2.92909-3.583052 3.577557-5.803226 17.014002-57.900362 81.256146-110.81083 163.671838-134.804089a320.864507 320.864507 0 0 1 61.807648-11.639424 12.85942 12.85942 0 0 0 6.204395-2.225669c45.898237-31.571524 112.003349-49.684622 181.36728-49.684621 81.635334 0 157.115732 24.669203 201.903882 65.989706 1.687112 1.549725 3.747916 2.626839 5.973586 3.115937 8.946639 1.978372 17.662468 4.215032 25.90019 6.644033 85.15244 25.092355 152.84025 76.947691 164.611565 126.110243 0.527566 2.170714 1.593689 4.165573 3.110441 5.797729 39.490509 42.375635 59.505042 88.955312 59.505042 138.442097z" fill="#6E6E96" ></path><path d="M306.889505 427.015172l-0.115405 0.076936c0.851799-0.527566 88.152972-50.618853 309.785623 114.459828 122.208453 91.027107 339.241388 106.035259 483.805447 33.456474 89.96648-45.167338 139.513715-119.5981 139.513715-209.575571a10.3315 10.3315 0 0 0-20.663 0c0 104.787785-69.671677 161.764907-128.116092 191.110763-135.930663 68.248348-347.594515 53.800735-462.19173-31.549543-235.420807-175.355226-329.415472-117.817565-333.300775-115.284149a10.326004 10.326004 0 1 0 11.282217 17.305262z" fill="#FFFFFF" ></path><path d="M1078.410733 683.390238s31.620984 132.215719 139.381823 157.110237c107.760839 24.921995 159.368879-149.6199 65.302772-135.342646-106.408952 16.145716-143.998025-14.326713-153.263402-52.679658-9.237899-38.352945-59.461078-22.130292-51.421193 30.912067z" fill="#F7E2CD" ></path><path d="M1197.190007 792.953594a14.321217 9.545646 0 1 0 28.642435 0 14.321217 9.545646 0 1 0-28.642435 0Z" fill="#E3D0BC" ></path><path d="M1154.633021 752.693718a8.583938 6.677006 0 1 0 17.167875 0 8.583938 6.677006 0 1 0-17.167875 0Z" fill="#E3D0BC" ></path><path d="M1236.729976 764.629898a23.861368 11.936179 0 1 0 47.722736 0 23.861368 11.936179 0 1 0-47.722736 0Z" fill="#E3D0BC" ></path><path d="M1106.910285 701.140634a8.583938 4.775571 0 1 0 17.167875 0 8.583938 4.775571 0 1 0-17.167875 0Z" fill="#E3D0BC" ></path><path d="M1191.326332 731.689999a7.215563 4.770075 0 1 0 14.431126 0 7.215563 4.770075 0 1 0-14.431126 0Z" fill="#E3D0BC" ></path><path d="M367.086978 517.773a12.914375 7.743129 0 1 0 25.828749 0 12.914375 7.743129 0 1 0-25.828749 0Z" fill="#00A33D" ></path><path d="M276.719328 418.359793a24.526321 11.622937 0 1 0 49.052642 0 24.526321 11.622937 0 1 0-49.052642 0Z" fill="#00A33D" ></path><path d="M290.260187 664.216513a16.469949 10.534832 0 1 0 32.939899 0 16.469949 10.534832 0 1 0-32.939899 0Z" fill="#00A33D" ></path><path d="M410.984861 582.322892a12.914375 9.040062 0 1 0 25.828749 0 12.914375 9.040062 0 1 0-25.828749 0Z" fill="#00A33D" ></path><path d="M218.58266 625.231588a26.284874 17.519586 0 1 0 52.569748 0 26.284874 17.519586 0 1 0-52.569748 0Z" fill="#00A33D" ></path><path d="M262.205769 504.386014a24.042719 11.958161 0 1 0 48.085438 0 24.042719 11.958161 0 1 0-48.085438 0Z" fill="#00A33D" ></path><path d="M398.081477 459.03183a10.974471 5.808721 0 1 0 21.948941 0 10.974471 5.808721 0 1 0-21.948941 0Z" fill="#00A33D" ></path><path d="M1165.503078 264.244592c-0.384684-0.428647-0.752881-0.86279-1.154051-1.285942-12.584646-52.553262-81.102273-108.255432-173.51424-135.485529a397.619857 397.619857 0 0 0-26.773972-6.869348c-45.343194-41.837078-122.741514-69.407894-210.652684-69.407895-75.007787 0-142.360372 20.085974-188.681762 51.95975a333.23483 333.23483 0 0 0-64.30809 12.10654c-88.922339 25.883704-154.829613 83.591725-172.448118 143.558386-1.230987 1.148555-2.396029 2.302606-3.605034 3.451161 44.755178 97.588709 216.197623 170.288395 421.019605 170.288394 203.453608 0 373.983803-71.721491 420.118346-168.315517z" fill="#9AD1BA" ></path><path d="M1175.081697 255.578222l-0.34072-0.368197c-0.269278-0.307747-0.599007-0.686935-0.994681-1.099096 1.538734 1.637653 2.632334 3.654493 3.154404 5.841694-14.046443-58.631261-87.356127-116.850361-182.422411-144.860815a409.781351 409.781351 0 0 0-27.631266-7.094663c2.231164 0.494593 4.286473 1.571707 5.979081 3.115936-49.437325-45.606977-131.468334-72.831578-219.417973-72.831577-74.474726 0-145.915947 19.767236-196.007235 54.234878 1.840985-1.26396 3.984222-2.038823 6.204396-2.225669-22.256688 1.923418-44.733196 6.149441-66.803038 12.573655C406.143344 129.253656 335.004374 189.038967 315.577857 255.177052a13.299058 13.299058 0 0 1 3.550079-5.775748l-2.319092 2.220173-1.362878 1.307924a12.98032 12.98032 0 0 0-2.824676 14.722387c48.008501 104.694362 225.963088 177.8172 432.752451 177.817201 204.821982 0 382.380895-72.238066 431.779751-175.662973a13.062753 13.062753 0 0 0-2.071795-14.227794z m-429.707956 164.073008c-193.907961 0-366.031846-68.451681-409.281262-162.759589a12.969329 12.969329 0 0 1-2.824676 14.722387l1.472788-1.417833 2.055309-1.961886c1.626662-1.560716 2.912604-3.610529 3.550079-5.775748 17.014002-57.900362 81.256146-110.81083 163.671838-134.804089a320.864507 320.864507 0 0 1 61.807648-11.639424 12.85942 12.85942 0 0 0 6.204395-2.225669c45.898237-31.571524 112.003349-49.684622 181.36728-49.684621 81.635334 0 157.115732 24.669203 201.903882 65.989706 1.687112 1.549725 3.747916 2.626839 5.973586 3.115937 8.946639 1.978372 17.662468 4.215032 25.90019 6.644033 85.15244 25.092355 152.84025 76.947691 164.611565 126.110243 0.527566 2.1872 1.615671 4.204041 3.148909 5.841693 0.115405 0.115405 0.280269 0.302251 0.456125 0.505584l0.538557 0.593512a13.040771 13.040771 0 0 1-2.077291-14.227794c-44.551845 93.274758-216.33501 160.973558-408.478922 160.973558z" fill="#6E6E96" ></path><path d="M608.14065 604.145437s209.982236 113.063976 370.076518 90.939179 44.760673 89.510355-173.871447 89.510355c-62.219808 0-69.358435-103.771122-109.338041-111.10209-14.447613-2.63783-68.5506 75.722199-41.067712 103.199592 52.003714 52.014705-164.864357-18.321926-130.187887-129.81969 27.774149-89.312518-39.594923-166.980116-39.594923-166.980117s31.483597 72.870046 123.983492 124.252771z" fill="#F7E2CD" ></path><path d="M990.834787 127.467626a397.619857 397.619857 0 0 0-26.773972-6.869349c-45.343194-41.837078-122.741514-69.407894-210.652684-69.407894-75.007787 0-142.360372 20.085974-188.681762 51.95975-1.478284 0.126396-2.978549 0.346215-4.467824 0.494593 37.698983 56.78478 124.30223 96.51709 225.155253 96.51709 86.037213 0 161.682475-28.93919 205.486935-72.688695l-0.065946-0.005495z" fill="#A6E0C8" ></path><path d="M994.48928 115.091808a414.106292 414.106292 0 0 0-27.636762-7.100159c2.231164 0.494593 4.286473 1.571707 5.979081 3.115937-49.442821-45.601481-131.473829-72.826082-219.423468-72.826082-74.474726 0-145.915947 19.767236-196.007235 54.234878a12.914375 12.914375 0 0 1 6.1989-2.225669c-1.03315 0.093423-2.038823 0.214324-2.923595 0.313242a54.443706 54.443706 0 0 1-1.709093 0.192342 12.914375 12.914375 0 0 0-9.474205 19.992551c41.254558 62.137376 133.853372 102.287343 235.909904 102.287343 86.449373 0 166.677865-28.58748 214.603934-76.464089a12.914375 12.914375 0 0 0-9.116999-22.042365c1.044141-0.005495 2.055309 0.120901 3.599538 0.522071z m-12.733024 3.247828c-43.183471 43.150498-116.586578 68.907806-196.347954 68.907805-93.642955 0-177.800714-35.616197-214.400601-90.746837a12.914375 12.914375 0 0 1-9.468709 19.992551c0.774862-0.076937 1.500266-0.164864 2.203687-0.247297 0.758376-0.093423 1.472788-0.175855 2.099272-0.23081a12.875906 12.875906 0 0 0 6.193405-2.225669c45.898237-31.571524 112.003349-49.684622 181.372775-49.684621 81.629839 0 157.115732 24.669203 201.898387 65.989706 1.692607 1.549725 3.742421 2.626839 5.973585 3.115937a388.145652 388.145652 0 0 1 25.900191 6.644033 12.886897 12.886897 0 0 1-8.221236-7.440878 12.91987 12.91987 0 0 1 2.797198-14.07392z" fill="#6E6E96" ></path><path d="M1162.205791 575.464534c2.148732-13.985993 1.731076-19.311112 0.994681-28.966667a449.200419 449.200419 0 0 1-0.857294-13.299058c-10.304022-215.356814-109.129214-390.926364-264.365493-469.660086a13.700228 13.700228 0 0 0-1.439815-0.620989c-43.40329-15.772024-93.35719-24.108665-144.459645-24.108664-61.692242 0-120.125666 11.815279-168.996957 34.16539a13.282572 13.282572 0 0 0-1.077114 0.555043C444.826018 152.625926 363.454466 299.003494 374.687225 446.452679c0.082432 1.099096 0.203333 2.132246 0.313242 3.039 0.065946 0.555043 0.126396 1.077114 0.17036 1.538734a12.903384 12.903384 0 0 0 12.084557 11.688883c9.732493 0.577025 18.580213 2.00585 27.048746 4.352419 55.377938 15.354367 99.077983 44.639772 145.344417 75.634272 82.190378 55.070191 175.338739 117.476845 358.129348 117.476845 65.692951-0.010991 165.93048-31.813325 238.349896-75.628776a12.941852 12.941852 0 0 0 6.078-9.089522z m-244.427896 58.906035c-174.937569 0-260.760458-57.504688-343.758672-113.10794-48.046969-32.192513-93.423136-62.604492-152.818268-79.068946-10.238077-2.841162-20.838855-4.555752-32.406837-5.248182a12.914375 12.914375 0 0 1 12.084558 11.688883c-0.076937-0.796844-0.164864-1.544229-0.241802-2.209182a36.528446 36.528446 0 0 1-0.203332-1.906931c-10.485373-137.628765 65.846824-274.455191 194.457509-348.605683-0.351711 0.203333-0.708917 0.384684-1.077114 0.555043 45.524545-20.822368 100.24852-31.829812 158.258792-31.829812 48.129401 0 95.033311 7.798084 135.644898 22.553444a11.414109 11.414109 0 0 1-1.43432-0.620989c146.861169 74.485717 240.405206 241.910967 250.258599 447.865017a466.126493 466.126493 0 0 0 0.912249 14.051939c0.664953 8.748802 0.92324 12.024107-0.780358 23.064524a12.892393 12.892393 0 0 1 6.077999-9.078531c-68.836365 41.650232-163.452019 71.886355-224.973901 71.897346z" fill="#6E6E96" ></path><path d="M961.433976 648.197193c6.671511-27.136673 7.550788-45.101393 8.765289-79.997681 7.644211-220.434637-35.044667-401.939303-114.157577-485.514541-24.57578-25.955145-51.415698-39.946634-77.656607-40.4742-28.164328-0.57153-57.823426 13.326536-85.789916 40.188435-70.463026 67.676819-117.81207 201.370821-120.62026 340.598771-0.807835 40.19393 2.071795 79.898763 8.567452 117.998916a12.914375 12.914375 0 0 0 4.550256 7.831057c56.301178 46.079588 135.606429 95.203671 296.942689 110.17885 15.118062 1.406843 34.006021 0.52207 52.289479-0.335225l15.079593-0.664953a13.035275 13.035275 0 0 0 12.029602-9.809429z m-77.035618-14.909233c-153.988805-14.282749-227.007229-58.642252-282.967687-104.452561 2.412515 1.967381 4.028186 4.753589 4.550256 7.825561-6.215386-36.506464-8.979612-74.568149-8.20475-113.140913 3.253323-161.270314 62.736383-274.521137 112.690284-322.491169 22.916146-22.014887 46.22247-33.428996 67.385558-32.994853 19.173725 0.384684 39.721319 11.589964 59.42261 32.406837 57.499192 60.736029 115.822706 215.268887 107.106877 466.868382-1.258465 36.29214-2.220173 51.085969-8.028894 74.716527a12.969329 12.969329 0 0 1 12.035098-9.809429l-15.299412 0.664952c-17.371208 0.80234-35.352414 1.637653-48.68994 0.406666z" fill="#6E6E96" ></path><path d="M1217.43535 371.587775c-6.781421 187.428792-211.636375 226.919301-316.110918 226.919301-267.602329 0-325.766474-148.971433-475.62268-192.654992-39.726815-11.578973-75.27157 0-131.688153 0-27.543339 0-45.606977-7.80358-55.311992-21.020206-12.22744 43.46374 5.187732 74.414275 60.169995 74.414275 56.411088 0 91.955843-11.578973 131.682658 0 149.856205 43.683559 208.02035 192.649497 475.617184 192.649497 106.249583 0 340.571294-55.405415 340.571294-251.093911 0-62.417646-32.165036-54.405238-29.307388-29.213964z" fill="#8DBFAA" ></path><path d="M1204.531967 371.120659c-7.545292 208.454493-272.971412 214.466547-303.207535 214.466547-166.045885 0-247.560319-57.411265-326.387464-112.93758-45.76085-32.230982-88.977294-62.675933-145.630182-79.189847-27.642257-8.056372-52.877495-5.885658-82.091459-3.379719-16.376526 1.406843-33.319087 2.863144-53.212719 2.863144-15.211485 0-35.346918-2.736748-44.903555-15.750041a12.91987 12.91987 0 0 0-22.839209 4.149086c-7.446373 26.493702-4.912958 49.047146 7.347455 65.236826 12.85942 16.975533 34.808361 25.581453 65.253312 25.581453 21.003719 0 39.287176-1.571707 55.421902-2.956567 27.730185-2.385038 49.640658-4.264491 72.650226 2.445488 52.520289 15.310403 94.033134 44.546349 137.985972 75.507875 78.294083 55.141632 167.02408 117.647205 341.258228 117.647205 91.708546 0 353.463686-48.503094 353.463687-264.008286 0-38.902493-11.496541-53.141278-21.141106-58.235586-7.330968-3.879808-15.744546-3.44017-22.49849 1.165041-8.430064 5.753766-12.804465 16.986524-11.403118 29.307388a13.876083 13.876083 0 0 1-0.065945-1.912427z m29.301891 29.675584c0 194.430032-242.647361 238.190528-327.656919 238.190528-166.045885 0-247.549328-57.411265-326.387463-112.948571-45.76085-32.225486-88.977294-62.670438-145.624687-79.178855-27.642257-8.061867-52.877495-5.891153-82.091459-3.37972-16.382022 1.406843-33.319087 2.863144-53.212719 2.863145-15.074098 0-35.055658-2.659812-44.66725-15.354367-9.084026-11.991134-6.682502-29.812971-3.071972-42.655905a12.91987 12.91987 0 0 1-22.833714 4.149086c12.815456 17.442649 34.923766 26.290369 65.720429 26.29037 21.003719 0 39.287176-1.577202 55.421901-2.962063 27.73568-2.385038 49.640658-4.264491 72.650227 2.439992 52.520289 15.310403 94.033134 44.551845 137.985971 75.513371 78.288588 55.147127 167.02408 117.647205 341.247238 117.647206 34.088454 0 121.878724-4.335933 200.573977-44.579323 80.920922-41.369963 125.33538-108.728044 128.440325-194.770751 0.027477-0.642971 0-1.285942-0.076937-1.917922-0.362702-3.231341 0.390179-5.022867 0.686935-5.402056-0.80234 1.027654-3.462152 1.37387-4.583229 0.609999 1.939904 1.318915 7.479346 10.68321 7.479346 35.445836z" fill="#6E6E96" ></path><path d="M499.253237 528.945308c23.767945 106.04625-67.830692 216.868071-204.585676 247.499869-136.754984 30.653779-225.765251-35.621692-249.533195-141.689924C21.371916 528.709003 71.858878 423.041941 208.608367 392.393657c136.754984-30.631798 266.87143 30.494411 290.64487 136.551651z" fill="#E3D0BC" ></path><path d="M476.243669 491.015515c20.09147 80.151555-64.747729 165.386428-189.473111 190.379864-124.730877 24.987941-204.69009-24.152628-224.776064-104.315174-20.09147-80.15705 27.296042-160.962567 152.026919-185.961499 124.741868-24.982446 242.12529 19.734264 262.222256 99.896809z" fill="#F7E2CD" ></path><path d="M1302.97797 705.284225c9.886366 10.238077 24.279024 67.253667-71.979779 88.444232-96.670964 21.278493-152.576467-131.649685-152.587458-131.671667-1.077114 6.253855-1.20351 13.370499 0 21.333448 0 0 31.615488 132.215719 139.370832 157.110237 99.083479 22.91065 150.592599-122.626109 85.196405-135.21625z" fill="#E3D0BC" ></path><path d="M193.100126 505.759884m-24.141637 0a24.141637 24.141637 0 1 0 48.283274 0 24.141637 24.141637 0 1 0-48.283274 0Z" fill="#6E6E96" ></path><path d="M687.281037 295.173145m-18.074629 0a18.074629 18.074629 0 1 0 36.149258 0 18.074629 18.074629 0 1 0-36.149258 0Z" fill="#6E6E96" opacity=".27" ></path><path d="M831.218612 349.963067m-21.948942 0a21.948941 21.948941 0 1 0 43.897883 0 21.948941 21.948941 0 1 0-43.897883 0Z" fill="#6E6E96" opacity=".27" ></path><path d="M754.413803 269.882953m-7.743129 0a7.743129 7.743129 0 1 0 15.486258 0 7.743129 7.743129 0 1 0-15.486258 0Z" fill="#6E6E96" opacity=".27" ></path><path d="M687.193109 736.548002s16.99202 201.447758 169.89272 262.123337c152.9007 60.681074 267.728725-184.450243 126.203666-184.450243-160.039327 0-208.509448-53.201728-213.57628-111.635151-5.044849-58.460901-82.520106-45.848778-82.520106 33.962057z" fill="#F7E2CD" ></path><path d="M873.204068 930.923079a19.360571 12.914375 0 1 0 38.721142 0 19.360571 12.914375 0 1 0-38.721142 0Z" fill="#E3D0BC" ></path><path d="M808.648681 862.498876a11.617442 9.040062 0 1 0 23.234884 0 11.617442 9.040062 0 1 0-23.234884 0Z" fill="#E3D0BC" ></path><path d="M919.668339 878.633601a32.285937 16.140221 0 1 0 64.571874 0 32.285937 16.140221 0 1 0-64.571874 0Z" fill="#E3D0BC" ></path><path d="M744.104285 792.777739a11.611946 6.451692 0 1 0 23.223893 0 11.611946 6.451692 0 1 0-23.223893 0Z" fill="#E3D0BC" ></path><path d="M858.272853 834.092747a9.765465 6.457187 0 1 0 19.530931 0 9.765465 6.457187 0 1 0-19.530931 0Z" fill="#E3D0BC" ></path><path d="M687.193109 736.548002s16.99202 201.447758 169.89272 262.123337c144.151898 57.207932 254.440658-157.385011 147.965761-182.114664 33.275123 33.269627 37.407723 85.394242-93.120885 114.366404-130.534103 28.955677-224.737596-194.375077-224.737596-194.375077" fill="#E3D0BC" ></path><path d="M474.149891 493.548931c-20.096965-80.168041-137.480387-124.884751-262.222255-99.89681C87.196759 418.651053 39.814742 499.451075 59.900716 579.608125c4.671157 18.646159 12.617619 35.577728 23.575604 50.316602-22.295157-59.444592 11.831765-127.681949 117.42189-167.853898 112.316591-42.72185 228.710827-27.191628 260.007578 34.692957 19.212193 38.001234 1.808012 84.624875-40.468704 124.868264 43.243921-36.610878 64.978539-83.146591 53.712807-128.083119z" fill="#FFF3E8" ></path><path d="M674.328194 737.630612c0.719908 8.561956 19.486967 210.130614 177.998551 273.042852 56.125323 22.273175 116.372254 8.309164 161.143918-37.380245 39.875193-40.672037 56.883699-94.901419 41.347981-131.864008-6.297818-14.98617-23.949296-40.122489-71.54014-40.122489-127.445644 0-194.97958-33.593861-200.711364-99.84735-2.973054-34.511605-26.235415-49.019669-47.975528-48.079942-29.966845 1.296933-60.312877 30.280087-60.312877 83.168572 0.005495 0.357206 0.021982 0.725403 0.049459 1.08261z m82.536593-33.945572c4.863499 56.306673 48.096428 123.433944 226.424708 123.433945 24.894518 0 40.952306 8.177272 47.739222 24.311997 11.238254 26.768476-4.237014 71.386267-35.989889 103.787608-17.882287 18.244989-66.676642 57.845407-133.182923 31.45612-143.519918-56.949644-161.622025-249.274908-161.78689-251.214813 0.043964 0.362702 0.054955 0.730899 0.054955 1.088105 0-36.270159 18.343907-56.625411 35.605206-57.361805 11.848252-0.516575 19.75075 8.649883 21.135611 24.498843zM1065.864556 686.390769c1.362879 5.720793 34.786379 140.283082 149.020892 166.688856 41.27654 9.545646 81.552902-6.435205 107.733362-42.743832 23.383261-32.401342 29.285405-72.084192 14.370677-96.506099-6.253855-10.216095-21.800564-26.609107-55.839558-21.432367-82.184882 12.474736-128.863477-1.983868-138.76633-42.941669-6.077999-25.224247-25.861722-33.374041-41.661223-30.280087-21.773086 4.258996-40.809424 28.356669-35.077639 66.160066 0.065946 0.351711 0.137387 0.703421 0.219819 1.055132z m51.426688-30.873598c9.336818 38.660692 46.024633 80.876958 167.738493 62.406654 14.700405-2.231164 24.768122 0.912249 29.922881 9.353305 9.18844 15.04662 3.357737 44.89806-13.266086 67.951592-9.562133 13.244103-36.588896 42.952661-80.981372 32.681612-98.830687-22.839209-129.435007-146.284144-129.720772-147.531618 0.076937 0.34072 0.142882 0.703421 0.203333 1.060627-3.467647-22.8502 6.396737-35.363405 14.519054-36.957093 7.699165-1.49477 10.661228 7.210068 11.584469 11.034921zM486.657601 531.77548c8.875198 39.589428 0.648466 80.89894-23.789927 119.444226-34.890793 55.053704-97.226007 96.088443-171.019293 112.624338-62.456114 14.007975-117.575764 7.385923-159.407347-19.124265-37.693488-23.894341-63.527732-62.890257-74.705536-112.772716-11.578973-51.66849-4.066654-102.029055 21.141106-141.805329 26.795954-42.271221 72.63374-71.721491 132.561934-85.146945 129.577889-29.027118 253.039311 27.840094 275.219063 126.780691z m-280.87391-151.97746C139.035608 394.756712 87.608919 428.136249 57.06505 476.320605c-28.900722 45.595986-37.616551 102.869863-24.526321 161.264819 12.711042 56.718834 42.474554 101.309148 86.075681 128.940414 47.744718 30.263601 109.601825 38.056189 178.877827 22.525967 80.420833-18.008683 148.6472-63.208995 187.186991-123.988988 28.180814-44.458422 37.578082-92.505391 27.175142-138.920203-25.290192-112.844157-162.589229-178.487649-306.070679-146.344594z" fill="#6E6E96" ></path><path d="M600.040314 490.169211s-39.528977-30.379006 101.523472-21.218042 202.16217 6.671511 221.654632-12.820952v128.759063s51.547589 10.507355 71.18843-9.12799V432.312813s90.345668-28.175319 101.001401-49.459307c0 0 18.310935 117.284504 18.310934 147.427203 0 0 35.671151-1.577202 60.263418-58.356486 0 0-11.249245-98.797714-23.619567-123.879079 0 0 34.802866-42.133834 34.802866-54.954785S1162.530024 280.269407 1162.530024 280.269407s-199.5738 229.700013-564.748351 143.239649c0 0.005495-40.353299 24.048214 2.258641 66.660155z" fill="#6E6E96" opacity=".15" ></path><path d="M353.831883 232.068565s163.611388 250.681751 580.822626 125.340875c0 0 244.724652-83.795057 179.603231-148.916478 0 0 56.938654 46.277425 48.272284 71.781941s-207.531253 182.917004-460.966238 151.136651C448.123305 399.631202 326.453409 308.31833 322.787925 270.196195l31.043958-38.12763z" fill="#6E6E96" opacity=".15" ></path><path d="M868.791199 203.87676s43.392299 87.240722 34.247822 162.418869l76.315711-26.065055s-19.51994-124.219798-40.578614-160.781217l-69.984919 24.427403zM625.989964 385.722146s1.533239-144.448654 46.958865-189.874281l5.066831-5.066831-69.896992-24.718662s-57.202436 113.553074-57.202436 201.673072c0 0.005495 50.789213 17.986701 75.073732 17.986702zM441.270443 314.434798s54.773435-155.664926 128.478794-178.921792l-14.733378-18.272466S444.600703 200.315689 421.041586 299.827815l20.228857 14.606983z" fill="#6E6E96" opacity=".15" ></path><path d="M811.011737 99.808882c15.013647 12.793474 21.080656 30.340537 13.535364 39.199249-7.545292 8.853216-23.042542 0.390179-38.072676-12.403296-15.008152-12.793474-23.861368-25.064878-16.316076-33.923589 7.550788-8.858711 25.83974-5.665838 40.853388 7.127636z" fill="#FFFFFF" opacity=".75" ></path><path d="M1012.28364 218.346355c7.396914 11.628433 7.836552 24.592267 0.972699 28.955676-6.852862 4.36341-15.458781-4.47332-22.855695-16.107247-7.40241-11.628433-10.787624-21.641195-3.923772-26.004605 6.847366-4.36341 18.398862 1.527743 25.806768 13.156176zM522.532085 209.427193c-9.924834 15.085089-11.298704 29.686575-3.055486 32.615665 8.232227 2.92909 19.481472-9.380782 29.411801-24.46587 9.924834-15.085089 14.766351-27.230096 6.523133-30.153691-8.232227-2.934586-22.949119 6.918808-32.879448 22.003896z" fill="#FFFFFF" opacity=".4" ></path><path d="M104.771299 712.389878c-8.050876 0-15.689591-1.214501-22.905155-3.638006-27.488384-9.243395-37.66601-32.95089-38.083666-33.962058a13.738696 13.738696 0 0 1 25.306679-10.710688c0.357206 0.80234 6.396737 13.727705 21.954437 18.761564 16.244635 5.259173 38.336459 0.181351 63.873947-14.661937a13.738696 13.738696 0 0 1 13.804642 23.751459c-23.416234 13.623291-44.826619 20.459667-63.950884 20.459666z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-deeranimal" viewBox="0 0 1024 1024"><path d="M548.320057 18.170101c1.426212 3.311712 34.603768 81.890348 0.132952 147.028749-20.406111 38.564125-59.892842 63.724276-117.348231 74.779432a10.072118 10.072118 0 0 1-3.81129-19.78164c51.118013-9.830387 85.86682-31.473354 103.299642-64.320545 29.98671-56.516668-0.463317-129.007715-0.773539-129.732908l0.004029 0.008058a10.072118 10.072118 0 1 1 18.496437-7.981146z" fill="#6E6E96" ></path><path d="M512.165183 107.006181l0.032231-0.024173c-0.197414 0.165183-19.660774 16.542447-20.748563 39.760693-0.709077 15.116235 6.518675 30.365421 21.473755 45.32453a10.06406 10.06406 0 0 1 0 14.241975 10.06406 10.06406 0 0 1-14.241975 0c-19.209543-19.209543-28.407401-39.647885-27.339757-60.746958 1.627654-32.218691 27.01342-53.285533 28.097181-54.163821a10.076147 10.076147 0 0 1 14.173484 1.43427 10.076147 10.076147 0 0 1-1.446356 14.173484zM648.40065 112.976932c-10.479032 30.441969-48.338108 83.465627-116.671385 66.258421a10.060031 10.060031 0 0 1-7.300271-12.227551 10.06406 10.06406 0 0 1 12.219493-7.308329c67.334123 16.957418 91.712677-50.421022 92.71586-53.297619l-0.008058 0.020144a10.072118 10.072118 0 0 1 12.799648-6.248742 10.092262 10.092262 0 0 1 6.244713 12.803676zM632.631742 41.207049c-0.950808 2.779905-24.165025 68.123777-78.784106 68.091546a10.072118 10.072118 0 1 1 0.012086-20.144236c40.215953 0.024173 59.546361-53.99461 59.735717-54.542533 0.14101-0.406914 0.31425-0.817856 0.507635-1.200596l-0.511664 1.216711a10.06406 10.06406 0 0 1 12.807706-6.228597c5.261674 1.812981 8.057694 7.546031 6.232626 12.807705z" fill="#6E6E96" ></path><path d="M387.923594 685.903174c-15.631927-21.514044 103.609863 4.145684 94.508697 59.006496-14.016359 84.460752-27.60969 82.466473-30.482258 111.421797-5.028001 50.74333-12.453167 94.355601-17.247495 114.310481-4.637203 19.245803-10.366224 21.566419-18.818745 21.566419-9.258291 0-14.185571-2.385078-16.687485-21.538217-4.673463-35.852711-0.813827-135.695602-0.813827-171.931053 0-55.598091 14.241975-78.84051-10.458887-112.835923z" fill="#E3B334" ></path><path d="M410.843705 756.984125c2.626808-28.044805 4.709722-50.195407-14.769754-77.003356a0.588212 0.588212 0 0 1-0.056403-0.084606c0.318279 0.511664 1.027356 2.534145 0.128923 5.019943-0.898433 2.477741-2.715443 3.581645-3.279482 3.771001 6.438098-2.13126 42.717867 4.919222 65.400276 24.314093 11.18408 9.560454 15.974379 19.741351 14.229888 30.260671-8.271223 49.804609-16.199994 68.401767-21.989447 81.974954-4.073164 9.552397-7.292213 17.098427-8.585474 30.115632-4.878934 49.268772-12.243667 93.082485-17.01785 112.932615-3.335885 13.851177-5.475203 13.851177-9.024618 13.851177-2.667097 0-3.380203-0.261875-3.49301-0.322308a1.176423 1.176423 0 0 1 0.112807 0.084606c-0.080577-0.080577-1.933847-1.929818-3.315741-12.517628-3.339914-25.599295-2.171549-86.277762-1.317433-130.574937 0.31425-16.280571 0.588212-30.341248 0.588212-40.042712 0-16.332946 1.265058-29.853758 2.389106-41.779145z m-20.05963-1.885501c-1.160308 12.360503-2.473712 26.38492-2.473712 43.640473 0 9.50405-0.265904 23.480121-0.584183 39.664-0.866202 44.933733-2.050683 106.474373 1.482616 133.568371 2.37702 18.194274 7.819992 30.30096 26.670968 30.300959 15.51509 0 23.532496-8.206762 28.612873-29.293748 5.096492-21.199794 12.47734-65.186747 17.477139-115.664173 0.987068-9.939166 3.275453-15.30559 7.066598-24.189199 6.192338-14.519965 14.673061-34.394268 23.331054-86.579925 4.326982-26.086785-13.681965-50.275984-49.401724-66.391373-13.915638-6.276944-52.467677-19.556024-63.63967-5.825713-3.130414 3.847549-4.657347 10.466945 0.447202 17.493254 15.011485 20.651871 13.589302 35.796307 11.010839 63.277074z" fill="#6E6E96" ></path><path d="M719.409081 788.666979v176.221775c0 18.359457 8.750656 20.228842 17.50937 22.001535 10.354137 2.070827 17.988803-1.953991 23.584872-23.472064 13.359657-51.259023 17.537572-154.85277 17.537571-154.85277l-58.631813-19.898476z" fill="#E3B334" ></path><path d="M788.403089 801.458569l-7.135088-2.421338-58.627784-19.902505-13.307282-4.520366v14.052619l-0.008058 176.221775c0 26.723343 16.651225 30.075344 25.603324 31.868181 25.937718 5.185126 32.742441-20.962092 35.304788-30.804565 13.484551-51.706225 17.686639-152.701366 17.859879-156.98403l0.310221-7.509771z m-72.233201-3.243222l58.627784 19.898476-6.828896-9.943195c-0.040288 1.027356-4.278636 103.078055-17.207206 152.705394-4.584828 17.585918-8.452521 16.816408-11.844811 16.139562-7.807906-1.579308-9.427502-1.897587-9.427502-12.12683l0.008058-176.221775-13.327427 9.548368z" fill="#6E6E96" ></path><path d="M437.575106 957.193656h-39.571337c0.306192 5.06829 0.696991 9.693406 1.192539 13.484552 2.501914 19.153139 7.429194 21.534188 16.683456 21.534188 8.448493 0 14.181542-2.304501 18.818745-21.570448 0.87426-3.642078 1.861327-8.323598 2.876597-13.448292z" fill="#3F3F3F" ></path><path d="M449.846975 947.121538H387.303151l0.648644 10.672416c0.338423 5.624271 0.761452 10.402483 1.26103 14.185571 2.37702 18.190245 7.815964 30.30096 26.666939 30.30096 15.51509 0 23.536525-8.210791 28.612873-29.293748 0.821885-3.416462 1.792837-7.948915 2.965231-13.843119l2.389107-12.02208z m-22.150602 8.11007a342.351289 342.351289 0 0 1-2.791991 13.049436c-3.335885 13.851177-5.475203 13.851177-9.024618 13.851176-2.667097 0-3.380203-0.257846-3.49301-0.318279a0.821885 0.821885 0 0 1 0.112807 0.084606c-0.080577-0.080577-1.929818-1.929818-3.315741-12.521657a195.153328 195.153328 0 0 1-1.124048-12.787561l-10.051974 10.680474h39.571337l-9.882762-12.038195z" fill="#6E6E96" ></path><path d="M693.145027 710.253526l80.532626 101.547093c-131.308187 0-152.326683-63.035343-152.326683-63.035343l71.794057-38.51175z" fill="#E3B334" ></path><path d="M626.113067 757.644856l71.785999-38.515779-12.658637-2.614722 80.532626 101.551122 7.892511-16.336976c-121.151463 0-142.605075-55.694783-142.802488-56.26285l0.03626 0.10475-4.786271 12.074455z m69.690999-60.247381l-7.425166 3.980501-71.785998 38.515779-5.301963 2.848395v6.027155c0 9.584627 30.272758 73.107461 162.402829 73.107461h20.841227l-12.948715-16.332946-80.536655-101.551122-5.245559-6.595223z" fill="#6E6E96" ></path><path d="M877.368093 534.450751c33.088922-8.59756 29.289719-25.313247 29.595911-11.099474 0.31425 14.229888-3.376174 49.768349-40.95726 62.576054-14.000244-0.064462-25.671814-11.631282-26.062613-25.841026-0.390798-14.193629 7.683012-17.908226 37.423962-25.635554z" fill="#FFD569" ></path><path d="M879.902238 544.200561c22.746871-5.914348 30.981835-15.768908 33.68922-19.008101l0.253817-0.302163c-2.046654 2.344789-6.301117 3.928126-10.475003 2.417308-4.657347-1.692116-6.438098-6.002982-6.482415-8.496839 0 0.128923 0 0.535837-0.008057 0.854116-0.008058 0.886346-0.024173 2.215866 0.016115 3.924097 0.265904 12.292013-2.526087 42.049078-34.14448 52.818186 1.055558-0.362596 2.171549-0.543894 3.283511-0.539865-8.613675-0.048346-15.79711-7.23581-16.030783-16.034812-0.149067-5.69679-0.2095-7.811935 29.898075-15.631927z m-50.030225 16.151648c0.535837 19.560053 16.715687 35.558605 36.086384 35.64724 1.115991 0.004029 2.240039-0.177269 3.291569-0.543894 45.461512-15.494946 48.068176-59.276428 47.782127-72.329894-0.032231-1.369808-0.024173-2.401193-0.008058-3.235164 0.072519-5.958665-2.195722-9.826358-6.728174-11.502358-2.55026-0.938721-7.509771-1.684058-12.171148 3.883808-1.684058 2.014424-6.800694 8.1423-23.302852 12.424965-26.469526 6.8853-45.598492 11.852868-44.949848 35.655297z" fill="#6E6E96" ></path><path d="M764.290439 945.99749h-44.885386v18.891264c0 18.359457 8.750656 20.228842 17.509369 22.001535 10.354137 2.070827 17.980745-1.953991 23.584872-23.472064 1.385923-5.318078 2.638895-11.196166 3.791145-17.412677v-0.008058z" fill="#3F3F3F" ></path><path d="M774.362557 946.928154v-10.994724h-65.029622v28.959353c0 26.723343 16.651225 30.075344 25.599295 31.876239 25.933689 5.185126 32.738412-20.962092 35.308816-30.804566 1.381895-5.305992 2.667097-11.232426 3.944242-18.117725 0.008058-0.008058 0.177269-0.910519 0.177269-0.918577z m-20.144236-0.922606l0.169212-1.833126a246.472784 246.472784 0 0 1-3.634021 16.7036c-4.580799 17.585918-8.448493 16.816408-11.84481 16.139562-7.803877-1.579308-9.427502-1.897587-9.427503-12.12683v-18.891264l-10.072118 10.072118h44.893445l-10.084205-10.06406z" fill="#6E6E96" ></path><path d="M481.288098 413.91973L348.227362 525.965999v72.23723s10.507233 150.570105 206.599283 150.570105h147.214076c128.50411 0-4.347126 15.503004-131.686899-27.770844-146.754787 0-156.955828-102.800065-167.136725-140.127333-25.317276-92.780322 11.897186-107.985191 74.549789-121.082973 0.813827-3.871722 1.92176-7.892512 3.521212-12.171147 3.754886-10.035858 6.385723-18.665649 8.194675-26.159305-3.380203-6.599252-8.194675-7.542002-8.194675-7.542002z" fill="#E3B334" ></path><path d="M408.406253 595.810093c-13.73434-65.235093 71.765855-110.12048 71.765854-110.120479-176.644804 16.768062-71.765855 110.12048-71.765854 110.120479z" fill="#E3B334" ></path><path d="M481.288098 374.094576s25.772535 4.665405 0 73.534518c-30.345277 81.084578 87.54282 87.54282 87.54282 87.542821h182.091806s83.167492-4.375328 98.050054 84.037723c9.213973 54.723831 0.918577 88.384849-8.444464 107.646767-4.447847 17.722899-6.550906 40.908914 6.873213 54.663399 7.481569 4.661376 11.889128 5.918377 18.818745 12.843965 11.852868 11.844811 8.565329 32.613518 8.561301 32.637691h0.004029s-1.418154 85.169829-14.773783 136.416765c-5.616213 21.52613-13.234763 25.550949-23.584871 23.480121-8.758714-1.764635-17.513399-3.638049-17.513399-22.009592v-142.041036c-76.963068-12.054311-114.06875-48.132637-131.179264-74.078413h-132.637707c-17.037995 59.945217-45.787848 86.209272-48.26156 110.99474-5.03203 50.74333-12.461224 94.351572-17.255553 114.306452-4.629145 19.245803-10.366224 21.570448-18.810687 21.570448-9.266349 0-14.1896-2.37702-16.695543-21.538217-4.68152-35.85674-0.821885-135.695602-0.821885-171.931053 0-22.303698 2.292414-46.662108 6.659685-68.401768-104.870892-38.068577-111.703817-135.574736-111.703817-135.574736v-112.058355l133.08088-112.04224z" fill="#FFD569" ></path><path d="M553.392376 543.53983s-60.404506-15.225013-94.63762-6.019098c-44.079617 11.84884-79.319943 52.1776-28.76194 102.735603 0 0-85.778185-15.696389-68.454143-68.450113 17.324043-52.753725 74.960731-75.790673 100.116853-83.9088 25.156122-8.126185 91.73685 55.642408 91.73685 55.642408z" fill="#F2C349" ></path><path d="M830.762389 593.284006s42.629232 116.546491-80.66155 116.546491c-123.298839 0-341.698615-24.165025-341.698615-114.020404v-85.048964h-61.601074s-12.086542 110.019759 28.201931 154.337078 88.437224 52.262206 81.487463 89.577388c-6.949761 37.32324-3.589703 205.958696-3.589703 205.958697h39.599539l15.853513-108.384047 46.750743-103.476911 141.045911-5.547722s56.975957 73.824596 122.77106 79.626135v123.141714l44.889415 0.008058s16.800293-100.99917 3.80726-136.255612c-13.00109-35.256442-49.437984-17.739014-19.221629-108.388075s-17.634264-108.073825-17.634264-108.073826z" fill="#F2C349" ></path><path d="M474.801654 366.39142l-133.060736 112.050297a10.072118 10.072118 0 0 0-3.585674 7.703156v112.058356c0 0.237702 0.008058 0.467346 0.024173 0.705048 0.298135 4.254463 8.549214 104.496209 118.311127 144.345536a10.072118 10.072118 0 0 1-6.438098-11.449983c-4.423674 22.005563-6.857098 46.996502-6.857098 70.375902 0 9.50405-0.265904 23.464006-0.580154 39.627741-0.870231 44.945819-2.054712 106.506604 1.486645 133.608659 2.372991 18.190245 7.819992 30.30096 26.679026 30.30096 15.51509 0 23.536525-8.206762 28.604814-29.285691 5.100521-21.207852 12.481369-65.198834 17.485197-115.664173 0.914548-9.113252 7.010194-19.926678 14.745581-33.628788 10.48306-18.560899 23.524439-41.666337 33.16547-75.613403a10.072118 10.072118 0 0 1-9.685349 7.312357h132.641736a10.072118 10.072118 0 0 1-8.408204-4.524395c19.072563 28.931152 58.50289 66.01669 138.028304 78.477914a10.060031 10.060031 0 0 1-8.512954-9.955281v142.041036c0 26.739459 16.659283 30.083402 25.607353 31.876239 25.92966 5.185126 32.742441-20.962092 35.308816-30.804566 13.512753-51.819032 15.039687-135.264515 15.096091-138.793785a10.047945 10.047945 0 0 0-2.892713-7.227752 10.051974 10.051974 0 0 0 0.503606 0.551952c1.905645 2.260183 2.739616 5.249588 2.252126 8.166473 0.17324-1.055558 4.113453-25.92966-11.373436-41.41252-5.950607-5.950607-10.479032-8.476694-15.265302-11.159906a124.680734 124.680734 0 0 1-5.350309-3.106242c0.684904 0.419 1.321462 0.926635 1.893558 1.514847-10.829541-11.095445-7.348617-33.072806-4.310866-45.183521a10.035858 10.035858 0 0 1-0.709077 1.945933c9.653118-19.854159 19.076591-55.682697 9.318723-113.722269-16.199994-96.164553-107.590364-92.482187-108.521027-92.425783 0.177269-0.016115 0.354539-0.016115 0.531808-0.016116h-182.087777c0.181298 0 0.370654 0 0.555981 0.016116-16.143591-0.890375-61.480208-8.45655-77.220914-32.532941-7.251925-11.091416-7.7233-24.640429-1.438299-41.420578 13.162244-35.167807 15.559408-60.509256 7.135089-75.331384-5.406713-9.516137-13.258936-11.369407-14.777812-11.643369a10.144637 10.144637 0 0 0-8.299425 2.223924z m-120.087848 127.456609l133.060736-112.050298a10.060031 10.060031 0 0 1-8.28331 2.207809c0.273962 0.048346-1.055558-0.326337-0.813827-0.17727 0.253817 0.157125 0.930664 0.66476 1.667943 1.953991 1.8855 3.31977 6.845011 17.332101-8.49281 58.317563-8.5613 22.883852-7.405021 42.903194 3.448693 59.506073 24.483304 37.452163 90.189773 41.464895 92.977735 41.626049 0.181298 0.008058 0.370654 0.016115 0.551952 0.016115h182.091806c0.153096 0 0.342452-0.008058 0.499577-0.016115 3.033722-0.14101 74.449067-2.558318 87.61534 75.657721 8.887637 52.777898 0.789654 84.360031-7.566175 101.567237a9.919022 9.919022 0 0 0-0.713106 1.949962c-7.114944 28.355026-3.847549 50.541888 9.43556 64.155363 0.568067 0.580154 1.196568 1.091818 1.8855 1.514846 2.328674 1.446356 4.36727 2.590549 6.168165 3.597761 4.141655 2.312558 6.881271 3.847549 10.845657 7.807906 6.63954 6.643569 6.389752 19.556024 5.753194 23.858833a10.080176 10.080176 0 1 0-0.132952 1.490673c-0.012087 0.838-1.543048 84.533271-14.451475 134.043774-4.584828 17.593976-8.45655 16.824466-11.852869 16.139562-7.803877-1.567222-9.423474-1.889529-9.423473-12.12683V822.851747c0-4.955482-3.609847-9.181743-8.508925-9.951252-72.245288-11.329118-107.489643-44.14005-124.322166-69.674883a10.080176 10.080176 0 0 0-8.412233-4.524396h-132.641736c-4.496193 0-8.460579 2.981347-9.68132 7.316387-8.9803 31.638537-21.385121 53.579639-31.328315 71.213902-8.899723 15.752792-15.930062 28.205959-17.251524 41.541443-4.886992 49.252657-12.251724 93.082485-17.029937 112.944702-3.331857 13.851177-5.471174 13.851177-9.01656 13.851177-2.675155 0-3.392289-0.265904-3.505097-0.322308a0.572096 0.572096 0 0 1 0.112808 0.080577c-0.080577-0.080577-1.929818-1.929818-3.315741-12.517628-3.339914-25.607353-2.171549-86.297906-1.317433-130.607168 0.310221-16.272514 0.584183-30.313046 0.584182-40.022568 0-22.078083 2.292414-45.666983 6.462271-66.403459a10.072118 10.072118 0 0 0-6.438098-11.449984c-97.151621-35.280615-104.818517-123.129627-105.092478-126.82408 0.016115 0.241731 0.024173 0.467346 0.024173 0.705048v-112.058355a10.088233 10.088233 0 0 1-3.593732 7.699127z" fill="#6E6E96" ></path><path d="M492.476207 960.63832h-39.575366c0.318279 5.064261 0.701019 9.68132 1.192539 13.476494 2.505943 19.161197 7.433223 21.538217 16.691513 21.538217 8.448493 0 14.181542-2.304501 18.810688-21.570448a361.750188 361.750188 0 0 0 2.884654-13.45232l-0.004028 0.008057z" fill="#3F3F3F" ></path><path d="M482.404089 960.63832l10.072118-10.072117H442.17605l0.672817 10.704646c0.366625 5.821684 0.777568 10.454858 1.261029 14.149312 2.37702 18.186216 7.824021 30.30096 26.674997 30.300959 15.519119 0 23.536525-8.214819 28.604815-29.28569 0.813827-3.38826 1.784779-7.916685 2.969261-13.847147l-19.95488-1.949963z m20.144236 10.064061v-10.072118l-19.950852-1.970106a353.769042 353.769042 0 0 1-2.79602 13.065551c-3.327828 13.851177-5.471174 13.851177-9.01656 13.851176-2.671126 0-3.384232-0.265904-3.497039-0.322307a0.725192 0.725192 0 0 1 0.112808 0.080577c-0.080577-0.080577-1.929818-1.929818-3.315741-12.509571a202.703388 202.703388 0 0 1-1.128078-12.811734l-10.051973 10.700618h39.575365c-0.004029-0.004029 10.068089-0.004029 10.06809-0.012086z" fill="#6E6E96" ></path><path d="M863.798935 945.99749h-44.889415v18.891264c0 18.359457 8.754685 20.228842 17.513399 22.001535 10.34608 2.070827 17.980745-1.953991 23.584871-23.472064 1.385923-5.318078 2.634866-11.196166 3.783088-17.412677v-0.008058h0.008057z" fill="#3F3F3F" ></path><path d="M875.885477 947.109452v-13.186417h-69.062498v30.973777c0 28.375171 18.38363 32.073652 27.230978 33.850374 27.790988 5.559809 35.208095-22.916083 37.653605-32.275095a256.049353 256.049353 0 0 0 4.177915-19.362639z m-24.173083-1.103904l0.205471-2.195722a234.88179 234.88179 0 0 1-3.605818 16.562591c-4.109424 15.744735-7.110915 15.148465-9.504051 14.669032-7.509771-1.510818-7.807906-1.575279-7.807906-10.152695v-18.891264l-12.086541 12.086541h44.889415l-12.09057-12.078483zM239.666046 51.649821l0.008058-0.016116c-2.348818 4.177915-56.419976 103.182805 45.731444 179.279671a10.072118 10.072118 0 0 1-12.030137 16.155677C156.740285 160.182935 221.487888 42.874992 222.152648 41.698568a10.072118 10.072118 0 0 1 17.513398 9.951253z" fill="#6E6E96" ></path><path d="M156.937698 53.837485v-0.056404c-0.012087 2.018452 0.423029 49.607195 59.445641 65.114228a10.072118 10.072118 0 1 1-5.124694 19.483505C136.600078 118.762357 136.785405 54.159793 136.793463 53.511148a10.072118 10.072118 0 0 1 20.144235 0.326337zM140.620867 125.651686l-0.004028-0.016116c0.128923 0.370654 13.347571 37.210433 42.036991 50.775561 13.536927 6.401838 28.782084 6.599252 45.300358 0.580154a10.072118 10.072118 0 1 1 6.893357 18.927524c-21.80815 7.948915-42.310953 7.489627-60.928256-1.353692-36.332144-17.259581-51.690109-60.468967-52.322638-62.302093a10.072118 10.072118 0 1 1 19.024216-6.611338zM267.775313 109.56047c1.091818 1.08376 26.691113 26.896584 26.759603 62.201372 0.03626 21.155477-8.956127 40.896828-26.731401 58.672101a10.06406 10.06406 0 0 1-14.241975 0 10.06406 10.06406 0 0 1 0-14.241975c45.558204-45.558204 1.8855-90.467763 0.004029-92.357292l0.024173 0.020144a10.068089 10.068089 0 1 1 14.185571-14.29435z" fill="#6E6E96" ></path><path d="M378.858687 202.497917c88.477513 0 160.207108 71.725566 160.207108 160.207108 0 88.473484-71.729595 160.211137-160.207108 160.211136-191.716722 0-264.433384-160.211137-175.955871-160.211136 81.406886 0 5.249588-160.207108 175.955871-160.207108z" fill="#F2C349" ></path><path d="M369.282118 208.472697c43.406799 0 81.668761 21.993477 104.254478 55.440966a124.922464 124.922464 0 0 1 15.253215 31.159104c4.028847 12.308128 6.208453 25.454256 6.208454 39.112048 0 69.429123-56.718111 117.972703-125.716147 125.716148-108.432393 12.171147-271.189761-78.260356-158.591541-94.770572 10.015714-1.4665 42.375415 19.680918 48.797397 15.035657 6.385723-4.617059-27.521055-13.045407-13.037349-41.891953 23.419689-46.645993 16.151648-129.797369 122.831493-129.801398z" fill="#FFD569" ></path><path d="M276.002219 381.632549s-1.595423 33.656989-24.003871 21.078928-72.938249-4.866847-51.524927 16.538418c0 0-34.055845-14.934936-34.055845-51.230821l58.285332-10.789253c0 0.004029 31.026152 24.402727 51.299311 24.402728z" fill="#F2C349" ></path><path d="M261.103542 306.885347c12.078484-46.368002 24.56791-94.319341 117.759174-94.319341 82.784752 0 150.13499 67.350238 150.13499 150.13499 0 82.784752-67.350238 150.13499-150.13499 150.13499-131.497543 0-203.227138-78.280501-203.227138-118.496453 0-6.63954 1.982193-11.792436 5.890175-15.321706 4.524395-4.085251 11.91733-6.240684 21.385121-6.240684 41.033808 0 49.756263-33.495835 58.192668-65.891796z m-19.491562-5.076347c-8.698281 33.395114-14.370898 50.823907-38.705135 50.823907-14.741552 0-26.477584 3.847549-34.881759 11.433868-8.198704 7.405021-12.533744 17.875995-12.533744 30.276787 0 56.528755 87.01907 138.644718 223.371374 138.644717 93.892283 0 170.279226-76.382914 170.279226-170.283254 0-93.892283-76.386942-170.279226-170.279226-170.279226-108.762758 0-125.232686 63.22067-137.250736 109.383201z" fill="#6E6E96" ></path><path d="M160.88194 360.074187m-28.886834 0a28.886834 28.886834 0 1 0 57.773668 0 28.886834 28.886834 0 1 0-57.773668 0Z" fill="#BABADB" ></path><path d="M179.696656 360.074187a18.834861 18.834861 0 0 1-18.814716 18.814717c-10.374281 0-18.814716-8.440435-18.814716-18.814717s8.440435-18.814716 18.814716-18.814716a18.834861 18.834861 0 0 1 18.814716 18.814716z m-18.814716-38.958952c-21.481813 0-38.958952 17.477139-38.958952 38.958952 0 21.485842 17.477139 38.958952 38.958952 38.958953s38.958952-17.477139 38.958952-38.958953-17.477139-38.958952-38.958952-38.958952z" fill="#6E6E96" ></path><path d="M760.676563 613.037444a17.698726 11.25257 0 1 0 35.397451 0 17.698726 11.25257 0 1 0-35.397451 0Z" fill="#FFF7E0" ></path><path d="M635.85482 640.377201a31.042267 16.087187 0 1 0 62.084535 0 31.042267 16.087187 0 1 0-62.084535 0Z" fill="#FFF7E0" ></path><path d="M599.820811 580.053272a11.260628 5.624271 0 1 0 22.521255 0 11.260628 5.624271 0 1 0-22.521255 0Z" fill="#FFF7E0" ></path><path d="M694.720306 583.268292a13.677936 5.624271 0 1 0 27.355872 0 13.677936 5.624271 0 1 0-27.355872 0Z" fill="#FFF7E0" ></path><path d="M574.742068 633.048385a20.974178 9.01656 17.215 1 0-40.069108-12.414957 20.974178 9.01656 17.215 1 0 40.069108 12.414957Z" fill="#FFF7E0" ></path><path d="M523.460681 577.200194a13.66585 9.653118 18.844 1 0-25.866761-8.827936 13.66585 9.653118 18.844 1 0 25.866761 8.827936Z" fill="#FFF7E0" ></path><path d="M334.88382 319.116927m-34.414412 0a34.414413 34.414413 0 1 0 68.828825 0 34.414413 34.414413 0 1 0-68.828825 0Z" fill="#F2C349" ></path><path d="M503.861729 203.158648c93.565947-13.613475 148.857845 18.69788 148.857845 18.697879l-1.252971 0.644616c2.618751 1.647798 4.343097 3.706539 4.915193 6.2568 4.435761 19.825957-61.524525 59.828381-100.096708 70.025392-63.925718 16.901014-89.39609-11.244512-102.872584-31.058383-1.0475-1.53902-0.495548 1.772693 0 0-16.4941-21.800092-15.97035-54.905129 50.449225-64.566304z" fill="#F2C349" ></path><path d="M437.135962 229.406587c-5.66053 13.80283-2.65501 29.982681 8.243021 44.393867a10.068089 10.068089 0 0 1-1.663914-8.790945c0.97901-3.513155 4.794328-7.090771 9.931109-6.804722 4.57677 0.253817 8.416262 3.609847 9.129367 7.977117 0.717135 4.375328-1.857299 8.786916-6.119819 10.48306-4.778213 1.905645-9.524195-0.269933-11.570849-3.275452 16.139562 23.72991 45.489713 53.18884 113.782702 35.135576 35.220182-9.314695 114.262135-51.009234 107.348633-81.962867-0.785625-3.545386-3.061924-8.609646-9.371098-12.58209a10.056003 10.056003 0 0 1 4.689578 8.960156 10.092262 10.092262 0 0 1-5.455059 8.521012l1.273115-0.656702a10.072118 10.072118 0 0 0 0.451231-17.638293c-2.385078-1.389952-59.441611-33.926922-155.384578-19.970995-35.586807 5.169011-57.544024 17.356274-65.283439 36.211278z m24.310064 32.238835c-3.07401-4.061078-9.778012-14.588456-5.672617-24.592083 4.705694-11.470128 22.29564-19.966967 49.538705-23.927323 88.509744-12.876196 141.823478 17.134687 142.327084 17.428792a10.060031 10.060031 0 0 1 0.447202-17.638292l-1.212683 0.6285a10.072118 10.072118 0 1 0-0.773539 17.481168c0.543894 0.338423 0.721164 0.547923 0.725193 0.547923a1.438298 1.438298 0 0 1-0.265904-0.616414c-0.032231-0.14101-0.032231-0.221587-0.032231-0.221586-0.169212 10.922205-52.221917 47.584714-92.796437 58.313534-55.312043 14.624715-78.216039-6.740261-91.98261-26.98119-3.364087-4.951453-8.726483-5.632328-12.54583-4.109424-4.520367 1.800895-7.114944 6.522704-6.301117 11.478186 0.813827 4.96354 4.778213 8.617704 9.637003 8.887636 4.109424 0.229644 8.976272-2.119174 10.583781-7.880425a10.120464 10.120464 0 0 0-1.676-8.799002z" fill="#6E6E96" ></path><path d="M332.700185 321.300562m-14.100965 0a14.100965 14.100965 0 1 0 28.20193 0 14.100965 14.100965 0 1 0-28.20193 0Z" fill="#6E6E96" ></path><path d="M444.3758 773.333186s-24.132795-24.930506-24.132794 24.132795v159.119319h-22.239237V712.05845l52.048677 19.74538-5.676646 41.529356z" fill="#6E6E96" opacity=".15" ></path><path d="M248.025904 346.283444l0.044318-0.064462c-1.341606 2.070827-4.673463 9.056848-2.501915 13.851177 2.163491 4.778213 9.951253 8.375973 21.933044 10.13255a10.072118 10.072118 0 1 1-2.928971 19.930707c-19.668832-2.884655-32.267037-10.27356-37.448135-21.953188-6.973934-15.724591 3.001491-31.376662 4.161799-33.109066a10.072118 10.072118 0 1 1 16.73986 11.212282z" fill="#6E6E96" ></path><path d="M562.36059 286.426861s104.762113-32.275095 0-46.37606c-104.766142-14.100965-94.597332 27.734584-77.357895 44.97805 0 0-72.221114-26.31643-27.408247-59.079015 44.812867-32.762585 154.18801-30.663556 188.928759 4.782242 34.740749 35.445797 0.427058 5.289876 0.427058 5.289876s-53.265389 50.404907-84.589675 50.404907z" fill="#6E6E96" opacity=".15" ></path><path d="M368.975925 380.053241c0 8.343743-13.9801 7.050483-31.223565 7.050482-17.243466 0-31.223566 1.29326-31.223566-7.050482s13.9801-15.108177 31.223566-15.108177c17.243466 0 31.223566 6.764434 31.223565 15.108177z" fill="#FFFFFF" opacity=".43" ></path></symbol><symbol id="icon-a-doganimal" viewBox="0 0 1024 1024"><path d="M887.399034 739.691181c-33.049859 62.563137-77.449114 114.69437-174.751587 92.246171l27.496416-70.262781s28.684707 17.525277 81.838517-56.443841c0 0 39.480375-93.123244 77.622912-31.384634-0.004042 0.008084 12.335596 20.714263-12.206258 65.845085z" fill="#D4A5A5" ></path><path d="M745.636679 795.868262s30.693486 22.682623 72.061385-18.685275c41.367899-41.363857 76.45483-95.568537 64.672961-110.005874 0 0 51.440083 44.609429-43.320092 139.357479 0 0-87.743598 45.227825-117.382172 26.522341-29.634532-18.705485-2.780764 2.780764-2.780763 2.780763l26.748681-39.969434z" fill="#C29797" ></path><path d="M879.052701 735.277527c-30.661151 58.036313-71.7825 108.801415-164.287347 87.468755a9.425495 9.425495 0 0 1 6.656857 12.630648l27.500458-70.262781a9.376993 9.376993 0 0 1-5.775743 5.504942 9.417411 9.417411 0 0 1-7.934068-0.889197c3.694212 2.263412 37.786858 19.808898 94.416622-58.99018a8.851558 8.851558 0 0 0 1.026619-1.826897c7.440968-17.452525 24.840949-45.591588 39.920932-46.73542 6.794278-0.51331 13.851274 5.088636 20.989106 16.640122a9.453788 9.453788 0 0 0 6.567937 4.357068c-2.97477-0.460766-5.399855-2.049196-6.794278-4.728915 0.113171 0.181881 8.823266 18.010294-12.287095 56.831855z m28.575579-66.382646c-11.143263-18.050712-24.097256-26.635511-38.48609-25.524014-31.315924 2.39275-53.428653 52.478828-55.83757 58.18586 0.262717-0.638606 0.614355-1.261044 1.026619-1.822855-45.862389 63.808014-69.446336 53.776248-69.668635 53.650952 0 0.004042 0.141463 0.076794 0.420348 0.242509a9.498247 9.498247 0 0 0-7.930026-0.89324 9.457829 9.457829 0 0 0-5.783827 5.5009l-27.496416 70.262781a9.449746 9.449746 0 0 0 0.432473 7.837064c1.277211 2.429126 3.556791 4.171145 6.224384 4.793584 105.224415 24.275096 152.675234-35.438568 185.215826-97.039755 27.116486-49.851653 13.354132-74.931068 9.514415-77.79671a9.43762 9.43762 0 0 0-4.563201-1.810729c2.8616 0.331428 5.416022 1.960277 6.9317 4.413653z" fill="#6E6E96" ></path><path d="M698.137358 678.178913c-62.110455-89.663456-81.721305-109.702738-113.13019-157.905333-22.767501-34.953551-28.17544-42.725947-5.185639-54.099593 55.92649-27.674256-90.136348-50.102245-90.136348-50.102245-46.84859-46.836465-213.326597 91.264012-158.487353 87.901228 38.70839-2.368499 60.441189 30.208469 51.023777 39.617797-1.487385 1.471218-2.546339 3.395118-3.326408 5.622154-5.533234 4.425779-11.171556 10.189397-16.898797 17.537403 0 0-48.117718 75.868768 0 160.989232 48.105592 85.13259 38.853895 225.779406 38.853895 225.779406l62.922859 9.251697s41.763996-67.300136 8.641384-158.600524c45.729009 54.94433 135.404591 191.638258 170.859326 196.710726 53.885377 7.69156 129.956235-29.565821 129.956235-144.320818 0-86.098582-25.859484-107.358489-75.092741-178.38113z" fill="#D4A5A5" ></path><path d="M670.39035 657.230225s73.067795 91.757113 63.739304 187.693454c-9.344659 95.940383-38.360794 75.614134-38.360795 75.614134s42.232846 37.697938 25.802899 59.657078c0 0 93.761849-64.584041 46.876883-176.020714-46.889008-111.432631-98.05829-146.943951-98.058291-146.943952zM371.316808 722.460956s-38.348669-102.783163 36.727904-143.548834c75.088699-40.757586 157.432442-87.812309 262.345638 78.314061l-122.794152-183.991158-169.109223 37.706021s8.613092 23.822413-16.506742 55.809278c-25.123875 31.970697-32.722473 113.655625 9.336575 155.710632z" fill="#BA9191" ></path><path d="M477.737598 813.470334s22.83217 83.564369 3.649752 121.747324L433.786984 911.427579s45.049986-27.876346 8.584799-124.431084c0 0-6.026335-19.214753 2.538255-26.441504 3.952888-3.330449 11.013925-11.478733 23.199975 0.7154l31.10575 31.101708c15.015315 15.007231-47.757997-118.13799-16.373362-165.984906 0 0 62.498469 192.806341 51.775553 259.298114" fill="#C29797" ></path><path d="M706.960624 672.063658c-31.465471-45.397581-52.159525-73.144589-68.791563-95.41899-16.086394-21.595377-28.814045-38.643721-44.185039-62.227667l-0.776027-1.200417c-8.940478-13.725978-18.192175-27.932931-17.440399-31.550349-0.008084 0.008084-0.008084 0.028293-0.016167 0.036376 0.040418-0.084878 0.921532-2.000695 8.815182-5.913164 13.810856-6.830655 20.055449-15.298241 18.527645-25.152168-3.674003-23.701159-62.817771-37.637311-111.796394-45.151031 2.263412 0.347595 4.340901 1.406549 5.957624 3.011147-21.227573-21.235656-62.81373-15.629669-114.063847 15.379077-22.848337 13.81894-80.496637 54.996874-72.934416 79.231552 1.192333 3.811424 5.674698 12.561938 21.591336 11.591903 19.784647-1.224668 31.518014 8.394834 35.640658 12.586189 4.846127 4.926963 6.272885 9.243614 6.179923 10.460197a3.209195 3.209195 0 0 1 0.96195-1.729893c-2.522088 2.518046-4.482364 5.763617-5.856579 9.635669a10.791626 10.791626 0 0 1 3.423411-4.813793c-6.337554 5.052259-12.618523 11.551486-18.67315 19.323882a13.095456 13.095456 0 0 0-0.598188 0.832612c-2.105782 3.330449-50.975276 82.331618-0.274843 172.035492 45.955351 81.300957 37.588809 218.415233 37.495848 219.805614a10.730999 10.730999 0 0 0 9.142569 11.308978l62.922858 9.247655a10.714832 10.714832 0 0 0 10.674413-4.955256c1.814772-2.938394 44.12037-72.83337 9.603335-167.912848a10.71079 10.71079 0 0 1-4.74104 12.953992 10.71079 10.71079 0 0 1-13.584515-2.441251c12.598314 15.124443 28.862547 36.950204 46.096814 60.057217 61.33847 82.226531 103.611734 136.427169 131.504247 140.408348 32.576968 4.648079 67.368847-5.88083 93.054533-28.183523 22.419906-19.437052 49.144337-57.215826 49.144336-126.759165 0-76.972181-20.261581-105.16783-57.029903-156.345196a1790.241814 1790.241814 0 0 1-19.974612-28.151189z m55.538476 184.496385c0 48.631027-14.417127 86.874609-41.72762 110.559601-21.078026 18.281095-49.475765 26.942688-75.981938 23.155515-21.138653-3.015188-79.033503-80.630017-117.325587-132.005432-17.412106-23.325271-33.850137-45.389498-46.808172-60.946414a10.722915 10.722915 0 0 0-18.321513 10.516783c30.992579 85.419559-7.279295 148.657678-7.67135 149.296283a10.767375 10.767375 0 0 1 10.670371-4.967381l-62.918816-9.231488a10.698664 10.698664 0 0 1 9.138526 11.321103c0.388014-5.884872 8.90006-144.854337-40.228109-231.773407-44.435631-78.637406-0.723484-149.284158-0.274843-149.98339a9.930721 9.930721 0 0 1-0.602229 0.860905c5.019925-6.450725 10.10856-11.737409 15.132527-15.74284 1.572263-1.261044 2.764596-2.934352 3.431494-4.817835 0.436515-1.236793 0.788152-1.600556 0.792194-1.600556 6.03846-6.018251 6.988285-15.484164 2.566548-25.317881-7.921943-17.59803-31.716063-34.440241-61.83157-32.585052-2.081531 0.13338-2.885851-0.084878-2.897976-0.084878 1.782437 0.501184 3.617418 3.350658 3.314282 5.189681 1.936026-11.842496 56.678266-60.57861 106.578421-76.648837 14.708137-4.74104 34.383656-8.245287 44.564969 1.940068 1.616723 1.608639 3.698254 2.671635 5.957624 3.01923 45.41779 6.988285 89.388613 20.107992 94.101361 28.074395-0.428432-0.723484-0.408223-2.295747 0.048501-3.003063-0.004042 0.020209-1.240835 1.891566-7.137832 4.801667-8.390792 4.142853-17.327229 9.700338-20.002905 19.441094-3.451704 12.63469 4.458114 24.764154 20.176703 48.922037l0.771985 1.192333c15.746882 24.170009 28.636206 41.468944 44.961066 63.35129 16.522909 22.145063 37.099751 49.726357 68.342922 94.828886 7.251003 10.452114 14.122075 20.002905 20.176703 28.446241 35.289021 49.071584 53.004263 73.730651 53.004263 143.791342z" fill="#6E6E96" ></path><path d="M671.429095 906.112602s15.172945-151.462692-21.906597-226.737314c0 0 35.55578 137.611418-47.192143 250.260634 0.012125 0.004042 42.835075-26.74464 69.09874-23.52332z" fill="#BA9191" ></path><path d="M505.116802 602.819413c55.473807-55.485933 152.974328 22.189523 152.974328 150.816003 0 120.312482-44.427547 161.0054-44.427547 161.0054 0 96.239477-62.914775 90.690075-62.914775 90.690075l-22.201648-66.61707c22.201648-138.787584-22.917048-235.621207-22.917049-235.621207s-29.129306-71.661246-0.513309-100.273201z" fill="#D4A5A5" ></path><path d="M544.706306 834.313935s-0.101045 35.656825 35.660867 35.656825 93.782058-222.845054-40.333197-274.095172c0 0 124.277495-3.346617 118.049071 157.767912-6.236509 161.134737-55.740566 175.996463-55.740567 175.996463s-25.330007-24.614607-65.465155-12.307303l7.828981-83.018725z" fill="#C29797" ></path><path d="M512.695191 610.401844c19.703811-19.707853 41.565948-16.5027 56.427674-10.355111 38.874104 16.090435 78.229183 74.021662 78.229183 153.600809 0 113.012978-40.599956 152.768196-41.008179 153.156209l-3.342574 3.164736c-0.076794 0.072753-0.076794 4.680413-0.076795 4.680413 0 32.083868-7.162083 55.029208-21.324576 68.237835-13.68556 12.743819-29.355647 11.80612-30.022545 11.745492l9.332533 7.307588-22.20569-66.613029 0.420348 5.092678c22.468408-140.420474-21.890429-237.779532-23.790079-241.849632l0.214216 0.485017c-7.323755-18.107297-22.136979-69.361458-2.853516-88.653005z m-16.79371 97.225678l-0.008084-0.012125c0.440557 0.933658 43.425179 95.827213 22.044018 229.404907l-0.416306 2.606966 0.836654 2.493795 22.209732 66.61707 2.227036 6.660899 7.00041 0.618396c1.018535 0.084878 25.204711 1.984527 45.999811-17.044302 18.976286-17.367647 28.591746-45.733051 28.591746-84.32827l-3.479996 7.913859c1.956235-1.790521 47.895418-45.316745 47.895418-168.915217 0-93.119202-47.410401-155.160946-91.474186-173.409707-29.109097-12.060753-58.197985-6.592188-79.793363 15.011273-32.706306 32.690139-5.108845 103.87041-1.851148 111.893397l0.097004 0.250593 0.121254 0.238466z" fill="#6E6E96" ></path><path d="M471.359626 939.041207c8.128075 21.255865-10.391487 45.235909-41.371941 53.594367-30.984496 8.330165-62.910733 7.226752-71.042849-14.037197-8.119991-21.259907 10.638037-54.649278 41.602324-62.979444 30.988538-8.334207 62.676308 2.166409 70.812466 23.422274z" fill="#D4A5A5" ></path><path d="M461.344027 942.860716c1.980486 5.197764 1.527803 10.678455-1.345922 16.32486-5.274559 10.351069-17.537403 18.976286-32.799267 23.082762-24.990495 6.721526-52.68496 6.992327-58.238404-7.497553-2.324039-6.086962-1.159999-14.720263 3.104109-23.082762 6.398181-12.54577 18.09113-22.165272 31.267422-25.701854 25.325965-6.826613 51.900849 0.91749 58.012062 16.874547z m-63.581673-37.596893c-18.952035 5.100761-35.701285 18.80653-44.803435 36.671319-7.085288 13.895734-8.556506 28.644289-4.033724 40.49891 9.356784 24.461019 40.696959 32.152578 83.847295 20.564717 21.344785-5.763617 38.227415-18.176008 46.335281-34.076479 5.581736-10.961382 6.398181-22.92109 2.275538-33.712716-10.217689-26.651678-46.941552-39.807762-83.620955-29.945751z" fill="#6E6E96" ></path><path d="M612.738009 944.230888c8.216995 25.637185 2.643342 46.024061-31.03704 56.831855-33.672298 10.7795-82.703464 7.905775-90.908333-17.739493-8.233162-25.633143 12.412391-55.186839 46.080647-65.99059 33.692507-10.799709 67.663898 1.228709 75.864726 26.898228z" fill="#D4A5A5" ></path><path d="M508.649342 948.604124s-9.785216 27.900597 35.968044 20.738514c45.777511-7.145916 47.499321-39.698633 47.499321-39.698633s59.560075 41.626575-10.415738 71.410654c-69.967729 29.792163-107.297862-15.156778-73.051627-52.450535z" fill="#C29797" ></path><path d="M602.52032 947.50071c6.204174 19.384509 4.482364 34.161357-24.093215 43.344344-30.204427 9.663962-71.855253 6.584104-77.432947-10.791626-3.031356-9.457829-0.181881-18.216426 2.744388-23.899208 6.527519-12.703401 20.128201-23.381856 36.404559-28.611955 16.284442-5.20989 33.579336-4.433863 46.254445 2.10174 5.694907 2.926269 13.099498 8.398876 16.12277 17.856705z m-68.912817-40.377656c-21.890429 7.02062-39.730967 21.308409-48.922038 39.2217-6.757902 13.135874-8.208911 27.443873-4.094351 40.25236 11.009883 34.387698 67.708358 36.416685 104.403928 24.671193 35.903376-11.519151 49.023083-35.822539 37.980865-70.307241-4.126685-12.848906-6.822571-24.226594-19.958445-30.988538-17.909249-9.215321-47.495279-9.870094-69.409959-2.849474z" fill="#6E6E96" ></path><path d="M381.259655 939.016957s-19.695728 34.622123 21.7813 28.898923c41.472986-5.719158 41.472986-40.284695 41.472986-40.284695s40.713126-8.221036 7.153999 44.20929c-26.752723 33.078152-129.054912 25.802899-70.408285-32.823518zM417.813761 273.016009C358.447693 361.365878 285.687076 383.256307 236.352774 350.101361c-49.334302-33.150905-56.565095-108.789289 2.800973-197.135116 59.366068-88.353911 185.236035-158.992579 220.553348-135.259087 35.313272 23.729452 17.476775 166.958982-41.893334 255.308851z" fill="#C29797" ></path><path d="M401.104929 274.167924c-36.723862 44.492216-77.792668 70.982222-115.636111 74.603682-22.04806 2.105782-42.204553-3.791215-58.294989-17.080678-44.985317-37.136127-35.535571-110.143295 23.515236-181.683286C301.999811 87.836559 393.514415 39.17724 443.543907 34.39174c12.016294-1.143832 21.134611 0.286968 25.685687 4.041807 4.547033 3.758881 7.687518 12.436642 8.835391 24.452935 4.789542 50.033534-25.645268 149.106318-76.960056 211.281442z m80.989738-251.319587c-8.968771-7.396508-22.581578-10.2864-40.47466-8.572673-55.106003 5.270517-151.248476 55.898197-206.520193 122.870946-77.085352 93.385961-65.986548 172.827686-20.7951 210.129528 20.310082 16.761375 45.583504 24.238719 73.083963 21.611544 43.223089-4.126685 89.142063-33.20749 129.301462-81.858726 55.2798-66.968708 86.76548-170.964413 81.499005-226.074458-1.717768-17.880956-7.129748-30.705611-16.094477-38.106161z" fill="#6E6E96" ></path><path d="M318.652057 89.049102S218.96896 238.329218 247.730462 350.744008L369.506078 298.608734 318.652057 89.049102z" fill="#B08989" ></path><path d="M738.005747 252.241119c-15.411412 146.139632-56.880356 201.083962-223.544286 226.858568-129.422716 20.006947-244.391929 57.482585-278.411823-13.895734-56.581262-122.357637 69.074489-88.62067 42.746156-170.006504-20.112034-199.018599 109.100508-287.958571 245.782311-285.020178 136.685844 2.942436 228.099403 102.924627 213.427642 242.063848z" fill="#D4A5A5" ></path><path d="M541.735577 226.539266l57.846349 223.253276s-235.301904 76.61246-317.973034 54.883703c0 0-64.858884-33.652089-58.715337-77.736083L324.799646 381.384951s-17.270643 25.071332-22.290568 46.844548c-3.775048 16.389529 42.483438-23.846664 61.960908 1.936026 6.616439 8.758597-0.084878 26.740598-0.084878 26.740598s115.401686-9.676087 126.912754-51.423916c26.376835-95.669582 15.864094-144.36932 50.437715-178.942941" fill="#BA9191" ></path><path d="M223.964634 393.453788s0.214216 36.166093 30.507563 40.389781c30.297389 4.227731 91.898576-45.08232 80.217752-119.68196-24.828823-158.539897 113.716252-361.57201 298.794657-239.840854 0 0 86.559348-6.883198-57.163282-59.066974-65.94613-23.947709-183.101961-5.856579-240.532003 69.167451-96.906375 126.601535-1.099372 229.740377-111.824687 309.032556z" fill="#DBB1B1" ></path><path d="M727.953772 251.182166c-14.60305 138.545076-49.289842 192.301115-215.036282 217.930215-22.896839 3.540623-45.243993 7.610723-66.859578 11.535319-98.430137 17.909249-176.174303 32.055575-200.889956-19.792731-28.284569-61.164672-8.309956-76.394203 14.813224-94.044776 18.798446-14.336291 42.188386-32.180871 28.426032-74.724936l0.440557 2.097698c-8.584799-84.979002 10.633995-155.609587 55.582936-204.264865 42.940162-46.480786 106.837096-71.212605 179.933184-69.6363 64.090941 1.378256 119.807256 25.305756 156.862547 67.380972 36.832991 41.832707 53.440778 99.905396 46.727336 163.519404zM524.796362 0.076794C445.835612-1.624807 376.506489 25.410843 329.585146 76.204238c-48.990748 53.028514-70.028356 129.099372-60.845369 220.007704l0.109129 1.075121 0.331428 1.022577c9.356784 28.931258-2.897976 38.288042-21.453914 52.442452-24.941994 19.028829-55.991159 42.705737-20.851684 118.695759 31.412927 65.913796 120.102308 49.770817 222.800593 31.089583 21.482207-3.908428 43.69598-7.950235 66.330102-11.45044 163.369857-25.261297 215.420253-78.148347 232.052291-235.78288 7.307588-69.30083-11.042218-132.870378-51.674508-178.999526C655.548833 27.936973 594.606461 1.580347 524.796362 0.076794z" fill="#6E6E96" ></path><path d="M751.606429 315.814708c-11.167514 105.850895-65.250939 159.231046-124.370457 152.998579-59.10335-6.232467-100.863305-69.713095-89.699833-175.568031 11.171556-105.854937 89.400739-227.15362 131.706338-222.695507 42.325808 4.466197 93.531466 139.414064 82.363952 245.264959z" fill="#BA9191" ></path><path d="M722.970223 271.714547c-8.904102 84.445483-53.808583 126.831918-103.130759 121.630112-49.306009-5.193723-84.37273-56.019451-75.476712-140.464934 8.904102-84.445483 73.678108-180.955761 108.979254-177.233257 35.321355 3.726546 78.532319 111.626638 69.628217 196.068079z" fill="#D4A5A5" ></path><path d="M741.558496 314.755755c-9.728631 92.250213-55.243424 150.124854-113.255487 144.001516-58.016104-6.119296-90.443525-72.20689-80.718936-164.457104 4.96334-46.990053 24.671193-102.504279 52.749629-148.512172 28.506868-46.703085 55.154504-66.528151 67.849821-65.190313 32.888187 3.467871 84.239351 131.112192 73.374973 234.158073z m-71.253024-254.253939c-35.268812-3.726546-72.74445 51.039944-87.210079 74.75727-29.56178 48.424895-50.348795 107.09173-55.599103 156.919132-12.711484 120.425653 40.414033 180.531371 98.688812 186.683003 58.278822 6.147589 122.769901-41.557864 135.477344-161.983517 11.29281-107.188733-39.920932-250.951783-91.356974-256.375888zM239.695349 482.434179a10.104519 10.104519 0 0 1-2.43721-19.913986l91.700527-22.860463a10.104519 10.104519 0 1 1 4.890587 19.61085l-91.700527 22.860463a10.064101 10.064101 0 0 1-2.453377 0.303136z" fill="#6E6E96" ></path><path d="M400.175313 215.561717a32.407212 24.044712 90 1 0 48.089425 0 32.407212 24.044712 90 1 0-48.089425 0Z" fill="#6E6E96" ></path><path d="M702.770885 940.818522a43.809151 51.015694 62.276 1 0-90.318065 47.466315 43.809151 51.015694 62.276 1 0 90.318065-47.466315Z" fill="#D4A5A5" ></path><path d="M410.255581 871.926995v72.16243s46.294862 21.259907 46.294863-85.819698l-46.294863 13.657268zM544.617386 832.769964l-3.128359 114.003221 47.091099-9.166819s36.22672-74.773438 33.195364-159.825192-77.158104 54.98879-77.158104 54.98879z" fill="#D4A5A5" ></path><path d="M704.280906 947.217784c6.078878 19.618933-8.673719 42.111592-32.851811 50.154789-18.551896 6.147589-35.446651 6.822571-45.179324 1.814771-4.704664-2.417001-7.780479-6.151631-9.417411-11.430231-6.155673-19.926111 8.778806-53.218479 33.082194-61.281885 13.220752-4.389403 27.039692-3.678045 37.968739 1.936026 5.74745 2.946478 13.249045 8.605008 16.397613 18.80653z m-61.100004-41.105182c-36.166093 11.992043-55.991159 58.404118-46.832422 87.99419 3.330449 10.775459 10.278316 19.121791 20.091824 24.165967 15.197196 7.820897 37.128043 7.622849 61.742651-0.549686 35.192017-11.692949 56.096246-46.169566 46.585873-76.867094-4.183271-13.503679-13.806814-24.711611-27.084152-31.534182-16.009599-8.221036-35.879125-9.393161-54.503774-3.209195z" fill="#6E6E96" ></path><path d="M624.810888 947.630048s-9.736714 38.510341 26.542549 26.534466c36.291389-11.971834 39.128738-48.5704 25.758439-49.467681-13.386466-0.925574 57.523004-9.502289 33.510625 45.979601s-134.713442 53.828792-85.811613-23.046386z" fill="#BA9191" ></path><path d="M624.810888 947.630048s45.033819-51.549212 49.524266-96.461776l36.816824 67.748776c0-0.004042-53.727746 93.822476-86.34109 28.713z" fill="#D4A5A5" ></path><path d="M717.2834 911.896429s-13.30563 20.601093-43.772774 51.068237l18.669108 21.470081s40.567621-12.844864 53.319524-49.006915l-28.215858-23.531403z" fill="#BA9191" ></path><path d="M453.135116 901.674698l-8.641384 26.510215s-2.421043 20.940604-15.399286 29.49711c0 0 29.456693 5.193723 32.682055-3.787173 3.225362-8.976854 11.11497-54.992832 11.11497-54.992832l-19.756355 2.77268z" fill="#C29797" ></path><path d="M470.716979 296.462534c0 13.063122-18.273011 10.650163-40.818214 10.650163s-40.818213 2.425084-40.818213-10.650163c0-13.067163 18.273011-23.660741 40.818213-23.66074 22.545202-0.004042 40.818213 10.589536 40.818214 23.66074z" fill="#FFFFFF" opacity=".21" ></path><path d="M138.132811 767.341185m-42.438978 0a42.438978 42.438978 0 1 0 84.877956 0 42.438978 42.438978 0 1 0-84.877956 0Z" fill="#00A33D" opacity=".44" ></path><path d="M809.072847 508.665509m-22.229941 0a22.229941 22.229941 0 1 0 44.459882 0 22.229941 22.229941 0 1 0-44.459882 0Z" fill="#00A0C6" opacity=".44" ></path><path d="M891.9299 252.010736m-36.376267 0a36.376267 36.376267 0 1 0 72.752534 0 36.376267 36.376267 0 1 0-72.752534 0Z" fill="#FFBF00" opacity=".33" ></path></symbol><symbol id="icon-a-tigeranimal" viewBox="0 0 1107 1024"><path d="M199.999829 634.651792l106.540816 376.187438h95.968332v-249.848437" fill="#FFE359" ></path><path d="M189.449278 637.643674l106.540817 376.187438a10.976082 10.976082 0 0 0 10.55055 7.975426h95.963945a10.967308 10.967308 0 0 0 10.967308-10.967308v-249.848437a10.967308 10.967308 0 1 0-21.934616 0v249.848437a10.967308 10.967308 0 0 1 10.967308-10.967308H306.540645a10.967308 10.967308 0 0 1 10.550551 7.962266l-106.540817-376.187438a10.971695 10.971695 0 0 0-13.538045-7.563056 10.99363 10.99363 0 0 0-7.563056 13.55998z" fill="#6E6E96" ></path><path d="M271.967304 848.505524s-0.583461-4.935289 0.486948-11.607798c2.237331-13.910933 11.699924-35.371762 48.773812-35.371762 54.83654 0 46.062694 198.337185 46.062694 198.337185h24.250911V792.058984l-57.437985-22.763745-86.444322-6.611093M819.073657 450.901127s30.217127-32.691352 89.809091-196.578028 80.77203-198.644269 122.991779-186.233664c42.210975 12.414993 56.727304 62.360113 27.374401 161.443161-8.471149 28.567644-107.922698 197.389609-200.71051 264.162967" fill="#FFC859" ></path><path d="M827.128048 458.341349c1.294142-1.399429 32.401815-36.20089 92.050809-200.271818l0.864224-2.386486c58.170602-159.973541 77.490611-186.259985 108.721118-177.073768 13.831969 4.071065 24.400067 12.6475 31.388435 25.501184 9.914446 18.218892 14.082023 48.874711-11.423548 122.307419-8.756299 25.198487-105.360734 192.708762-196.595576 258.376616a10.967308 10.967308 0 1 0 12.809816 17.806521c95.31468-68.589544 192.752632-240.916661 204.81667-269.949319 17.90742-43.092747 26.979578-107.216403 9.673166-139.021596-9.743356-17.898647-25.119522-30.366282-44.470241-36.060509-27.150668-7.9842-54.165341 1.184469-71.734968 31.642877-16.209681 28.107017-34.121489 77.367778-63.799024 158.97771l-0.864224 2.382099c-57.319539 157.657246-87.334867 192.638572-87.637565 192.971978l0.087739-0.092125a10.958534 10.958534 0 0 0 0.618556 15.498999 10.954147 10.954147 0 0 0 15.494613-0.609782z" fill="#6E6E96" ></path><path d="M178.920663 151.23479m-94.226724 0a94.226723 94.226723 0 1 0 188.453447 0 94.226723 94.226723 0 1 0-188.453447 0Z" fill="#FFC859" ></path><path d="M262.180078 151.23479c0 45.909151-37.350264 83.259415-83.259415 83.259416s-83.259415-37.350264-83.259416-83.259416 37.350264-83.259415 83.259416-83.259415 83.259415 37.345877 83.259415 83.259415z m-83.259415-105.198418c-58.003899 0-105.194031 47.190133-105.194032 105.194031s47.190133 105.194031 105.194032 105.194032 105.194031-47.190133 105.194031-105.194032-47.190133-105.194031-105.194031-105.194031z" fill="#6E6E96" ></path><path d="M516.731297 769.983986v235.889247h99.333102s32.270207-124.1587 57.122127-223.461094" fill="#FFE359" ></path><path d="M505.763989 769.983986v235.889247a10.967308 10.967308 0 0 0 10.967308 10.967308h99.333102c4.996706 0 9.357307-3.377931 10.616354-8.207933 0.315858-1.228338 32.568518-125.330009 57.130901-223.570767a10.971695 10.971695 0 1 0-21.280965-5.321338c-24.531675 98.126698-56.758012 222.131856-57.082644 223.373356a10.962921 10.962921 0 0 1 10.616354-8.207934h-99.333102a10.967308 10.967308 0 0 1 10.967308 10.967308v-235.889247a10.967308 10.967308 0 1 0-21.934616 0z" fill="#6E6E96" ></path><path d="M155.490106 637.494518s348.821811 355.174076 775.919493 54.72248c0 0 80.763256-227.738344-79.451566-282.285347-103.224303-29.545928-211.41899-22.351374-316.441931-22.215379-11.357744 0.166703-22.702328 0.223733-34.011816 0.280763-146.238085 0-282.728426 21.934616-282.728426 21.934616l-63.285754 227.562867" fill="#FFE359" ></path><path d="M645.136539 391.357419s51.177846 159.390081-109.67308 330.484472c-26.913774 28.6159 62.553138 33.336229 123.970062 20.171073s86.58909-17.249382 86.589091-17.249382l-2.013598 64.922076s-179.306712 69.60731-343.09249-3.505152v-67.834993c0.008774 0.004387 234.810064-272.778885 244.220015-326.988094z" fill="#FFC859" ></path><path d="M527.698605 881.227584s-7.484091-29.24323 54.555777-29.24323c62.053029 0-1.456459 142.917184-1.456459 142.917184h26.777779l45.242339-176.538563-125.119436 2.838339v60.02627zM786.97454 994.914699l78.964617-381.276269s59.916597-199.771709-108.225395-210.471414c0 0 237.977423-41.684544 174.748699 242.377507-63.224337 284.062051-97.885417 349.370177-97.885418 349.370176h-47.602503z" fill="#FFC859" ></path><path d="M147.668222 645.180408c3.632372 3.698176 90.568029 91.15149 231.866439 142.649582 130.730311 47.641986 333.686926 71.287502 558.183334-86.641734l2.855887-2.013597 1.171308-3.290193c1.873216-5.277469 45.330077-130.260911 1.728448-220.324444-17.718783-36.591326-47.321741-62.162702-87.992906-76.012218l-0.263215-0.087738-0.258829-0.074578c-88.194704-25.237969-179.982298-24.136851-268.769236-23.066442l-50.717219 0.429918-33.994268 0.280763c-145.430891 0-283.096928 21.851264-284.470035 22.074998l-6.9445 1.114278-1.88199 6.77341-63.268206 227.562867a10.967308 10.967308 0 0 0 21.131809 5.878477l63.268206-227.567254-8.826489 7.892075c1.359946-0.219346 137.367726-21.794234 280.991205-21.794235l34.169745-0.280763 50.813731-0.429918c87.198872-1.048475 177.363305-2.132045 262.460841 22.219766l-0.522044-0.162316c34.8892 11.879788 60.228069 33.660862 75.288376 64.746599 39.618303 81.745927-2.202235 202.281029-2.640928 203.49182l4.027196-5.30379c-414.682689 291.721619-758.354253-49.949508-761.776053-53.437112a10.967308 10.967308 0 1 0-15.630607 15.371779z" fill="#6E6E96" ></path><path d="M735.239554 765.017989v240.850857h99.337489s15.069081-60.587796 76.450911-230.537201c12.752786-35.310345 34.345222-113.937169 34.345222-154.038034" fill="#FFE359" ></path><path d="M333.463193 408.330424m-306.290591 0a306.290591 306.290591 0 1 0 612.581182 0 306.290591 306.290591 0 1 0-612.581182 0Z" fill="#FFC859" ></path><path d="M628.790863 408.330424c0 162.851363-132.480694 295.32767-295.323283 295.32767-162.842589 0-295.32767-132.476307-295.32767-295.32767 0-162.842589 132.485081-295.32767 295.32767-295.327669 162.838202 0 295.323283 132.485081 295.323283 295.327669z m-295.323283-317.262285c-174.937336 0-317.262286 142.320562-317.262286 317.262285 0 174.937336 142.320562 317.262286 317.262286 317.262286 174.937336 0 317.257899-142.320562 317.257899-317.262286 0-174.941723-142.320562-317.262286-317.257899-317.262285z" fill="#6E6E96" ></path><path d="M55.994688 367.38727a263.877817 252.186667 0 1 0 527.755634 0 263.877817 252.186667 0 1 0-527.755634 0Z" fill="#FFE359" ></path><path d="M499.223086 661.938455c-9.269569 91.305033-107.646321 104.689535-226.102021 92.660591-118.4557-12.015783-212.134058-44.904546-202.86449-136.218352 9.269569-91.305033 112.814117-155.577844 231.269817-143.566448 118.4557 12.046491 206.966263 95.819177 197.696694 187.124209z" fill="#D1D1E8" ></path><path d="M414.537921 537.30158c22.386469 24.878241 34.3189 55.371745 31.107672 87.032169-3.013816 29.624892-18.104832 48.681687-41.373073 60.14033-16.876494 8.317606-126.900527-97.345826-71.419109-3.018203 11.191041 19.039247-37.065114 17.402924-62.680359 14.788318-91.932363-9.330986-164.628067-34.836557-157.433513-105.711688 1.991663-19.631481 9.598588-37.648575 21.509085-53.244087 31.090125-40.710647 54.783897 43.55776 120.447363 55.867467 163.777004 30.708462 132.125353-86.663668 159.841934-55.854306z" fill="#F0F0FF" ></path><path d="M488.312808 660.828563c-2.500546 24.6238-11.954366 43.312093-28.892276 57.130901-32.669417 26.637398-93.244053 35.051516-185.185189 25.711757-91.936749-9.326599-149.585307-29.730179-176.235866-62.421531-13.818808-16.933524-19.324397-37.152853-16.82385-61.776652 8.646626-85.141405 107.001444-145.141354 219.249648-133.744128 112.23943 11.410387 196.529772 89.958247 187.887533 175.099653zM302.636284 463.917128c-124.281534-12.616791-233.41941 56.183325-243.289987 153.358061-3.075233 30.26977 4.207059 56.481636 21.649466 77.859113 30.940969 37.929338 91.638439 60.293872 191.01541 70.370635 99.385745 10.09431 163.338311 0.386049 201.263262-30.546146 21.381864-17.45118 33.779309-41.631901 36.854542-71.927993 9.870577-97.161575-83.215546-186.492492-207.492693-199.11367z" fill="#6E6E96" ></path><path d="M381.570193 522.65803c-5.505589 42.452256-45.619614 49.624875-95.880594 43.097133-50.265366-6.518968-89.541489-24.189495-79.859549-65.895973 10.620741-45.716127 43.627951-66.132867 93.880156-59.622673 50.265366 6.518968 87.348028 39.947323 81.859987 82.421513z" fill="#BEBED6" ></path><path d="M370.69501 521.249828c-1.460845 11.243684-5.746869 19.464778-13.108126 25.132683-13.016001 10.02412-36.731708 12.88878-70.484695 8.501857-34.665467-4.487822-57.828422-13.836356-66.983931-27.023447-4.803681-6.922565-5.983763-15.262106-3.60605-25.501185 9.252021-39.824489 36.77119-57.06071 81.789796-51.226102 46.422421 6.001311 76.867668 35.494596 72.393006 70.116194zM301.118408 429.361334c-56.450928-7.313001-94.086342 16.841398-105.974903 68.014858-3.807849 16.393932-1.465232 30.853231 6.948886 42.974299 13.151996 18.933961 40.030674 30.800588 82.175845 36.284242 40.29389 5.233599 68.650961 1.022153 86.698764-12.87562 12.03333-9.269569 19.258593-22.623363 21.473989-39.697268 6.110984-47.220841-32.296529-87.04533-91.322581-94.700511zM340.166412 181.27644v-16.078073H269.422888v16.078073h27.334919v13.007228h-27.334919v16.078073h27.334919v14.327691h-27.334919v16.078074h70.743524v-16.078074H312.831493v-14.327691h27.334919v-16.078073H312.831493v-13.007228z" fill="#6E6E96" ></path><path d="M470.414162 179.302325c0-59.938532 48.593948-108.53248 108.532479-108.53248 59.938532 0 108.53248 48.593948 108.53248 108.53248 0 59.942919-48.593948 108.53248-108.53248 108.53248" fill="#FFC859" ></path><path d="M221.535235 325.707113a30.651432 20.434288 90 1 0 40.868576 0 30.651432 20.434288 90 1 0-40.868576 0Z" fill="#6E6E96" ></path><path d="M328.975371 325.707113a30.651432 20.434288 90 1 0 40.868576 0 30.651432 20.434288 90 1 0-40.868576 0Z" fill="#6E6E96" ></path><path d="M500.359299 198.183642a83.825328 83.114647 90 1 0 166.229294 0 83.825328 83.114647 90 1 0-166.229294 0Z" fill="#FFE359" ></path><path d="M481.38147 179.302325c0-53.796839 43.768333-97.565172 97.565171-97.565172 53.801226 0 97.565172 43.768333 97.565172 97.565172 0 53.796839-43.768333 97.565172-97.565172 97.565172a10.967308 10.967308 0 1 0 0 21.934616c65.895973 0 119.499788-53.608201 119.499788-119.499788s-53.608201-119.499788-119.499788-119.499788c-65.891586 0-119.499788 53.608201-119.499787 119.499788a10.967308 10.967308 0 1 0 21.934616 0z" fill="#6E6E96" ></path><path d="M852.778388 680.89435l-65.803848 314.020349h56.358802l104.220134-373.616701z" fill="#FFC859" ></path><path d="M724.272246 765.017989v240.850857a10.967308 10.967308 0 0 0 10.967308 10.967308h99.337489a10.980469 10.980469 0 0 0 10.642676-8.317606c0.149155-0.609782 15.762215-62.329405 76.130665-229.458018 12.19126-33.779309 35.00326-114.744363 35.00326-157.775693 0-6.058341-4.908967-10.967308-10.967308-10.967308s-6.580385 4.908967-6.580385 10.967308h-4.386923c0 36.731708-19.921018 112.199948-33.700344 150.331084-60.868559 168.545589-76.148213 229.124612-76.771156 231.607611a10.9366 10.9366 0 0 1 10.642676-8.317607H735.248328a10.967308 10.967308 0 0 1 10.967308 10.967308v-240.84647c0-6.071502-4.908967-10.967308-10.967308-10.967308a10.958534 10.958534 0 0 0-10.976082 10.958534z" fill="#6E6E96" ></path><path d="M303.680372 490.940575c0 13.63017-11.787663 11.515673-26.32154 11.515674s-26.321539 2.11011-26.321539-11.515674 11.787663-24.676443 26.321539-24.676443 26.321539 11.046273 26.32154 24.676443z" fill="#F0F0FF" ></path><path d="M950.966503 174.292459s18.153088-61.504663 65.588888-61.504664c47.431414 0-38.096041 228.738563-98.705772 269.795777-60.627279 41.057214 33.116883-208.291113 33.116884-208.291113z" fill="#FFE359" ></path></symbol><symbol id="icon-a-octopusanimal" viewBox="0 0 1138 1024"><path d="M809.793133 778.618895c162.358996-19.326935 281.523566 61.420345 162.358996 83.113102 0 0-39.627497 29.964029 29.964029 29.964029 97.599204 0 263.820857-215.503519-256.090993-238.697661" fill="#FFA6CC" ></path><path d="M872.605673 726.011232s-62.425819-17.479775-110.260894-6.419564l47.452904 59.036327c162.358996-19.326935 281.523566 61.411246 162.358996 83.108552 45.423758 0 119.646833-22.407052 67.639724-74.405062-52.007109-52.011658-167.19073-61.320253-167.19073-61.320253z" fill="#F28CB7" ></path><path d="M811.089785 789.465273c113.445653-13.498827 195.585128 23.876591 198.405914 42.662117 0.686998 4.567854-9.203953 13.366887-39.309021 18.853772l-2.556906 0.473164-2.079193 1.565081c-3.325798 2.520509-19.713656 15.869197-14.608943 31.092344 5.500533 16.401507 30.232459 18.507997 51.156324 18.507997 51.010734 0 114.41473-49.336461 115.706831-106.907798 1.141963-51.138125-45.587545-139.101159-371.301912-153.632758l-0.978176 21.833796c327.547878 14.618042 351.033198 104.196204 350.428094 131.307599-0.987275 44.06796-53.71323 85.538068-93.854837 85.538068-26.042226 0-30.782967-4.381318-30.964954-4.567854a3.084666 3.084666 0 0 1 0.6688 2.283927c0.39582-1.778915 4.199332-5.969148 6.920025-8.034691l-4.631549 2.033696c51.129025-9.313144 59.227412-28.853913 56.998081-43.603896-5.855406-38.981446-106.466482-74.941921-222.61463-61.115518l2.616052 21.710954z" fill="#6E6E96" ></path><path d="M395.456032 405.324234s-84.31876-65.442241-28.267008-196.872681C425.383664 71.993744 320.600554 18.271415 243.492998 40.305396 146.594441 67.985498 183.196417 165.457311 190.057297 180.348333c14.37691 31.183337 68.845383 44.968792 77.143954 21.174095 11.597071-33.203384-25.682804 3.603327-34.845809-26.993104-9.827255-32.766617 1.865359-57.821568 47.862373-58.840691 17.902893-0.39127 42.270847 24.572688 18.935665 119.837919-27.602758 112.681311-86.529893 273.215895 59.090922 340.164071 0-0.009099 46.156252-16.005687 37.21163-170.366389z" fill="#FFA6CC" ></path><path d="M309.71323 277.938437c48.085306-164.656572 34.058719-164.365394 9.290396-189.133717-24.768323-24.772873-118.027156-34.713869-118.027156 54.168195 0 52.016208 19.281439 66.584204 35.264377 69.737116 1.970001 0.345774 3.889955 0.586906 5.782612 0.714295 8.662544 0.418568 15.250444-1.965451 15.250444-1.965451 4.708893-1.910855 8.262174-5.15021 9.936447-9.936447 11.597071-33.203384-25.682804 3.603327-34.845809-26.993104-9.827255-32.766617 1.865359-57.821568 47.862373-58.840691 17.902893-0.39127 42.270847 24.572688 18.935665 119.837919-27.602758 112.681311-86.529893 273.215895 59.090922 340.164071 0 0 30.3462-10.537001 37.061492-96.821212-62.575958 40.51468-121.403-78.326864-85.601763-200.930974z" fill="#F28CB7" ></path><path d="M402.153124 396.693538l0.031848 0.022748c-3.16201-2.493211-76.80273-62.393972-24.94576-183.978958 35.209782-82.553494 10.004692-129.401294-8.152982-149.979384-29.381673-33.298927-81.056657-46.542973-128.591455-32.962252-31.961328 9.131158-53.927063 26.292458-65.264804 51.006185-21.255989 46.306391 3.83081 101.780337 4.904528 104.11431 11.915547 25.846591 44.427383 40.628421 67.717068 39.509206 14.827326-0.714296 25.646406-7.757162 29.668302-19.308737 2.802588-8.021042 4.913628-17.143101-0.664249-23.976683-5.700718-6.974621-14.38146-5.796261-20.72368-4.931826-10.627995 1.44679-11.665316 0.673349-13.312291-4.822635-2.89813-9.654368-4.972773-23.044004 1.574181-32.047771 7.293097-10.02289 23.630909-12.452406 36.060567-12.725386 3.071017-0.068245 6.078339 1.615128 8.685292 4.863582 5.586977 6.960972 16.706334 30.778418-0.605105 101.443662l-8.43506 33.007749c-28.094121 107.722187-66.575105 255.244757 73.581574 319.686073l9.608871 4.417716 4.731642-9.463283-5.982797 5.373143c8.96737-3.316699 53.235516-27.611858 44.331841-181.244615l-0.286629-4.959125-3.930902-3.043719z m-39.345418 169.060638c-123.51404-56.779697-90.601834-182.973484-61.565934-294.303547l8.521504-33.326224c17.971138-73.36774 7.970996-105.929623-3.580579-120.324732-6.920026-8.626146-16.224071-13.257695-26.210564-13.034762-25.264235 0.559608-43.180778 7.866354-53.258264 21.724603-9.344992 12.857326-11.014715 30.555484-4.831734 51.179072 7.274899 24.272411 28.24426 21.419777 37.197982 20.200469 1.687922-0.232032 3.994597-0.545959 4.781687-0.477714-2.443165-0.200185-5.359494-3.289401-5.382242-5.700718 0 0.068245-0.00455 1.646975-1.610578 6.228478-1.296652 3.707969-6.879079 4.522357-10.091135 4.677046-15.905595 0.764342-39.299922-10.541551-46.806853-26.824767-0.222933-0.482263-21.997583-48.576669-4.895429-85.851994 8.557901-18.653586 25.86024-31.80664 51.402005-39.108836 38.981446-11.137556 82.653586-0.277529 106.202601 26.410748 25.837492 29.277031 27.375275 73.172105 4.440464 126.93993-58.676903 137.595223 30.714722 209.093055 31.624653 209.798252l-4.208431-8.002844c8.125684 140.202175-29.982228 159.415369-30.373498 159.592806a1.565081 1.565081 0 0 1 0.286628-0.109192l-4.058292 1.496837-1.942703 3.867207 14.358712-5.050118z" fill="#6E6E96" ></path><path d="M280.231464 806.958698c-160.425393 13.539774-139.73811-218.306106-92.794768-325.982797 35.819436-82.144025-43.967868-56.529466-43.967868-56.529466-109.683088 49.764129-21.742802 148.336959-21.742803 207.291391 0 25.964882-30.928556 7.720765-30.928556 7.720765C-19.363333 573.747921-35.796687 297.365465 199.033767 297.365465c176.567569 0 140.607095 166.699367 65.71977 241.600341-41.652094 41.642994 60.378474 86.780124 93.486315 27.443521 18.235018-32.684723 39.786735-96.134215 28.271558-185.93531-30.87396-240.785953 131.284851-324.590602 160.32985-339.245041-26.711026 17.234094 223.383522-104.391839 359.58655 103.45006 166.776711 254.507713-142.622592 325.841757-116.1254 434.469325 73.608872 301.906021-355.460013 205.280444-488.819507 191.749769" fill="#F28CB7" ></path><path d="M274.87652 528.014786s-0.00455 0 0 0z m146.944764-83.067605s-17.971138 169.529253-129.924504 148.114026c-76.447857-14.636241-35.146087-55.109974 9.399587-133.245752-2.320324 21.342433-10.618895 44.441032-26.424397 68.199331C342.520793 448.996374 367.439255 297.365465 199.038317 297.365465c-234.830454 0-218.3971 276.387005-108.231748 342.097676 0 0 8.366816 4.922727 16.396957 6.005545-3.111964-8.585199-4.258477-13.739959-2.306675-13.739959 0 0-152.882064-174.797754 18.021184-267.283145 34.158811-18.485249 68.176583-22.661833 97.262529-16.315064 0 0 79.778204 24.80472 22.953011 131.903604-56.829743 107.094334-35.309874 255.490439 148.45525 164.902254-0.00455 0.009099 68.75439-66.798038 30.232459-199.989195z" fill="#FFA6CC" ></path><path d="M279.316983 796.071373c-38.567427 3.253003-67.876306-8.726239-87.134997-35.587403-46.524774-64.905381-26.829317-201.490581 5.2776-275.14495 13.030213-29.882135 13.58527-50.80145 1.692472-63.954503-17.911993-19.809199-54.868842-8.680742-59.022677-7.347693l-0.600555 0.191085-0.573256 0.26388c-87.048553 39.491007-61.443094 110.169901-42.748561 161.776641 7.497832 20.710031 14.590744 40.278098 14.590745 55.460297 0 2.666098-0.482263 3.571479-0.486814 3.580578a1.747068 1.747068 0 0 1 0.782541-0.646051c-2.192934 0.718846-9.517879-1.57873-14.77273-4.645198l-0.295728-0.168337c-0.022748-0.018199-0.336674-0.177437-0.336674-0.177436l0.709746 0.39127C39.409114 596.082178 9.49513 501.203668 31.078695 422.895002c11.792706-42.803156 49.295514-114.605815 167.955072-114.605815 57.207365 0 95.13784 18.567143 109.687638 53.685932 21.265089 51.33831-10.273121 127.827113-51.697733 169.256274-16.292315 16.296865-13.830952 31.961328-10.905523 39.864079 6.765337 18.312362 29.645553 32.516386 55.628634 34.545532 28.285207 2.188384 52.976185-10.491505 66.047345-33.908581 13.266795-23.785597 42.716713-90.155968 29.568209-192.646051-12.984716-101.34357-12.056586-247.332907 149.460724-325.66887l4.959124-2.434066-10.846378-18.940214c-9.085661 5.864506-7.634321 12.343215-5.955498 15.682661 4.508708 8.96737 13.32139 5.66887 19.144949 3.489586 79.841899-29.900334 245.813322-49.131727 343.185043 99.450913 101.621099 155.074998 20.996659 235.867776-50.137201 307.156324-42.125258 42.2208-78.504301 78.677188-67.475936 123.90986 15.641715 64.141039 8.44871 113.400156-21.356082 146.426103-75.524277 83.672709-278.261463 55.751475-399.400583 39.06789-21.970285-3.03007-40.942347-5.637023-56.34748-7.206654l-2.202033 21.742802c15.009313 1.528684 33.799389 4.108339 55.564939 7.111111 125.424895 17.265942 335.341437 46.179 418.609227-46.074358 34.950451-38.726665 43.826829-94.660127 26.369802-166.239852-8.116585-33.312576 24.245113-65.747068 61.716073-103.304472 69.327646-69.482335 164.278951-164.647473 52.939788-334.572546-51.242767-78.190375-138.969219-128.66425-226.268003-132.772588-68.008246-3.198408-128.864434 18.626288-147.381531 25.555414-1.674273 0.627852 0.52776-0.159238 0 0 3.899055-1.169261-10.896424 2.861733 0.454966 14.208573 3.976399 3.976399 12.652591 3.007322 9.376839 5.40954 0.022748-0.013649 0.25933-0.191086 1.019123-0.677899l-10.846378-18.940214-4.654298 2.279377C364.063411 117.754176 361.770385 273.411531 375.678681 381.861662c12.315917 96.043222-14.763631 157.331627-26.979456 179.220019-12.684439 22.734627-35.883131 23.498969-45.26452 22.761925-17.206796-1.333049-33.035047-10.077486-36.820359-20.32331-0.732494-1.98365-2.957276-8.007393 5.864505-16.829175 47.411957-47.421056 81.484325-132.604251 56.429374-193.078268-12.698088-30.646478-45.532949-67.180209-129.874458-67.180209C101.784887 286.437193 32.894007 334.058435 10.009241 417.094192c-23.981233 87.007606 10.455108 193.141963 75.196702 231.750338 3.739817 2.202033 22.884766 12.698088 36.561029 4.87723 4.972773-2.834435 10.891875-8.958271 10.891875-21.993033 0-19.031208-7.720765-40.341793-15.896495-62.903533-19.240492-53.121774-37.420914-103.281723 31.224283-134.428663l-1.173811 0.454965c10.987417-3.480486 30.077771-5.509632 36.128812 1.210209 5.209355 5.778062 3.193858 20.559892-5.523281 40.546527-32.884908 75.437833-56.584062 221.877586-3.007322 296.610223 24.058577 33.562807 59.973555 48.576669 106.730362 44.632117l-1.824412-21.779199z" fill="#6E6E96" ></path><path d="M731.511765 632.688704c0 58.836141 91.812042 145.925642 91.812042 145.925642 172.022464 172.027014-66.142888 250.631407-125.625079 226.126963-32.866709-13.521575 0-27.05225 0-27.052249 139.888249-19.631762 94.655577-120.470321-23.203242-146.885619-112.098955-25.118646-88.904813-135.288548-88.904813-135.288548s-3.867207-57.980806 61.852563-85.046705c65.706121-27.061349 84.068529-1.428592 84.068529 22.220516z" fill="#FFA6CC" ></path><path d="M620.44218 129.356848a23.517168 32.621028 74.84 1 0-62.971587 17.061802 23.517168 32.621028 74.84 1 0 62.971587-17.061802Z" fill="#C71870" ></path><path d="M733.590996 251.432403a12.516102 17.356935 74.846 1 0-33.506753 9.074703 12.516102 17.356935 74.846 1 0 33.506753-9.074703Z" fill="#C71870" ></path><path d="M893.920808 284.535438c0 131.29395-117.895216 161.640151-218.483543 237.728584-89.109547 67.389493 13.658065 181.31286-117.98166 242.478425-15.104855 7.020118-176.512974 9.199403-219.657354-61.165565-18.280515-29.813891 87.062202-14.076633 87.062203-187.577735 0-90.069524-18.294164-175.216322-6.637947-231.45461 26.478993-127.772517 114.696808-237.269069 235.362763-237.26907 120.656856-0.009099 240.335537 105.96147 240.335538 237.259971z" fill="#FFA6CC" ></path><path d="M536.568138 297.447359a37.07969 25.805644 90 1 0 51.611289 0 37.07969 25.805644 90 1 0-51.611289 0Z" fill="#6E6E96" ></path><path d="M767.631478 977.693609c46.793204-19.631762 94.660127-120.470321-23.203242-146.885619-112.094405-25.118646-88.900263-135.288548-88.900263-135.288547s-3.862657-57.980806 61.852563-85.046705a254.507713 254.507713 0 0 1 5.14111-2.033696c-11.060212-11.123907-33.64925-15.027511-75.08296 2.033696-65.71067 27.065899-61.852563 85.046705-61.852562 85.046705s-23.194142 110.169901 88.904812 135.288547c117.849719 26.415298 163.091491 127.253857 23.203242 146.885619 0 0-32.866709 13.544324 0 27.05225 14.77728 6.091988 40.573825 5.80081 68.367669-0.677899-30.132367-13.294093 1.569631-26.374351 1.569631-26.374351z" fill="#F28CB7" ></path><path d="M462.176726 664.859316s-55.173669-14.267719-118.400228 21.63816c-111.889671 63.517737-80.847373 217.459871 46.674913 263.00192 101.061491 36.092415 237.878723-62.585057 191.699723-178.482975-12.088434-30.35075-36.724817-78.818227-77.835502-92.476292 0 0-63.767968-31.879434-113.855122 18.21682 0 0-22.766475 25.041302 40.987844 25.041302s88.81382 111.575745 38.708467 132.071942c-50.096254 20.491647-77.426033-79.70086 25.045852-79.700861" fill="#FFA6CC" ></path><path d="M464.49705 662.948461c23.044004 1.428592 39.804934 11.205801 39.804933 11.205801 41.110685 27.752897 65.747068 66.50231 77.835502 96.85306 46.179 115.907016-90.638231 214.575389-191.699723 178.487524-84.273264-30.095969-127.126466-101.962323-113.650387-169.274472 0 0.068245-8.826331 47.739532 22.680031 84.58264 31.547309 36.861307 77.767257 104.596574 179.775076 50.187247 149.387929-90.174166 3.357646-294.440037-89.382526-201.681666 0 0-6.155684-50.360134 74.637094-50.360134z" fill="#F28CB7" ></path><path d="M396.234023 728.759224s-69.94185 43.713087-41.529253 104.919599c27.766546 59.796119 147.93204 64.181986 141.903746-32.934954 1.046421 23.530817-7.029217 45.200825-26.465344 53.153622-45.401009 18.580792-72.102936-62.007251-0.39582-77.248596-22.743726-58.513116-73.513329-47.889671-73.513329-47.889671z m99.810336 65.000924l-0.009099-0.009099 0.036397 0.304826c-0.018199-0.095543-0.018199-0.200185-0.027298-0.295727zM661.792849 765.515888s-33.822137-46.502026 111.562095-21.437975l-118.732352-42.766759c0.00455-0.009099-10.323168 34.96865 7.170257 64.204734zM541.108694 510.475866s-51.042582 108.536575-18.103078 181.467548c30.277955 67.025521 89.496268 26.328855 89.496268 26.328854s14.144878-187.846165-71.39319-207.796402zM976.415156 696.693254s-20.696382 37.693894 15.960191 59.418497l-66.129239-21.406128 50.169048-38.012369z" fill="#F28CB7" ></path><path d="M732.881211 137.076562m-32.903106 0a32.903107 32.903107 0 1 0 65.806213 0 32.903107 32.903107 0 1 0-65.806213 0Z" fill="#F28CB7" ></path><path d="M580.235729 113.800526m-12.92557 0a12.92557 12.92557 0 1 0 25.85114 0 12.92557 12.92557 0 1 0-25.85114 0Z" fill="#F28CB7" ></path><path d="M643.571479 207.587119m-14.103931 0a14.103931 14.103931 0 1 0 28.207863 0 14.103931 14.103931 0 1 0-28.207863 0Z" fill="#F28CB7" ></path><path d="M862.291604 213.460724m-52.880642 0a52.880643 52.880643 0 1 0 105.761285 0 52.880643 52.880643 0 1 0-105.761285 0Z" fill="#F28CB7" ></path><path d="M439.091775 179.20182a25.359778 23.144096 0 1 0 50.719556 0 25.359778 23.144096 0 1 0-50.719556 0Z" fill="#F28CB7" ></path><path d="M645.855406 319.713372a39.268074 27.325229 90 1 0 54.650459 0 39.268074 27.325229 90 1 0-54.650459 0Z" fill="#6E6E96" ></path><path d="M720.588043 632.688704c0 62.81254 91.325229 150.16592 95.224284 153.851141 39.204379 39.213478 79.018412 96.939504 44.891448 148.132224-35.223431 52.835146-128.13194 72.617047-158.842113 59.973556-6.824483-2.807137-8.303121-4.790787-8.31222-4.818085 0.555058 0.782541 0.641501 2.593303 0.154688 3.412241 0.79619-1.351248 4.849932-4.062842 8.18938-5.464136l-0.732495 0.282079-1.942703 0.454965c84.737328-11.888249 95.429018-51.324661 96.093268-67.730717 1.724319-42.552925-48.076207-84.878368-118.422975-100.633824-99.992322-22.420701-81.425179-118.336532-80.597143-122.403924l0.232033-1.091917 0.004549-1.132864v-0.363973l-0.027298-0.363972c-0.104642-1.992749-2.129239-50.642212 55.105424-74.218526 37.944125-15.623516 54.204592-10.860027 60.524064-6.619748 6.98827 4.672496 8.457809 12.775432 8.457809 18.73548z m-77.312291-32.3253c-57.726025 23.781048-70.105637 73.10386-68.586053 95.874884l0.209284-2.975474c-0.25933 1.205659-24.01308 121.039028 97.207934 148.209568 64.850786 14.522499 102.462785 51.283714 101.352669 78.422407-0.932679 23.084951-29.099595 40.209853-77.284993 46.970641l-1.373996 0.195635-1.264804 0.518661c-5.022819 2.065543-21.37883 9.913699-21.37428 24.14047 0 14.335964 16.083031 20.955712 21.37428 23.139547 41.379114 17.033909 145.120353-7.725315 185.343854-68.058293 23.376129-35.064193 34.04052-94.032274-47.830525-175.916969-24.795621-23.539916-88.613635-93.845738-88.613635-138.195777 0-15.960191-6.442312-29.072297-18.153124-36.906803-17.652662-11.829104-44.905097-10.28677-81.006611 4.581503z" fill="#6E6E96" ></path><path d="M620.381887 670.378048s297.642994 183.614985 382.685149-40.587474c0 0 27.0568-59.90986-19.326935-154.615483-46.374636-94.705623 38.653871-143.027511 67.644274-94.705623 28.994953 48.326438 29.95493-70.542404-52.189095-92.77202-82.144025-22.225066-108.240847 112.108054-82.144025 204.880074 26.092273 92.77202-136.248525 110.156252-180.707756 3.858107-44.459231-106.293595-170.084311-48.317338-184.579512 16.433355-14.486102 64.750693 2.889031 118.855193 68.6179 157.509064z" fill="#FFA6CC" ></path><path d="M1063.732139 349.82299c-10.136632-19.049406-25.118646-31.997725-47.129878-31.997725-140.243122 0-55.305609 202.896424-52.998934 222.027724 29.213336 242.601265-309.567641 123.77792-346.720125 40.719414-74.314068-89.610009-2.042795-129.419492-5.600626-126.612355-5.973697 8.462359-57.443947 49.709533-59.495841 58.895287-14.504301 64.755243 2.879932 118.859743 68.608801 157.518163 0 0 297.642994 183.614985 382.685149-40.587474 0 0 27.0568-59.90986-19.326935-154.615483-46.374636-94.705623 38.65842-143.027511 67.644274-94.705623 16.378759 27.31158 23.790147 1.223857 12.334115-30.641928z" fill="#F28CB7" ></path><path d="M614.640222 679.682093c6.920026 4.267577 170.862302 104.055165 293.730291 62.275681 48.631265-16.542546 83.936589-52.976185 104.924148-108.290894l-0.26388 0.627852c1.19201-2.6388 28.621881-65.728869-19.472524-163.924077-23.36248-47.707685-10.564299-82.175873 11.2149-94.014076 10.914623-5.94185 27.234236-6.956423 37.252577 9.736262 7.925499 13.216748 16.410606 18.671785 25.20054 16.219521 4.88178-1.360347 13.05751-6.369517 12.984716-24.622734-0.12739-33.003199-24.468046-86.015782-78.153977-100.542831-25.819293-6.98827-49.104429-0.946328-67.334897 17.466127-41.292671 41.706689-46.756807 134.906377-28.180565 200.917324 10.964669 38.985996-18.071231 53.731428-31.069595 58.249236-37.793986 13.175802-103.659345-0.900832-129.028222-61.565935-18.935665-45.269069-55.187318-68.986422-99.455464-65.087367-49.054383 4.326722-96.552783 41.711239-105.870477 83.340584-16.542546 73.859103 8.262174 130.825336 73.522429 169.215327z m-52.202744-164.42454c7.147508-31.911282 47.548447-62.917182 86.457098-66.347622 34.663823-3.057368 62.134641 15.323239 77.371437 51.747779 28.917609 69.14111 103.700291 92.130518 156.398948 73.772659 38.635672-13.45788 55.842468-45.956067 44.914196-84.814673-18.61264-66.151987-8.230326-148.409753 22.670932-179.620388 12.725386-12.852776 27.802943-16.692685 46.097107-11.74721 31.752044 8.594299 47.311865 33.207933 53.763275 47.12078 8.935523 19.27234 8.994668 35.382669 7.506931 38.544679 0.222933-0.477714 1.392194-1.992749 3.70342-2.6479 2.329423-0.6597 4.131087 0.040947 4.586052 0.336675-0.018199-0.013649-1.869908-1.273903-5.159309-6.751689-14.331414-23.88569-41.652094-31.165138-66.443165-17.693609-30.628279 16.656288-50.087154 62.193787-20.391554 122.827042 43.239923 88.28151 19.408829 144.806426 19.163147 145.361485l-0.113741 0.25478-0.118291 0.318476c-18.558044 48.926992-49.35466 81.011161-91.516315 95.342575-113.21817 38.499182-273.611715-59.195564-275.213194-60.182839-58.130945-34.195209-78.304116-80.49705-63.676974-145.821zM464.911068 658.658136c-2.429516-0.641501-60.223786-19.317836-126.53956 18.330561-51.028933 28.967655-78.599844 79.532523-73.759011 135.2567 5.655221 65.141963 53.608587 123.063624 122.162793 147.540769 56.966233 20.346058 128.759792 1.360347 174.593019-46.165351 40.191654-41.665743 51.4657-95.124191 30.928556-146.649037-14.809128-37.184332-41.497405-84.505296-84.546243-98.818511l1.433141 0.605104c-0.700647-0.354873-71.438686-34.773015-126.466766 20.259614l-0.186536 0.186536-0.177436 0.195635c-4.995521 5.491434-9.326793 15.291391-5.100164 24.845668 5.577877 12.607095 22.789223 18.4807 54.172745 18.480699 28.717424 0 47.466553 28.876662 52.739603 55.705979 4.340371 22.061278 0.404919 47.725883-18.171323 55.323807-10.923722 4.463212-18.116727 0.473164-22.234165-3.657923-7.311296-7.356792-9.458733-19.622663-5.213905-29.845738 6.651596-15.992038 27.293382-25.159593 56.625009-25.159593v-21.861094c-54.827895 0-71.975546 27.015853-76.811829 38.626573-7.661619 18.426104-3.68977 39.98237 9.890951 53.640435 12.083884 12.152129 29.286131 15.314139 46.015213 8.471458 26.442596-10.81453 38.740314-42.129807 31.338025-79.764555-6.942774-35.328073-33.12149-73.349541-74.186678-73.349542-29.509064 0-34.272553-5.637023-34.3135-5.691618 0.181986 0.232032 0.336674 0.78709 0.295728 1.069169 0.063695-0.473164 0.673349-1.619677 1.228407-2.274828l-0.473165 0.500462c44.017914-44.013365 100.674771-16.451553 101.238928-16.169474l0.696098 0.345773 0.741593 0.245682c35.073292 11.656217 58.044501 53.285562 71.142959 86.16137 17.206796 43.203526 7.607024 88.176868-26.360702 123.400299-40.068814 41.542902-102.371792 58.299282-151.517168 40.751262-60.524063-21.610862-102.813109-72.18028-107.735836-128.832587-4.144736-47.680387 18.74003-89.373427 62.780693-114.369233 58.281083-33.089642 109.796829-20.687282 110.306391-20.555342l5.464135-16.779129z" fill="#6E6E96" ></path><path d="M655.855548 599.88569m-36.788512 0a36.788512 36.788512 0 1 0 73.577025 0 36.788512 36.788512 0 1 0-73.577025 0Z" fill="#F28CB7" ></path><path d="M782.986564 672.379896m-24.044928 0a24.044928 24.044928 0 1 0 48.089856 0 24.044928 24.044928 0 1 0-48.089856 0Z" fill="#F28CB7" ></path><path d="M879.157176 619.922372m-13.112106 0a13.112106 13.112106 0 1 0 26.224213 0 13.112106 13.112106 0 1 0-26.224213 0Z" fill="#F28CB7" ></path><path d="M731.630056 590.413308m-7.65252 0a7.65252 7.65252 0 1 0 15.30504 0 7.65252 7.65252 0 1 0-15.30504 0Z" fill="#F28CB7" ></path><path d="M258.424966 670.191512m-29.509064 0a29.509064 29.509064 0 1 0 59.018128 0 29.509064 29.509064 0 1 0-59.018128 0Z" fill="#FFA6CC" ></path><path d="M1002.09796 765.825265m-16.392408 0a16.392408 16.392408 0 1 0 32.784816 0 16.392408 16.392408 0 1 0-32.784816 0Z" fill="#F28CB7" ></path><path d="M769.874458 803.523708m-19.672709 0a19.672709 19.672709 0 1 0 39.345418 0 19.672709 19.672709 0 1 0-39.345418 0Z" fill="#F28CB7" ></path><path d="M1070.411033 778.386863m-7.65252 0a7.65252 7.65252 0 1 0 15.30504 0 7.65252 7.65252 0 1 0-15.30504 0Z" fill="#F28CB7" ></path><path d="M364.841402 818.137201m-32.102367 0a32.102367 32.102367 0 1 0 64.204734 0 32.102367 32.102367 0 1 0-64.204734 0Z" fill="#FFA6CC" ></path><path d="M495.675837 907.442383m-20.869268 0a20.869269 20.869269 0 1 0 41.738537 0 20.869269 20.869269 0 1 0-41.738537 0Z" fill="#F28CB7" ></path><path d="M283.925784 378.044501m-10.200327 0a10.200327 10.200327 0 1 0 20.400654 0 10.200327 10.200327 0 1 0-20.400654 0Z" fill="#F28CB7" ></path><path d="M160.493638 348.89486m-30.600981 0a30.600981 30.600981 0 1 0 61.201962 0 30.600981 30.600981 0 1 0-61.201962 0Z" fill="#FFA6CC" ></path><path d="M867.960475 682.307244m-31.783892 0a31.783891 31.783891 0 1 0 63.567783 0 31.783891 31.783891 0 1 0-63.567783 0Z" fill="#FFA6CC" ></path><path d="M961.642426 572.000853m-27.111396 0a27.111395 27.111395 0 1 0 54.222791 0 27.111395 27.111395 0 1 0-54.222791 0Z" fill="#FFA6CC" ></path><path d="M667.161442 772.404066m-25.250587 0a25.250586 25.250586 0 1 0 50.501173 0 25.250586 25.250586 0 1 0-50.501173 0Z" fill="#FFA6CC" ></path></symbol><symbol id="icon-snails" viewBox="0 0 1122 1024"><path d="M275.08954 322.769574S227.404893 219.956329 290.268007 201.964472l-116.98166-31.41772s88.303535 114.214391 1.369798 154.063056l100.433395-1.840234z" fill="#F7E2CD" ></path><path d="M285.047094 318.152848c0 0.004612 0 0 0 0-7.393219-15.985587-23.982993-63.130617-12.171369-88.916946 3.860339-8.430944 10.534068-13.900912 20.403993-16.723525a10.976831 10.976831 0 0 0-0.170649-21.146543L176.12741 159.948114a10.972219 10.972219 0 0 0-11.530285 17.309264c0.465824 0.599575 46.457824 60.916802 35.794616 104.109249-3.629734 14.703419-13.545779 25.578784-30.310813 33.267178a10.972219 10.972219 0 1 0 4.768926 20.948222l100.438007-1.835621a10.981443 10.981443 0 0 0 9.759233-15.593558zM179.22675 334.590423c22.936043-10.511008 37.228984-26.662631 42.482182-47.998271 13.167585-53.500522-37.579505-119.951861-39.747198-122.751414 2.877959 3.726588 3.062444 8.873707 0.447375 12.789392a10.962995 10.962995 0 0 1-11.97766 4.51526l116.986272 31.41772a10.962995 10.962995 0 0 1-8.126545-10.501783 10.981443 10.981443 0 0 1 7.955896-10.644759c-16.18852 4.630562-27.737254 14.297553-34.332576 28.719633-18.416171 40.272979 10.958383 104.542788 12.222102 107.259324a10.976831 10.976831 0 0 1 9.754621-15.588946l-100.438007 1.835622a10.972219 10.972219 0 0 1 4.773538 20.948222z" fill="#6E6E96" ></path><path d="M209.94343 244.395921c-11.590242-35.545563-21.769178-51.305156-29.49447-62.775484l2.186143-12.452707 107.628292 32.796742c-39.212193 11.225885-37.099845 51.111447-28.682737 82.796671l-0.004612 0.004612c0.004612-0.004612-24.61024-101.669441-51.632616-40.369834z" fill="#6E6E96" ></path><path d="M246.669693 130.785717m-83.479263 0a83.479264 83.479264 0 1 0 166.958527 0 83.479264 83.479264 0 1 0-166.958527 0Z" fill="#F0F0FF" ></path><path d="M246.669693 58.27406c39.977804 0 72.507044 32.52924 72.507045 72.511657 0 39.977804-32.52924 72.502432-72.507045 72.502432s-72.507044-32.524628-72.507044-72.502432 32.524628-72.511656 72.507044-72.511657zM152.218211 130.790329c0 52.079991 42.371491 94.451483 94.451482 94.451483s94.451483-42.371491 94.451483-94.451483-42.371491-94.456095-94.451483-94.456095-94.451483 42.376103-94.451482 94.456095z" fill="#6E6E96" ></path><path d="M222.635967 137.007459m-17.968796 0a17.968796 17.968796 0 1 0 35.937592 0 17.968796 17.968796 0 1 0-35.937592 0Z" fill="#6E6E96" ></path><path d="M368.526358 383.335856S361.280726 270.232984 426.38994 276.205671l-97.684575-71.62613s25.195979 96.965085-18.342377 96.965085l58.16337 81.79123z" fill="#F7E2CD" ></path><path d="M379.475516 382.634814c0 0.004612 0 0 0 0-1.102295-17.576766 0.488884-67.525961 20.837531-87.298094 6.650668-6.45696 14.851007-9.145822 25.071452-8.20495a10.976831 10.976831 0 0 0 7.490073-19.776745l-97.684575-71.621519a10.967607 10.967607 0 0 0-17.110942 11.604079c6.037257 23.309624 11.613303 65.464346 0.871689 79.337585-2.112348 2.734984-4.685908 3.901848-8.592368 3.901849-4.109394 0-7.872879 2.292221-9.750009 5.945015a10.958383 10.958383 0 0 0 0.811732 11.387309l58.158757 81.786618a10.967607 10.967607 0 0 0 19.89666-7.061147zM310.362988 312.516845c10.695492 0 19.670666-4.293878 25.956977-12.420423 20.763737-26.847116 4.884229-91.04313 3.007099-98.284149a10.967607 10.967607 0 0 1-17.110943 11.604078l97.684574 71.626131a10.981443 10.981443 0 0 1-3.772709-12.743271 10.953771 10.953771 0 0 1 11.262783-7.033474c-16.765034-1.535834-31.030303 3.288437-42.399164 14.343675-31.740569 30.882715-27.612727 101.420387-27.419018 104.413649a10.976831 10.976831 0 0 1 19.892047-7.065759L319.305877 295.175296a10.976831 10.976831 0 0 1-8.942889 17.341549z" fill="#6E6E96" ></path><path d="M332.072208 285.111664c8.504738-22.705437 0.793284-67.041689-2.250711-80.527511l8.11732 2.103124L426.38994 276.210284c-40.618888-3.7312-53.071596 34.217274-56.696718 66.797247l-0.004612 0.004612S379.443231 237.740641 332.072208 285.111664z" fill="#6E6E96" ></path><path d="M411.506648 194.073145m-83.479264 0a83.479264 83.479264 0 1 0 166.958527 0 83.479264 83.479264 0 1 0-166.958527 0Z" fill="#F0F0FF" ></path><path d="M411.506648 121.570713c39.977804 0 72.507044 32.524628 72.507044 72.507044 0 39.977804-32.524628 72.502432-72.507044 72.502433s-72.502432-32.524628-72.502432-72.502433c0-39.982416 32.524628-72.507044 72.502432-72.507044zM317.059777 194.077757c0 52.079991 42.371491 94.451483 94.451483 94.451483s94.451483-42.376103 94.451483-94.451483-42.371491-94.456095-94.456095-94.456094c-52.079991 0-94.446871 42.376103-94.446871 94.456094z" fill="#6E6E96" ></path><path d="M386.850286 191.176738m-17.973408 0a17.973408 17.973408 0 1 0 35.946817 0 17.973408 17.973408 0 1 0-35.946817 0Z" fill="#6E6E96" ></path><path d="M367.543977 374.678918C296.466688 129.595791-171.801247 478.742046 129.512773 865.832162c101.729399 130.698087 353.131121 147.191006 498.735561 147.191007 249.736749 0 452.185493-35.112024 452.185493-78.428999 0-43.321587-203.177458-59.477822-452.185493-78.428999-354.136562-26.957806-248.639066-439.880373-260.704357-481.486253z" fill="#F7E2CD" ></path><path d="M129.512773 865.82755c101.729399 130.702699 353.126509 147.195618 498.735561 147.195619 249.736749 0 452.185493-35.116636 452.185493-78.428999 0-43.326199-203.177458-59.477822-452.185493-78.428999-354.141174-26.967031-248.643678-439.889598-260.704357-481.486253-71.077289-245.087738-539.336 104.063128-238.031204 491.148632z m238.031204-491.153245c6.341657 35.596296-63.255144 400.97258 111.055093 470.938349 117.701149 47.246496 569.969661 38.843224 569.969661 75.910785 0 37.0445-438.515188 17.968796-569.969661 17.968796-76.644111 0-208.965661-14.117681-262.516917-125.956833-158.592152-331.209743 114.052967-648.569308 151.461824-438.861097z" fill="#EDD9C4" ></path><path d="M129.512773 865.82755c101.729399 130.702699 353.126509 147.195618 498.735561 147.195619 189.899182 0 352.43008-20.302526 419.421035-49.091342-82.865852 17.968796-210.303174 29.485245-353.251036 29.485245-145.609051 0-410.561165-2.951753-512.295175-133.64984C-12.646417 609.541599 131.721976 300.368537 260.95341 293.390408c-147.726012 9.560912-358.937772 280.176702-131.440637 572.437142z" fill="#DECCB8" ></path><path d="M378.082658 371.621086c-15.035492-51.85861-48.763881-83.354736-94.963428-88.68634-74.610168-8.610817-166.903182 52.965517-219.444384 146.434619-36.292725 64.551148-103.366699 236.961193 57.176377 443.205708 77.105322 99.063597 252.559363 151.424927 507.397111 151.424927 121.400065 0 235.614456-8.214175 321.611933-23.134364 141.536555-24.545671 141.536555-55.954167 141.536555-66.266854 0-49.280438-133.802039-64.362051-462.318308-89.364321-81.763557-6.230966-144.682016-34.410983-187.016611-83.765214-83.184088-96.978921-71.247937-252.20423-64.827874-335.600476 2.347566-30.52297 3.362231-45.581523 0.848629-54.247685z m249.340107 495.497856c186.546175 14.191475 442.043455 33.649984 442.043455 67.484452 0 23.54023-151.531006 67.452167-441.20405 67.452168-247.81811 0-417.290239-49.43725-490.083234-142.952474-152.448816-195.858033-89.502684-358.245955-55.363817-418.973661C131.205419 354.025871 214.389507 297.093936 280.601016 304.736209c37.381184 4.316939 63.803985 29.559039 76.404281 73.00054 1.512773 5.220913-0.096854 26.182971-1.660361 46.4486-6.659893 86.56938-19.052643 247.684358 70.058011 351.576839 46.277952 53.929449 114.242064 84.669189 202.019818 91.356754z" fill="#6E6E96" ></path><path d="M448.31593 669.642057a279.623248 279.4526 90 1 0 558.905199 0 279.623248 279.4526 90 1 0-558.905199 0Z" fill="#8B5C29" ></path><path d="M761.206356 632.846611l-0.493496-0.618023c8.739956 10.257342 23.051346 19.513854 28.221525 19.642993a2.905632 2.905632 0 0 0-0.631859 0.096855c0.659532-0.225994 3.182359-1.605016 6.973516-5.391561a6.023421 6.023421 0 0 0-1.236046 2.384463c0.650308-3.652794-2.974814-20.002738-19.80903-37.570281-19.412388-20.251793-44.433106-30.49991-66.930998-27.442079-69.772061 9.482506-93.252333 60.889129-91.232228 90.697222 4.326163 63.960797 73.881454 142.897128 163.826902 142.897129 122.626887 0 176.191979-84.982813 180.301373-164.514107 5.285483-102.227507-60.617014-219.684214-217.774799-235.992649-111.816092-11.604079-209.371527 32.072641-251.802977 135.190285-36.421864 88.538753-31.454618 230.36587 65.519692 308.476634 30.633661 24.67481 123.383274 64.998523 98.726912 95.659856-24.656361 30.65211-157.38839-15.874896-188.031275-40.549706-150.571686-124.914496-176.293446-251.604655-107.90502-417.829856 66.778799-162.332577 217.258242-251.867546 392.712284-233.65892 238.483191 24.743992 354.233416 212.461644 345.304363 385.102295-9.108925 176.450258-139.484164 299.667495-317.045941 299.667495-176.404136 0-280.817785-136.449393-289.48856-264.83681-8.592368-127.220553 70.869744-224.282492 197.744388-241.522574 102.222895-13.896299 192.528087 53.14539 228.894606 126.551796 32.068029 64.744856 23.996829 132.971859-21.0543 178.050661-41.421396 41.458293-85.088891 48.36724-114.398876 46.84063-72.377905-3.7312-121.741361-60.201924-130.905632-71.473931-24.799337-30.546031-20.15955-75.426512 10.358808-100.239685 30.513746-24.808561 75.366555-20.168775 100.156668 10.381868z" fill="#D59758" ></path><path d="M769.683422 625.868483l-0.290564-0.355133-3.293049-4.049436c-0.170648-0.207545-5.391561-0.207545-5.391561-0.207545h-23.775448l15.432134 18.093323c8.251072 9.685439 25.463481 23.226606 36.301949 23.489497l0.272115-21.944439c-0.641084 0-2.319893 0.073794-4.109394 0.664145l7.010413 20.805246c3.113177-1.056174 7.093431-3.911073 11.207437-8.029691l-15.625842-15.409073c-2.02933 2.084676-3.717364 5.386949-4.192412 8.209563l21.621591 3.745037c1.351349-7.637661-3.606673-27.174576-22.691601-47.075848-21.819911-22.770007-50.364285-34.258783-76.325875-30.721291-77.686448 10.552517-103.006954 68.356142-100.710121 102.319749 4.884229 72.285663 80.670486 153.131409 174.780672 153.131409 125.887652 0 186.767557-87.860772 191.259756-174.923648 5.543761-107.240875-63.315101-230.425828-227.603214-247.472201-122.912838-12.757107-221.261557 40.29604-263.084207 141.91936-39.811768 96.7806-29.236191 242.251288 68.780456 321.21068 8.652326 6.968904 21.543185 14.860231 35.181206 23.203546 24.273556 14.864843 60.949087 37.312002 63.476525 51.853998 0.276727 1.572731 0.101467 3.053219-1.600404 5.174791-2.241487 2.790329-7.619212 4.773538-15.14157 5.585271-44.663712 4.828883-135.277916-29.951068-157.45296-47.809174-141.739488-117.581234-173.069578-238.769142-104.639643-405.105034 64.855547-157.655893 211.01344-244.608078 381.431053-226.920621 231.684935 24.047562 344.142111 206.156884 335.485172 373.627355-8.795301 170.311534-134.664505 289.257954-306.09217 289.257955-169.75808 0-270.205311-131.177747-278.539401-254.60253-8.177278-121.10489 67.47984-213.499369 188.271106-229.913883 97.098836-13.19987 182.953338 50.650236 217.58109 120.551436 29.909559 60.391021 22.636256 123.784528-18.978849 165.436529-38.589558 38.617231-78.982452 45.05113-106.069398 43.635211-67.742731-3.49137-114.306634-56.78896-122.949735-67.438331-20.948222-25.790942-17.014089-63.845494 8.753792-84.807553a59.749937 59.749937 0 0 1 44.184053-13.167585 59.819119 59.819119 0 0 1 40.545094 21.944438l16.981804-13.905523z m0.050733 0.064569a81.606745 81.606745 0 0 0-55.32692-29.941844 81.569848 81.569848 0 0 0-60.284942 17.968796c-35.158145 28.590495-40.517422 80.481389-11.949987 115.67182 9.671603 11.908478 61.825388 71.547725 138.84308 75.518754 31.542248 1.632688 78.433611-5.719021 122.723741-50.046049 48.500991-48.524051 57.365474-121.593774 23.134364-190.692465-38.105286-76.920837-132.851944-147.149497-240.208121-132.556769-132.939574 18.065651-216.20668 119.799661-207.203834 253.145101s117.359853 275.066479 300.437718 275.06648c183.691277 0 318.577163-127.506504 328.008936-310.067813 9.187331-177.815443-109.842107-371.132202-355.132778-396.586459-180.495082-18.734407-335.291464 73.387958-403.998127 240.40183-72.73765 176.80539-39.530429 305.538717 111.045869 430.443989 25.832451 20.805246 122.405506 58.191042 173.70605 52.642669 13.739488-1.485101 23.793896-6.078766 29.881887-13.65647 5.419234-6.729074 7.531582-14.57428 6.124887-22.682376-4.224696-24.319677-39.507369-45.927431-73.6324-66.811084-13.033834-7.974345-25.32973-15.505927-32.879761-21.593918-89.73329-72.276439-99.045148-206.318308-62.258927-295.756422 38.474255-93.492163 126.141318-140.314344 240.521746-128.447376 150.041293 15.570497 212.968976 127.298959 207.941772 224.51771-3.666631 71.086513-50.216697 154.099953-169.338378 154.099953-81.048679 0-148.731452-71.317119-152.873131-132.667459-1.761828-26.039996 18.891219-70.542284 81.768169-79.079307 19.034195-2.592008 40.53587 6.438511 57.526898 24.153641 13.513494 14.099233 16.75581 26.685692 16.824992 29.051706 0 0-0.009224-0.373581 0.096855-0.991604l21.62159 3.745037c-0.290563 1.724931-0.793284 2.490542-1.729543 3.449861l-15.62123-15.418297c-2.402911 2.402911-3.763485 3.186971-3.772709 3.196195a6.364717 6.364717 0 0 1 1.033113-0.442763l7.005802 20.800634a8.467841 8.467841 0 0 1-2.831838 0.470436l0.26289-21.944439a4.040212 4.040212 0 0 1 0.844017 0.096855c-2.873347-0.701041-13.771772-7.430116-20.980507-15.874897l-8.347926 18.093323-8.458617-3.975642c0.050733 0.055345 0.47966 0.594963 0.47966 0.594963l16.99564-13.8963z" fill="#6E6E96" ></path><path d="M575.817821 951.871149c-6.609159-2.2461-135.965121-29.909559-201.558606-167.977804-37.002991-77.857097-37.879292-165.408857-2.619681-260.229309 51.272871-137.865312 141.850178-199.787554 208.813462-227.474075 93.925702-38.820164 201.826109-36.223543 296.042374 7.144165 151.415703 69.689043 222.562173 217.544193 190.328109 395.479552-14.454365 79.794184-81.228552 150.49328-174.264116 184.507621-101.79858 37.215148-208.195438 21.732281-284.553598-41.453681-95.982705-79.383706-99.192736-208.688935-57.642201-293.565669 26.920909-54.994847 123.148056-119.836558 249.174072-73.535545 111.567038 40.978633 129.886355 107.679026 130.868734 143.791878 1.443592 53.062372-32.50618 103.74028-84.470868 126.104421-51.471192 22.16582-106.46604 11.101358-147.121824-29.577487-16.045545-16.054769-16.045545-42.094765 0-58.135697a41.080099 41.080099 0 0 1 58.0988 0c21.109646 21.11887 42.399164 18.296256 56.553742 12.203654 20.689943-8.910604 35.338018-29.236191 34.816848-48.339567-0.705653-26.039996-28.788816-51.134508-77.045364-68.858862-68.282348-25.080676-121.404677-11.82546-149.607754 37.30739-30.075595 52.402839-23.816957 137.528628 38.727921 189.26271 53.643498 44.368537 129.900191 54.681224 203.998415 27.585054 64.749469-23.678593 112.484848-71.543112 121.616834-121.944294 25.491154-140.734047-26.920909-252.314921-143.819551-306.115231-72.424026-33.340972-158.536807-35.51789-230.338198-5.843549-74.342666 30.730516-130.767268 93.021727-163.162757 180.158398-27.151515 73.00054-27.289879 138.870753-0.41509 195.779627 50.30894 106.539834 179.309768 168.475913 180.60116 168.923288l-0.092242-0.027673c21.483227 7.28714 27.520484 11.959212 20.233344 33.470111-2.33373 6.885886-30.080208 4.934962-46.614636 4.934962l-26.547329-3.574388z" fill="#DEA66C" ></path><path d="M725.642345 475.679602c-110.017367 0-199.75527 79.623536-204.648723 179.521926a176.943754 176.943754 0 0 1-0.23983-8.592369c0-103.878644 91.725723-188.10507 204.883941-188.105069s204.888553 84.221814 204.888552 188.105069c0 2.882571 0.133751-2.83645 0 0-4.888841-99.898389-94.861961-170.929557-204.88394-170.929557zM893.615537 793.172918s-204.551868 125.961446-281.698699-85.840666c0 0 65.381328 171.685944 281.698699 85.840666z" fill="#E4BC96" ></path><path d="M1013.728822 612.636328v0.041509c-0.110691-11.696321-6.521529-286.592152-310.533636-286.592153-253.066695 0-289.410154 275.255576-290.821461 286.965734a21.944438 21.944438 0 1 1-43.570641-5.285483c0.405866-3.306886 10.354196-81.87886 55.751234-161.377869 61.345728-107.420747 157.697402-164.195871 278.640868-164.195871 181.422117 0 268.383526 90.069974 309.389832 165.644075 43.958059 80.98411 45.028069 161.114979 45.046517 164.491046a21.944438 21.944438 0 1 1-43.902713 0.309012z" fill="#FFFFFF" ></path><path d="M364.864339 696.609087c0 13.739488 15.524376 33.654596 29.259251 33.654596s20.482398-19.910496 20.482399-33.654596c0-13.734876-11.133643-38.040716-24.868519-38.040716-13.739488 0-24.873131 24.305841-24.873131 38.040716zM391.19951 770.495154c0 9.29341 16.313047 25.606457 25.601845 25.606457 9.29341 0 8.048139-16.313047 8.048139-25.606457a16.829604 16.829604 0 0 0-33.649984 0z" fill="#FFFFFF" ></path><path d="M184.170936 730.992397m-32.921269 0a32.92127 32.92127 0 1 0 65.842539 0 32.92127 32.92127 0 1 0-65.842539 0Z" fill="#EDD9C4" ></path><path d="M187.902137 771.399128m-25.675639 0a25.675639 25.675639 0 1 0 51.351277 0 25.675639 25.675639 0 1 0-51.351277 0Z" fill="#EDD9C4" ></path><path d="M177.040608 700.815335m-24.693258 0a24.693258 24.693258 0 1 0 49.386517 0 24.693258 24.693258 0 1 0-49.386517 0Z" fill="#EDD9C4" ></path><path d="M250.285591 796.55821m-11.248946 0a11.248946 11.248946 0 1 0 22.497892 0 11.248946 11.248946 0 1 0-22.497892 0Z" fill="#EDD9C4" ></path><path d="M228.064425 658.568371m-10.972219 0a10.972219 10.972219 0 1 0 21.944439 0 10.972219 10.972219 0 1 0-21.944439 0Z" fill="#EDD9C4" ></path><path d="M800.8567 904.366375m-30.725903 0a30.725904 30.725904 0 1 0 61.451807 0 30.725904 30.725904 0 1 0-61.451807 0Z" fill="#D59758" ></path><path d="M758.162361 913.143228m-25.334342 0a25.334342 25.334342 0 1 0 50.668684 0 25.334342 25.334342 0 1 0-50.668684 0Z" fill="#D59758" ></path><path d="M841.45714 901.073325m-20.846756 0a20.846755 20.846755 0 1 0 41.693511 0 20.846755 20.846755 0 1 0-41.693511 0Z" fill="#D59758" ></path><path d="M876.573776 854.989082m-14.265269 0a14.265269 14.265269 0 1 0 28.530537 0 14.265269 14.265269 0 1 0-28.530537 0Z" fill="#D59758" ></path><path d="M785.470688 673.958995m-16.801931 0a16.801931 16.801931 0 1 0 33.603862 0 16.801931 16.801931 0 1 0-33.603862 0Z" fill="#D59758" ></path><path d="M802.106583 664.743992m-15.741145 0a15.741145 15.741145 0 1 0 31.48229 0 15.741145 15.741145 0 1 0-31.48229 0Z" fill="#D59758" ></path><path d="M758.309948 655.524376m-10.238893 0a10.238893 10.238893 0 1 0 20.477787 0 10.238893 10.238893 0 1 0-20.477787 0Z" fill="#D59758" ></path><path d="M770.439808 669.831153m-17.862717 0a17.862718 17.862718 0 1 0 35.725435 0 17.862718 17.862718 0 1 0-35.725435 0Z" fill="#D59758" ></path><path d="M844.750189 668.811876m-7.314813 0a7.314813 7.314813 0 1 0 14.629626 0 7.314813 7.314813 0 1 0-14.629626 0Z" fill="#D59758" ></path><path d="M452.646705 815.121969m-7.314813 0a7.314813 7.314813 0 1 0 14.629626 0 7.314813 7.314813 0 1 0-14.629626 0Z" fill="#FFFFFF" ></path><path d="M145.364609 679.258314a21.557021 19.905884 90 1 0 39.811768 0 21.557021 19.905884 90 1 0-39.811768 0Z" fill="#EDD9C4" ></path><path d="M193.653443 633.732137m-4.054048 0a4.054048 4.054048 0 1 0 8.108096 0 4.054048 4.054048 0 1 0-8.108096 0Z" fill="#EDD9C4" ></path><path d="M224.43008 696.57219m-4.238533 0a4.238533 4.238533 0 1 0 8.477065 0 4.238533 4.238533 0 1 0-8.477065 0Z" fill="#EDD9C4" ></path><path d="M229.77552 757.581234m-6.267863 0a6.267863 6.267863 0 1 0 12.535726 0 6.267863 6.267863 0 1 0-12.535726 0Z" fill="#EDD9C4" ></path><path d="M854.163514 93.824235m-27.797211 0a27.797211 27.797211 0 1 0 55.594422 0 27.797211 27.797211 0 1 0-55.594422 0Z" fill="#D59758" ></path><path d="M677.127518 180.139949m-11.705546 0a11.705545 11.705545 0 1 0 23.411091 0 11.705545 11.705545 0 1 0-23.411091 0Z" fill="#D59758" ></path><path d="M1023.884697 275.24174m-7.314813 0a7.314813 7.314813 0 1 0 14.629626 0 7.314813 7.314813 0 1 0-14.629626 0Z" fill="#D59758" ></path><path d="M114.850863 468.447807c11.498 21.224949 48.450258 55.064029 106.018665 31.242461a10.972219 10.972219 0 1 0-8.389436-20.270241c-53.394444 22.096638-77.358988-19.684503-78.355205-21.474003l-0.216769-0.387418a12.028393 12.028393 0 0 0-0.276727-0.424314l0.516557 0.857853a10.976831 10.976831 0 0 0-19.297085 10.455662z" fill="#6E6E96" ></path><path d="M401.89039 146.120996c42.408388 0 76.787086 34.38331 76.787086 76.787086 0 1.678809-0.147588 3.320722-0.253666 4.971859a76.408893 76.408893 0 0 0 9.030519-36.108241c0-42.408388-34.378698-76.782474-76.787086-76.782474-40.729579 0-73.95986 31.735956-76.538032 71.810615 12.927756-24.19515 38.409685-40.678846 67.761179-40.678845z" fill="#6E6E96" ></path><path d="M236.564552 84.673801c42.408388 0 76.782474 34.38331 76.782474 76.782474 0 1.678809-0.142976 3.325334-0.249055 4.971859a76.44579 76.44579 0 0 0 9.03052-36.108241c0-42.403776-34.374086-76.782474-76.782474-76.782474-40.734191 0-73.964472 31.735956-76.538032 71.815228 12.913919-24.199762 38.400461-40.678846 67.756567-40.678846z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-snakeanimal" viewBox="0 0 1024 1024"><path d="M641.530889 792.943905s-69.67617-42.014669-122.831651-7.940748c-53.151383 34.082116 42.719421-6.957374 122.831651 7.940748z" fill="#FFF3D6" ></path><path d="M636.21657 839.830374s16.119145 37.683724-8.903636 62.702407h-16.791117c0.004097 0 25.104728-33.233956 25.694753-62.702407z" fill="#E4BA74" ></path><path d="M611.296225 794.767245s55.786007 39.126007-55.228762 72.167385c-0.004097 0.004097 130.559334-17.835952 55.228762-72.167385zM620.974267 233.026941c-18.089991-49.24247-63.759534-82.791925-26.272484-59.989932 0 0 68.737867 39.994654 58.73613 121.225472 0 0.004097-1.249705 23.752588-32.463646-61.23554z" fill="#FAE5B6" ></path><path d="M530.471048 850.299214c29.656931 35.872677 66.004906 56.097409 170.99241 63.796411 181.621047 13.316528 209.102263-73.785855 167.980825-63.833288-110.084661 26.628958-136.93078-78.510149-242.106764-78.510149-105.167789-0.004097-117.845123 53.180065-96.866471 78.547026z" fill="#F8D584" ></path><path d="M549.36003 871.040218c28.161383 26.145465 61.698546 41.928624 161.384023 47.542052 172.467471 9.69853 190.954909-91.502983 158.70023-68.319933-134.292059 96.52229-128.236112-36.450409-228.105972-36.450409-99.865762 0.012292-111.899806 38.753144-91.978281 57.22829z" fill="#F2C16F" ></path><path d="M523.251441 856.273213c30.931221 37.413297 66.709657 59.043435 177.527752 67.172663 124.003505 9.092115 178.384107-28.099922 190.967201-51.512427 4.974235-9.251914 4.990625-18.225205 0.045071-24.633527-2.364196-3.056655-9.485465-9.79277-24.551579-6.14609-56.781674 13.742657-95.760174-8.891343-137.025021-32.861092-35.577664-20.659056-52.921929-45.915387-102.865054-45.915388-77.682476-0.004097-102.402049 27.878663-110.219875 44.489495-7.78095 16.512494-5.437241 35.438353 6.121505 49.406366z m104.090175-75.150287c44.903331 0 58.477995 23.072421 93.45744 43.383198 42.645668 24.764644 86.750007 50.373351 150.849625 34.864718 4.130172-0.995667 5.654402-0.28272 5.670792-0.274525a1.548815 1.548815 0 0 1-0.602317-0.7867c0.151604 0.671972-0.307304 4.371918-5.273345 10.128756-6.613192 7.645736-45.874413 45.366337-169.283797 36.319293-103.713214-7.596567-137.541292-27.878663-164.45297-60.424257-6.879523-8.305416-8.272637-19.606026-3.622095-29.464354 4.765268-10.15334 23.412504-33.750227 93.256667-33.746129z" fill="#6E6E96" ></path><path d="M636.806594 828.914919s9.141284 188.271116-342.345389 144.207751c-298.52377-37.433783-73.671128-282.904508 73.204025-422.150315 67.779077-64.267611 44.395254-109.810135 1.675834-87.864498l30.77552-381.553344c62.153356-17.192662 191.966965 49.283444 245.933729 134.791941 56.015461 88.729048 1.282484 204.144417-137.864986 384.704239-209.925839 272.390597-49.713671 274.091015 26.239706 198.141736 0 0 15.537315-20.863926 60.026809-10.427865 44.477202 10.427865 42.707128 44.4813 42.707128 44.4813" fill="#F8D584" ></path><path d="M294.4694 973.126767c-300.900258-37.429686-73.671128-282.896313 73.204025-422.146218 67.779077-64.267611 44.399352-109.810135 1.675834-87.8604l104.213096-314.184007 1.581594-0.745725s273.197783 91.646392 58.813981 387.892011c-228.372303 315.568925-262.888742 376.775784-54.282264 347.89326 79.477134-11.009695 124.081356-33.647792 148.866486-57.449549l8.264442 2.40517c0-0.01639 9.182258 187.91874-342.337194 144.195458z" fill="#F2C16F" ></path><path d="M530.397295 276.258536s80.083548 72.962279 16.012612 201.087762c-51.64764 103.299378-341.452158 349.376516-258.037428 396.840718 83.422924 47.460104 243.663774 85.28314 347.839993-45.44009l-0.135214 12.243011s-139.684229 174.544849-360.2469 50.479883c0 0-95.518428-39.986459 55.646696-187.775332 151.161027-147.79297 262.982982-290.431419 188.242435-409.640974l10.677806-17.794978z" fill="#E4BA74" ></path><path d="M367.669328 550.972355c67.779077-64.267611 44.399352-109.810135 1.675833-87.860401L428.466447 284.891743c48.107493-15.967541 83.513066-13.132145 93.297641 16.381378 0 0 74.1874 105.475094-42.965264 254.378457-108.933293 138.446816-327.434976 293.619191-167.276074 355.903663 96.096161 37.37642 290.066751 16.008515 324.702014-82.808315l0.594122 0.167993s9.419907 185.988868-342.345389 144.207751c-315.138699-37.429686-73.68342-282.892215 73.195831-422.150315z" fill="#E6E0D1" ></path><path d="M390.032899 442.428314l53.7537-162.06419a241.430694 241.430694 0 0 0-15.32425 4.523522l-59.117188 178.224308c39.629986-20.355849 62.563095 17.368849 11.571039 74.232471l7.428573-7.059808c67.791369-64.259416 44.403449-109.806038 1.688126-87.856303zM294.4694 973.126767c191.725219 22.773311 276.139712-22.113631 313.278482-67.680739-44.919721 37.056823-130.297101 81.271792-292.594842 61.98946-270.620523-32.139952-157.491499-224.414221 7.141756-372.662001-149.862153 134.959934-312.020583 344.586663-27.825396 378.35328z m341.74717-144.379841c-3.597511 10.235288-8.915927 19.63061-15.635652 28.231039a131.239501 131.239501 0 0 0 15.262789-14.254831c1.233315-8.530772 0.966985-13.80002 0.966985-13.80002l-0.594122-0.176188z" fill="#D1D1D1" ></path><path d="M478.798824 555.651578c-25.002293 32.984015-62.862205 60.993794-95.043131 93.207498 5.683084-6.41242 177.535946-162.449345 108.093328-204.730344-41.40006-25.207162-46.796327 16.041294-99.087258 78.649461 35.012224-48.496745 12.726503-78.231527-23.408407-59.666239l59.125383-178.220211c48.107493-15.967541 83.504872-13.136242 93.293544 16.37728-0.008195 0.004097 91.679171 76.731881-42.973459 254.382555z" fill="#D9D1BB" ></path><path d="M340.499514 311.85259c15.357029 27.841786 50.377448 37.970542 78.223332 22.621707 27.849981-15.352932 37.982834-50.369254 22.621707-78.219234-15.352932-27.845884-50.377448-37.978737-78.219234-22.625805" fill="#F8D584" ></path><path d="M391.028566 343.66475c-21.040114 0-41.465618-11.136714-52.32371-30.820591a2.056891 2.056891 0 0 1 3.589316-1.983138c14.783394 26.813341 48.623764 36.593818 75.441202 21.818618a55.175496 55.175496 0 0 0 26.534718-33.197079 55.171398 55.171398 0 0 0-4.720197-42.235928 55.171398 55.171398 0 0 0-33.201176-26.534718 55.126327 55.126327 0 0 0-42.235929 4.712002 2.048697 2.048697 0 1 1-1.974943-3.589316 59.215525 59.215525 0 0 1 45.349947-5.060281 59.248304 59.248304 0 0 1 35.651417 28.493272 59.231915 59.231915 0 0 1 5.068476 45.354044 59.236012 59.236012 0 0 1-28.493272 35.64732 59.301571 59.301571 0 0 1-28.685849 7.395795z" fill="#D59758" ></path><path d="M619.41316 858.481708s-69.442618 156.299158-377.30025 74.433243c0 0-156.299158-71.474925-28.480979-199.313591 153.402301-153.398203 212.867767-240.045776 243.491683-240.045775 36.962583 0 13.955721 35.249873-22.818382 72.032171-124.052674 124.044479-305.591773 270.976996-140.692188 333.617942 220.21849 83.652378 325.800116-40.72399 325.800116-40.72399z" fill="#F5F5F5" ></path><path d="M443.176088 556.442374s-28.65307 16.242066-39.797979-23.613276l-29.984723 12.54212s46.784035 12.075018 46.784034 34.221427c-0.004097 0 0.20487 24.06399 22.998668-23.150271zM381.940548 620.673109s-28.65307 16.250261-39.793882-23.600984l-29.98882 12.538022s46.784035 12.07092 46.784034 34.213233c-0.004097-0.012292 0.20487 24.059892 22.998668-23.150271zM328.477762 681.638221s-28.648973 16.242066-39.793881-23.609179l-29.984723 12.538023s46.784035 12.075018 46.784034 34.213232c-0.004097-0.004097 0.20487 24.059892 22.99457-23.142076zM269.454815 741.406894s-28.657167 16.246164-39.79798-23.600984l-22.486493 12.54212s39.285805 12.066823 39.285805 34.205038c-0.004097-0.012292 0.200772 24.059892 22.998668-23.146174zM228.825065 818.991033s-40.379809 35.532593-76.363116 13.250969l26.317556 47.177385s4.769366-43.842106 67.111202-12.587192c-0.004097 0-10.382794 7.227801-17.065642-47.841162zM261.575528 881.558226s-5.560162 55.093548-34.315668 46.08338l31.668752 24.522898s12.718308-50.31189 34.68853-52.962903c-0.004097 0.004097-23.228122-14.484285-32.041614-17.643375z" fill="#E6E6E6" ></path><path d="M374.360371 558.028066c48.341044-45.837537 51.696809-81.562707 39.875829-98.226806-9.68214-13.660709-29.050517-15.758574-49.33671-5.338903l13.673001 11.71035 59.117187-178.224309-6.166576 6.166577c30.763227-10.210704 54.347822-11.935706 68.197011-4.98243 6.269011 3.146798 10.460645 8.116936 12.808451 15.197231l0.446616 1.364432 0.819478 1.171854c2.823104 4.064614 68.24618 101.820219-42.649765 242.770542-26.288874 33.410143-59.494148 68.291251-91.593125 102.016894-75.010976 78.805162-145.863097 153.242502-132.984991 210.941992 5.539675 24.801521 26.202829 44.317404 61.415825 58.010892 71.077478 27.645111 184.354008 22.7897 257.881728-11.054766 40.814133-18.78245 68.311738-45.616278 79.514011-77.596431l-11.816882 6.146089 0.594122 0.159799-7.072101-8.866759c0.081948 1.798756 1.450477 45.40731-39.814369 83.660573-37.101895 34.393518-117.812344 71.061089-291.677026 50.410227-81.562707-9.686237-129.375188-34.065726-142.113982-72.466494-31.160675-94.02288 145.461553-261.466947 220.882268-332.970554zM293.318032 982.776128c145.916364 17.331973 249.428806-1.470964 307.660957-55.89254 47.701851-44.583734 45.661349-96.288738 45.542524-98.460356l-0.352375-6.969666-6.723823-1.897093-0.594122-0.167993-8.793005-2.474825-3.019779 8.620915c-9.424004 26.887094-33.381462 49.836592-69.295112 66.365476-69.331989 31.9064-175.937963 36.565136-242.704984 10.595859-29.206218-11.357974-45.395018-25.79309-49.488314-44.128924-10.616346-47.574831 59.895693-121.655699 128.092704-193.302715 32.414477-34.061629 65.93525-69.266431 92.789564-103.397715 120.250293-152.840958 46.47673-261.442362 43.276666-265.990469l1.278387 2.536286c-3.994958-12.058628-11.579233-20.958166-22.53976-26.460965-18.827521-9.448589-46.771742-8.133325-83.045963 3.908914l-4.630055 1.536522-1.536522 4.630054-59.117188 178.224308-7.490035 22.580734 21.163036-10.874481c11.177688-5.740448 20.822952-6.01907 24.584359-0.712947 6.133797 8.649597 1.405406 36.081644-37.396907 72.872137-129.067883 122.360451-256.845087 260.024664-225.938451 353.215773 15.320153 46.173523 68.573971 74.982294 158.278198 85.643711z" fill="#6E6E96" ></path><path d="M627.444051 829.373827v-0.032779c0.081948 1.888898 1.421795 46.738963-40.777256 85.549471-53.47098 49.185107-154.107052 66.103243-291.033736 48.935166-77.035088-9.657556-122.450593-33.950999-135.000908-72.212457-21.822716-66.521177 50.004586-178.838917 213.486473-333.839201 48.181246-45.677738 51.56979-81.218526 39.838954-97.771994-7.621151-10.755657-24.477826-17.774491-48.890095-5.232371l13.623832 9.092115 30.771422-381.553344-6.842646 8.280831c55.663085-15.398003 182.288922 46.431659 235.514059 130.760107 49.516996 78.440494 12.288082 179.797707-137.369202 373.973167-129.629226 168.214377-112.416077 225.463153-90.617946 244.626661 30.353488 26.674029 93.359102 3.425421 130.919905-34.131285l0.479395-0.479395 0.409739-0.553148c0.409739-0.48759 13.259164-15.602873 50.369254-6.904107 36.442214 8.547162 35.495717 34.614777 35.487521 34.872912l18.716892 0.979277c0.758018-14.484285-8.702863-44.436228-49.93493-54.097881-20.40092-4.785755-38.032003-4.187536-52.41795 1.765977-4.79395 1.983138-9.038849 4.507132-12.624068 7.490034-1.188244 0.995667-2.282248 2.015917-3.224648 3.036168-0.122922 0.131117 0.622804-0.348278 0.479395-0.245843l-0.528564 0.401544-0.4712 0.475298c-34.430394 34.4222-85.602737 50.615097-105.286614 33.299514-21.839105-19.196287-8.846272-86.82376 93.092772-219.095805 131.677922-170.857195 200.751776-296.60619 138.373063-395.427117C600.266042 126.240682 466.08871 53.58161 397.621271 72.523858l-6.31818 1.74549-0.524466 6.531244-30.771423 381.553344-1.352139 16.78702 14.980069-7.694904c11.333389-5.822396 21.150743-6.060044 25.018682-0.59822 6.199356 8.743837 1.516035 36.384851-37.441978 73.326947-171.578337 162.666507-243.020483 278.233479-218.399248 353.285429 15.004654 45.739199 65.63614 74.330808 150.48086 84.963544 144.986255 18.176036 248.109445-0.040974 306.501394-54.142953 48.455771-44.899234 46.47673-97.595807 46.370198-99.820691l-18.720989 0.913719z" fill="#6E6E96" ></path><path d="M231.685045 436.54036c32.295653 48.799952 170.955533 81.415201 256.492711-68.344517 58.191177-101.885777 77.563652-208.213128 13.857384-257.017178-63.702171-48.799952-173.196807-12.853522-244.548811 80.288418-71.356101 93.14194-70.085909 178.146458-25.801284 245.073277z" fill="#E4A846" ></path><path d="M326.293852 487.688118h-0.012292c-43.682308-0.004097-85.131537-18.286665-103.135482-45.497453-50.996155-77.071964-41.686878-168.329104 26.211023-256.955717 50.127507-65.435368 120.840318-106.085605 184.542489-106.085605 28.247428 0 53.95857 8.264442 74.367685 23.895996 62.354128 47.767409 58.166593 148.788636-11.189981 270.227174-56.859524 99.546166-131.3993 114.415605-170.783442 114.415605zM433.895492 99.636308c-57.461841 0-121.942516 37.573095-168.279935 98.058812-79.686101 104.016422-57.789632 184.222892-25.387447 233.190837 11.571038 17.487674 43.436464 36.311098 86.05345 36.315195h0.012292c34.938471 0 101.262973-13.525495 152.988464-104.086077 49.25886-86.246028 79.468939-195.584963 16.520689-243.807182-17.036961-13.050197-37.868107-19.671584-61.907513-19.671585z" fill="#6E6E96" ></path><path d="M209.481272 424.756257c90.167233 56.748895 201.509793 12.85762 272.865894-80.284321 71.352004-93.137843 76.428674-176.54028 19.687974-233.289174-68.221595-68.22979-230.855323-32.635736-313.901286 106.167553-60.248068 100.685241-14.939095 184.562975 21.347418 207.405942z" fill="#F8D584" ></path><path d="M499.560315 122.409619c-65.959834-65.972127-223.20549-31.558122-303.498006 102.647893-58.248541 97.349963-14.443311 178.449665 20.646764 200.534613 87.180233 54.868191 194.83514 12.431491 263.827045-77.625112 68.98371-90.052506 73.896485-170.689202 19.024197-225.557394z m-39.613597 186.648549c-50.963376 34.68853-63.112146-22.634-70.516136-10.419671-12.341348 20.355849 6.256719 70.171954-13.156729 78.878915-42.354753 18.995514-88.368477 19.585539-128.891695-5.920733-28.272012-17.790881-63.566957-83.132009-16.635416-161.572503 64.697837-108.130204 191.385135-135.857263 244.532421-82.70588 44.210872 44.210872 40.248693 109.179137-15.332445 181.739872z" fill="#E4BA74" ></path><path d="M203.744921 240.852962c77.469412-130.436412 229.179489-163.88753 292.807907-99.767425 18.827521 18.958638 30.316612 41.10095 34.373031 65.685309 6.252622-41.584443-5.396267-78.28889-34.373031-107.474621-63.632515-64.124202-215.338495-30.673085-292.807907 99.767425-25.010488 42.104812-30.484605 81.066923-25.916011 113.256043 3.007487-22.187384 10.94004-46.255471 25.916011-71.466731z" fill="#F8E4B5" ></path><path d="M204.490647 432.684713c88.225069 55.527871 205.545726 21.593262 285.293288-82.5174 72.917208-95.174247 79.792633-184.698189 18.864397-245.614133-28.308889-28.317084-73.191733-41.019002-123.143052-34.840134-79.915555 9.88701-158.630574 64.611792-205.426901 142.822832C117.183394 317.670888 164.942608 407.797147 204.490647 432.684713z m-8.313611-210.524058c43.895372-73.363824 117.324754-124.650893 191.639174-133.845444 44.169898-5.461825 83.386047 5.289735 107.58525 29.493036 54.327335 54.323238 47.046268 132.792413-20.49516 220.956021-73.634252 96.116648-180.727815 128.215625-260.434404 78.055339-34.131285-21.482632-74.552068-100.64017-18.29486-194.658952z" fill="#6E6E96" ></path><path d="M263.567521 340.023292a4.048224 8.89544 30.56 1 0 6.971829 4.116562 4.048224 8.89544 30.56 1 0-6.971829-4.116562Z" fill="#E4A846" ></path><path d="M244.308258 325.777337a3.212356 7.068003 30.56 1 0 5.532301 3.266584 3.212356 7.068003 30.56 1 0-5.532301-3.266584Z" fill="#E4A846" ></path><path d="M349.451012 175.634271a15.934762 23.432991 32.046 1 0 24.867088-39.724655 15.934762 23.432991 32.046 1 0-24.867088 39.724655Z" fill="#6E6E96" ></path><path d="M411.278877 208.892936a15.934762 23.432991 24.526 1 0 19.454356-42.637405 15.934762 23.432991 24.526 1 0-19.454356 42.637405Z" fill="#6E6E96" ></path><path d="M215.434784 530.067455c-1.167757 0-2.269956-0.036877-3.302499-0.106532a10.243483 10.243483 0 0 1 1.425893-20.437797c1.196439 0.081948 30.181398 1.466867 39.117812-25.317792 13.480423-40.392101 59.186844-45.493356 61.12491-45.690031a10.243483 10.243483 0 0 1 2.10606 20.376336c-1.450477 0.159798-34.553316 4.097393-43.797035 31.795771-10.477034 31.406518-39.937291 39.380045-56.675141 39.380045z" fill="#6E6E96" ></path></symbol><symbol id="icon-crab" viewBox="0 0 1086 1024"><path d="M247.003239 1020.403133c0-66.406524 143.966552-120.235499 321.558987-120.235499s321.558987 53.828974 321.558987 120.235499" fill="#F5E3CE" ></path><path d="M603.014974 523.48425a11.48425 11.48425 0 0 1-11.484249-11.48425v-55.124398a11.48425 11.48425 0 1 1 22.968499 0v55.124398a11.48425 11.48425 0 0 1-11.48425 11.48425zM490.469329 530.374799a11.48425 11.48425 0 0 1-11.48425-11.484249v-62.014948a11.48425 11.48425 0 1 1 22.9685 0v62.014948a11.48425 11.48425 0 0 1-11.48425 11.484249z" fill="#6E6E96" ></path><path d="M79.516944 876.454956a5.97181 5.97181 0 0 1-0.440995-1.763981c-0.004594-0.078093 0.009187-0.142405 0.009187-0.215904a3.532555 3.532555 0 0 1 0.24806-1.387297c0.027562-0.078093 0.045937-0.142405 0.078093-0.215904a4.341046 4.341046 0 0 1 0.932521-1.263268l0.234278-0.215903c0.436401-0.385871 0.927927-0.753367 1.534296-1.102488l0.03675-0.022969c0.629337-0.362902 1.368923-0.716617 2.163632-1.065738l0.463964-0.202123c0.813085-0.339934 1.681294-0.689055 2.636784-1.051957l0.096467-0.03675c14.015378-5.218443 42.652503-12.889922 64.049957-54.834995 9.196587-18.025678 20.671649-25.853343 31.825152-27.966444 20.203092-10.207201 59.267915-16.891034 100.427466-14.396655 58.95095 3.569305 73.136295 22.008416 72.07515 39.48285-1.061145 17.456059-22.247288 43.006218-81.216613 39.432319-20.841616-1.258674-40.268373-5.682407-56.640319-11.626654a68.519626 68.519626 0 0 1-2.062571 2.710282c-0.463964 0.592587-0.932521 1.194362-1.428641 1.78695-0.67068 0.817679-1.364329 1.62617-2.094727 2.448442-0.67068 0.744179-1.387297 1.497546-2.108508 2.250913-0.679868 0.716617-1.336767 1.433234-2.067165 2.154445-1.437828 1.428641-2.972124 2.861875-4.607481 4.30889-0.569619 0.500713-1.203549 1.010614-1.80073 1.515921a114.557686 114.557686 0 0 1-6.178526 4.947415c-1.479171 1.116269-3.027248 2.237132-4.639637 3.367182-0.679868 0.477745-1.345954 0.950896-2.04879 1.433234-2.374943 1.607795-4.832572 3.210996-7.47395 4.832572-46.230995 28.24666-92.696269 20.979427-100.60662 9.297649l-0.032155-0.064312a13.840818 13.840818 0 0 1-1.180581-2.108508c-0.059718-0.133217-0.133217-0.284809-0.183748-0.427214z" fill="#E67878" ></path><path d="M265.396413 772.995649c-44.094925-2.673533-85.079914 10.014266-85.952717 24.268516-0.859022 14.258844 34.788089 19.514037 78.883013 22.18757 44.094925 2.682721 59.966157-0.280216 60.825179-14.534466 0.877397-14.254251-9.660551-29.25268-53.755475-31.92162z" fill="#FF8787" ></path><path d="M69.075464 881.255372l0.137811 0.312372c0.597181 1.336767 1.300017 2.600034 2.154445 3.863301l-0.326152-0.505307-0.40884-0.744179 0.211311 0.42262 0.229684 0.376684 0.16078 0.275622 0.179154 0.266434c12.536207 18.508017 66.815364 24.172048 116.101169-5.939654a195.884547 195.884547 0 0 0 7.951695-5.14035c0.519088-0.358309 0.992239-0.684461 1.442421-1.015207l0.716618-0.500714c1.768574-1.235705 3.445275-2.448442 4.965789-3.60146a133.727195 133.727195 0 0 0 6.706802-5.370035l0.597181-0.500714c0.413433-0.339934 0.88199-0.725805 1.373516-1.166799 1.754793-1.548077 3.459056-3.142091 5.071445-4.726918 0.693649-0.684461 1.304611-1.336767 1.846667-1.910979 0 0 0.477745-0.500713 0.440995-0.473151 0.712023-0.739586 1.552671-1.62617 2.393318-2.563284a95.521394 95.521394 0 0 0 4.001112-4.809604c0.744179-0.960083 1.511327-1.947729 2.191195-2.894031l-13.110419 3.909239c18.746889 6.798676 39.4461 11.052442 59.865096 12.297334 71.174785 4.30889 92.200149-30.943162 93.371542-50.204545 0.620149-10.184232-2.627596-19.601317-9.394116-27.231453-12.563769-14.189939-36.588819-22.169195-73.448666-24.401733-40.883928-2.485192-82.608504 3.642804-106.302808 15.600204l3.036436-1.038176c-11.387782 2.159039-27.557605 9.812143-39.910064 34.030129-17.828149 34.930493-40.805835 43.166997-54.53181 48.091443l-3.298277 1.198956 0.854428-0.28481s-0.698242 0.202123-0.799304 0.238873l-0.67068 0.284809 0.528276-0.206717c-1.120863 0.413433-2.149852 0.822272-3.165059 1.249487l-0.514495 0.225091-0.055124 0.022969a33.612102 33.612102 0 0 0-3.284496 1.635357l-0.312371 0.183748-0.303184 0.202122 0.445589-0.284809-0.252654 0.146998-0.229685 0.151593 0.569619-0.353715a20.428183 20.428183 0 0 0-3.380963 2.448442l-0.376684 0.330746-0.238872 0.238872c-1.410266 1.37811-2.526535 2.939968-3.312058 4.621262 0 0-0.289403 0.624743-0.339933 0.762555l-0.21131 0.652305 0.220497-0.610962c-0.744179 1.860448-1.102488 3.831146-1.065738 5.650251l0.032156-0.854428-0.0735 0.978458 0.059719 0.854428c0.110249 1.718044 0.523682 3.482024 1.226517 5.241411-0.078093-0.197529 0.041343 0.12403 0.234279 0.569619z m21.466359-7.230483l-0.018374 1.479171 0.055124-0.666087-0.009187-0.574212c0.018375 1.04277-0.179154 2.108508-0.482339 2.852687 0 0 0.08728-0.225091 0.110249-0.303184l0.078093-0.229685-0.454777 1.134644a7.294795 7.294795 0 0 1-1.626169 2.269288 1.685888 1.685888 0 0 1-0.28481 0.206716l0.289403-0.160779 0.280216-0.188342-0.445589 0.28481 0.252654-0.151593 0.229685-0.151592-0.62015 0.385871c0.068905-0.045937 0.339934-0.197529 1.368923-0.647712 0.661493-0.284809 1.359735-0.555838 2.13607-0.849834l0.271028-0.096468 0.261841-0.110248-1.267861 0.454776s0.385871-0.105655 0.477745-0.142405l0.376683-0.133217 3.031842-1.097894c15.820702-5.664032 45.275505-16.220354 67.242578-59.272509 6.523054-12.784267 14.506904-20.157155 23.735647-21.907355l1.58942-0.29859 1.447016-0.725805c16.652162-8.406471 52.345209-15.747203 94.556717-13.179324 39.400163 2.388724 53.029671 11.48425 57.646338 16.702692 2.751626 3.105341 3.918426 6.477117 3.665773 10.620634-0.803897 13.151763-19.853971 31.655185-69.057089 28.664687-18.246176-1.102488-36.717443-4.896884-53.415542-10.960568 0 0-8.199754-2.972124-8.282441-2.871062L208.609096 831.459666c-0.473151 0.666086-1.061145 1.428641-1.681294 2.214163a60.852741 60.852741 0 0 1-3.018061 3.62443c-0.592587 0.661493-1.267861 1.373516-1.888011 2.01204l-0.542056 0.574213c-0.468557 0.486932-0.868209 0.91874-1.267861 1.318391-1.309204 1.286236-2.705689 2.59544-4.129737 3.858708a31.949182 31.949182 0 0 1-0.84524 0.70743l-0.808491 0.675274c-1.272455 1.079519-2.462223 2.053384-3.629023 2.972124-0.601775 0.473151-1.240299 0.95549-2.035009 1.557264-1.313798 0.996833-2.75622 2.044196-4.272141 3.105341l-0.826866 0.578806c-0.395058 0.284809-0.767148 0.542057-1.093301 0.767148-2.590847 1.759387-4.823385 3.197215-7.023767 4.538575-42.000197 25.665001-80.628619 17.497403-85.249881 12.481083 0 0 0.055124 0.064312 0.133218 0.179154l0.339933 0.532869 0.40884 0.74418-0.211311-0.427214-0.229685-0.376684-0.156185-0.266434-0.169967-0.252654a2.283069 2.283069 0 0 1-0.206717-0.362902c0.064312 0.21131 0.266435 0.799304 0.33534 1.809918z" fill="#6E6E96" ></path><path d="M146.212871 907.935581c-36.685287 88.947809-90.780696 79.241322-73.140888 96.724943 11.470468 11.374001 68.294535 6.711395 118.724172-39.230197 50.443418-45.927811 50.535292-79.448038 39.662004-91.38247-10.8641-11.934432-55.014149-39.386382-85.245288 33.887724z" fill="#FF8787" ></path><path d="M234.678342 906.80553c-4.92904 15.636954-17.547933 35.564424-42.882187 58.624797-50.43423 45.932404-107.253703 50.590416-118.724172 39.230197-5.737531-5.677813-3.858708-8.502938 2.494379-12.756705 114.952744-0.004594 94.768027-94.777215 94.768027-94.777214l64.343953 9.678925z" fill="#E67878" ></path><path d="M189.56821 848.235858c-22.279444 3.904645-40.433746 22.509129-53.971379 55.321927-20.745148 50.296419-47.140547 66.72349-61.325892 75.55258-8.080318 5.025508-15.058148 9.375741-16.027419 17.956773-0.914146 8.14463 4.850947 13.86838 6.748145 15.742609 17.713306 17.557121 82.015916 8.962308 134.535686-38.894856 39.19804-35.688454 48.357878-63.177154 49.138807-79.948752 0.514494-11.098379-2.581659-20.915115-8.718842-27.658666-7.836852-8.604-27.272796-22.118665-50.379106-18.071615z m3.959769 22.623971c13.799474-2.411692 25.926842 7.06511 29.441022 10.933006 1.947729 2.13607 2.976717 6.288775 2.75622 11.11216-0.381277 8.19516-5.209256 30.846694-41.660263 64.036175-47.659636 43.415057-96.554976 44.301641-103.041281 39.432319 0 0.009187 0.050531 0.045937 0.133218 0.12403a7.248858 7.248858 0 0 1-0.836054-0.923333c1.300017 1.878823 0.946302 5.912092-0.666086 7.565823 0.83146-0.859022 4.115955-2.894031 6.752738-4.533982 16.371946-10.19342 46.855738-29.1654 70.421419-86.292651 10.188826-24.686543 22.881219-39.032667 36.699067-41.453547z" fill="#6E6E96" ></path><path d="M309.14681 789.445688c-81.827575 25.669595-148.128444 74.698153-140.525871 98.916138 7.593386 24.217985 87.174641 38.499798 168.993029 12.839391 81.813794-25.678782 97.335905-71.298815 89.737926-95.535175-7.597979-24.227173-36.39129-41.889949-118.205084-16.220354z" fill="#E67878" ></path><path d="M269.071373 806.102443c-61.059458 19.155728-110.538199 55.739954-104.86498 73.806975 5.668626 18.085396 65.046789 28.74278 126.106248 9.587051 61.064052-19.160322 72.640175-53.195044 66.966956-71.298814-5.659438-18.057834-27.157953-31.246346-88.208224-12.095212z" fill="#FF8787" ></path><path d="M414.030164 773.211552c-23.10631-12.076837-58.537517-10.345012-108.319441 5.268974-67.821384 21.278018-128.720062 59.065792-144.8072 89.86655-4.391577 8.406471-5.480284 16.298447-3.238558 23.446243 2.572472 8.19516 9.283867 15.182178 19.945845 20.754336 30.235732 15.79314 96.086419 20.735961 163.448433-0.395058 94.859901-29.762581 105.099258-84.914541 97.257812-109.927237-4.014894-12.775079-12.412177-22.80772-24.286891-29.013808z m-10.639009 20.359278c6.541429 3.417713 10.795195 8.507532 13.000171 15.535893 6.353087 20.249029-10.303669 58.569673-82.213446 81.133926-60.747086 19.050073-120.524902 15.228115-145.937249 1.952322-5.641063-2.944562-8.190567-5.751312-8.663718-7.267233-0.202123-0.629337-0.068905-2.581659 1.676701-5.930466 11.23619-21.512296 64.63795-57.673901 131.32469-78.579829 53.64982-16.845097 78.997856-13.018545 90.812851-6.844613z" fill="#6E6E96" ></path><path d="M135.059368 547.555237s0.307778 42.753564 39.933033 82.388006c39.629848 39.625255-2.480598 95.360614 108.980934 146.134778 92.397678 42.096665 92.880017-58.202177 52.014463-99.06773s-133.754757-49.533865-133.754757-86.692303c0.004594-52.009869-67.173672-130.40595-67.173673-42.762751z" fill="#E67878" ></path><path d="M123.575119 547.637923c0.013781 1.938541 0.83146 47.949039 43.29562 90.431575 11.78284 11.773653 15.030586 25.756875 18.79742 41.958854 7.40045 31.83434 16.606225 71.455001 93.546103 106.514117 51.619405 23.510556 74.803808 4.708542 84.027957-8.585625 19.275164-27.791884 10.15667-79.769597-19.13276-109.063621-19.812627-19.808034-49.905955-32.279929-76.462133-43.281839-26.510242-10.992724-53.925442-22.343756-53.925442-35.293396 0-37.838305-32.642831-93.683914-61.969011-93.683914-12.853172-0.009187-28.177755 8.829091-28.177754 51.003849z m67.178266 42.670878c0 28.28341 33.079232 42.000197 68.106193 56.507101 24.576294 10.184232 52.43249 21.723606 69.011152 38.311457 21.002396 20.993208 29.32618 61.234019 16.50057 79.72366-11.980369 17.267718-40.001938 7.89657-55.634298 0.771741-66.649991-30.359762-73.7886-61.08702-80.697525-90.808258-4.180267-17.979741-8.498345-36.570444-24.925415-52.992921-35.881389-35.890577-36.565851-73.976942-36.570444-74.349031 0-23.574867 5.291942-27.920507 5.347066-27.94807a0.523682 0.523682 0 0 1-0.197529 0.064312c0.698242-0.08728 3.84952 0.693649 8.966902 5.236818 14.235876 12.6143 30.093327 42.601972 30.093328 65.483191z" fill="#6E6E96" ></path><path d="M354.422315 705.289107c-4.428327-10.643602-10.680352-20.543026-18.429923-28.28341-40.865554-40.874741-133.754757-49.538459-133.754758-86.696896 0-18.039459-8.080318-39.239384-18.641234-55.602143-19.987188 7.372888-31.54953 17.359592-26.661833 28.209911 0 0 24.328234-8.562656 30.901818 30.911006 6.578178 39.469069 108.296473 93.004046 123.285716 143.328028 7.10186 23.809146 26.974205 3.720897 43.300214-31.866496z" fill="#FF8787" ></path><path d="M204.47048 508.013478a58.091928 35.624142 88.957 1 0-71.23648 1.296917 58.091928 35.624142 88.957 1 0 71.23648-1.296917Z" fill="#FF8787" ></path><path d="M139.942471 473.729887a74.574123 74.574123 0 0 0-4.938227 15.627767c-0.032156 1.153019-0.018375 2.3336 0.055124 3.55093 0 0 3.436087 32.362615 29.514521 23.657554 26.083028-8.709655 6.173933 68.565563-24.824353 24.645199 6.670052 15.503737 17.750056 25.605283 30.130077 25.375598 19.674816-0.344527 35.146397-26.652646 34.558403-58.725859-0.395058-21.97626-8.23191-40.957428-19.449725-50.622571-19.518631-0.601775-36.878222 4.630449-45.04582 16.491382z" fill="#E67878" ></path><path d="M167.973227 461.905704c3.518774-0.064312 7.074298 1.612389 10.56551 4.974976 8.581031 8.273253 14.102658 24.052612 14.41503 41.177926 0.312372 17.129907-4.630449 33.102201-12.908297 41.678638-3.367182 3.500399-6.862988 5.296536-10.381761 5.360848-11.392376 0.21131-24.498201-19.481881-24.985133-46.152902-0.312372-17.129907 4.635043-33.102201 12.908296-41.678639 3.371776-3.491212 6.862988-5.296536 10.386355-5.360847z m-46.253963 47.457512c0.712023 39.009699 21.957885 69.185713 48.367065 68.707968 9.692707-0.179154 18.857138-4.460483 26.501054-12.380021 12.536207-13.00017 19.762097-34.700808 19.334883-58.041397-0.42262-23.345182-8.438627-44.765605-21.438797-57.297217-7.924132-7.639323-17.235562-11.580717-26.928268-11.406157-9.692707 0.174561-18.852544 4.455889-26.496461 12.380021-12.536207 12.995577-19.76669 34.696215-19.339476 58.036803z" fill="#6E6E96" ></path><path d="M838.483433 753.555111c0 142.367945-129.77202 229.864145-289.83949 229.864145-175.079681 0-194.639655-124.553577-289.825708-229.864145-90.9966-100.661744 129.762832-257.770871 289.825708-257.770871 160.081251 0 289.83949 115.402927 289.83949 257.770871z" fill="#D8D8ED" ></path><path d="M826.999184 753.555111c0 128.577658-114.461218 218.379895-278.355241 218.379895-121.733045 0-162.989063-60.972178-215.228617-138.169303-19.59213-28.95409-39.850346-58.882044-66.080372-87.914227-20.120405-22.256476-23.643773-48.578376-10.473635-78.235301 35.93192-80.922616 180.463497-160.347686 291.782624-160.347686 153.484698 0 278.35524 110.487668 278.355241 246.286622z m-278.355241-269.255121c-121.057771 0-273.058704 84.556232-312.775832 174.000162-16.946159 38.169052-11.957401 73.774819 14.428811 102.958594 25.150506 27.828633 44.949353 57.085908 64.100487 85.383098 51.591843 76.246229 100.326404 148.261661 234.246534 148.261661 82.172102 0 157.416905-22.68369 211.870623-63.866208 58.519142-44.260298 89.453116-105.632127 89.453117-177.482186 0-148.468378-135.174211-269.255121-301.32374-269.255121z" fill="#6E6E96" ></path><path d="M348.298913 678.360839c108.627219 13.817849 189.724396 75.194272 248.528348 68.115381 107.198579-12.903703 103.50065-57.880618 142.519536-68.634469 41.081457-22.564253 91.005787 14.901962 77.555434-21.907355-43.263465-93.950349-147.044331-160.150157-268.253694-160.150156-104.097831 0-220.90643 48.831029-272.015934 122.123509-21.085082 36.326978-40.718555 46.166683 71.66631 60.45309z" fill="#E67878" ></path><path d="M397.754686 625.459792c78.092897 8.773967 136.386947 47.746916 178.658173 43.254277 77.068502-8.19516 74.413343-36.745005 102.471661-43.575836 29.528302-14.32775 65.414285 9.467615 55.753735-13.895942-31.103941-59.635411-105.71022-101.667764-192.843518-101.667765-74.83137 0-158.804203 31.00288-195.544614 77.523279-15.168397 23.060373-29.280243 29.303211 51.504563 38.361987z" fill="#FF8787" ></path><path d="M346.847304 689.753214c52.290085 6.647084 98.263833 24.709511 138.821609 40.64965 42.882188 16.849691 79.921189 31.402532 112.522677 27.474918 73.209794-8.810716 98.525674-32.909265 117.010721-50.503135 9.421678-8.962308 16.220354-15.439425 27.194703-18.471267l1.300017-0.353715 1.180581-0.652305c16.064168-8.829091 34.540029-6.509273 49.373086-4.644231 13.643288 1.704263 25.416941 3.183434 32.523394-5.732937 7.019173-8.810716 2.586253-20.961052 0.914147-25.536378l-0.16078-0.445588-0.197529-0.427215c-46.67199-101.346205-156.066357-166.829396-278.685987-166.829396-111.741748 0-230.103017 53.433916-281.437612 127.038769l-0.275622 0.390464-0.238873 0.413433a357.44497 357.44497 0 0 1-5.985591 9.85808c-8.39269 13.49629-15.636954 25.159694-9.747831 37.548902 7.083485 14.888181 28.591188 21.663888 95.88889 30.221951zM286.049687 624.472146c47.361045-67.913258 157.798182-117.212844 262.594256-117.212844 113.684883 0 214.888684 60.241779 257.825996 153.470917l-0.358309-0.863616c1.584826 4.322672 1.543483 5.875342 1.53889 5.939654 0.064312-1.62617 1.938541-3.932207 3.527961-4.34564-2.012041 0.523682-8.980683-0.349121-14.065908-0.992239-16.206573-2.030415-40.70018-5.1036-63.291996 7.303983l2.476004-1.006021c-16.532726 4.55695-26.436742 13.987816-36.928753 23.97452-17.04722 16.229541-38.274707 36.437227-103.914084 44.329203-26.854769 3.229371-61.390204-10.335825-101.378361-26.055465-41.807262-16.427071-89.191276-35.045336-144.320267-42.050729-59.846721-7.607167-75.506644-13.670851-78.102084-17.405528a1.561858 1.561858 0 0 1 0.21131 0.656899c-0.059718-2.540316 4.80501-10.36798 8.360534-16.082543 1.943135-3.12831 4.143517-6.665458 6.343899-10.455261l-0.519088 0.79471z" fill="#6E6E96" ></path><path d="M925.093049 548.345353s-0.33534 47.365639-44.232735 91.253847c-43.901989 43.897395 2.751626 105.618346-120.70865 161.863606-102.352226 46.626053-102.880501-64.472577-57.618777-109.743488s148.151413-54.867151 148.151413-96.022107c0-57.609589 74.40875-144.439703 74.408749-47.351858z" fill="#FF8787" ></path><path d="M880.860314 639.590012c43.897395-43.901989 44.232735-91.249253 44.232735-91.249253 0-15.205146-1.819105-25.89928-4.901477-32.900078-21.999228 9.306836-48.486502 22.205945-48.486502 22.205945s-2.96753 26.404587 13.395229 34.186314c16.353571 7.795509 18.691765 40.511839-17.129907 55.312739-35.840046 14.800901-28.044537 93.46801-96.591726 112.159775-68.538001 18.696358-82.562567-9.338992-68.538001-42.836251 1.791543-4.276735 1.865042-5.999372 0.702836-5.696187-0.33534 0.316965-0.684461 0.629337-1.010614 0.946302-45.266318 45.266318-44.733449 156.369542 57.618777 109.743488 123.460276-56.231479 76.820442-117.975399 120.70865-161.872794z" fill="#E67878" ></path><path d="M913.6088 548.26726v-0.055124c0 0.431808-1.148425 43.548274-40.865554 83.27459-17.942991 17.938398-22.688283 38.361987-27.277389 58.105709-7.717416 33.207856-15.692079 67.541168-90.068672 101.419704-17.676557 8.057349-49.377679 18.595297-63.158779-1.272455-14.493123-20.905928-5.204662-66.268713 18.42533-89.889518 18.535579-18.535579 49.510897-31.37497 76.848004-42.698439 38.398737-15.91717 74.67059-30.943162 74.67059-61.440735 0-36.239698 31.880277-79.572068 44.434859-79.572068 1.139238-0.013781 6.991611 5.590533 6.991611 32.128336z m-74.40875 47.443732c0 15.154616-30.750227 27.892945-60.494433 40.222435-29.312399 12.150336-62.520254 25.913061-84.294391 47.678011-32.059431 32.059431-42.096665 88.888091-21.05752 119.220291 10.005078 14.419624 35.187741 34.76512 91.557031 9.090932 84.671075-38.573297 94.795589-82.135353 102.921844-117.134752 4.207829-18.112958 7.850633-33.772881 21.149394-47.062454 46.690365-46.690365 47.586136-97.170532 47.595324-99.297415 0-45.688938-16.303041-55.262209-29.973891-55.262209-31.894058-0.004594-67.403357 61.119176-67.403358 102.545161z" fill="#6E6E96" ></path><path d="M870.432042 474.342957a44.58645 72.704487 16.903 1 0 85.320485 25.927225 44.58645 72.704487 16.903 1 0-85.320485-25.927225Z" fill="#FF8787" ></path><path d="M955.751402 500.290659c6.527647-21.452578 6.385243-42.432005 0.904959-58.041397-37.994491 9.417085-78.703859 33.364042-78.703859 33.364042s-0.799304 17.263124 38.499798 20.970239c39.216415 3.697928-37.378935 80.013063-49.460366 26.188683 3.307464 17.226374 12.007931 30.176014 24.957571 34.117409 23.561086 7.161578 52.133899-18.181864 63.801897-56.598976z" fill="#E67878" ></path><path d="M895.3075 545.864755c-4.974977-1.506734-9.132275-5.342473-12.361646-11.396969-7.372888-13.808662-7.947101-35.573611-1.497547-56.796505 10.487417-34.51706 34.494092-53.498228 49.474147-48.950465 4.974977 1.511327 9.132275 5.347067 12.361647 11.401563 7.368294 13.808662 7.942507 35.573611 1.497546 56.796505-6.449555 21.222893-19.040886 38.982137-32.84036 46.350431-6.063684 3.238558-11.65881 4.111361-16.633787 2.59544z m71.445813-42.266632c8.282441-27.245234 7.078891-55.018743-3.210996-74.289313-6.109621-11.461281-15.090304-19.261383-25.945217-22.564254-30.079546-9.136869-64.394484 19.082229-78.120459 64.247486-8.282441 27.245234-7.083485 55.018743 3.201809 74.293907 6.127996 11.456687 15.099491 19.252196 25.954404 22.555066s22.656127 1.814511 34.122002-4.308891c19.270571-10.285294 35.716016-32.688768 43.998457-59.934001z" fill="#6E6E96" ></path><path d="M964.516181 292.444117c-1.300017 6.987017-6.118808 11.957401-10.74007 11.089192-4.630449-0.863616-4.43292-6.105027-3.132903-13.092045 1.304611-6.991611 3.224777-13.082857 7.85982-12.214647 4.635043 0.863616 7.322358 7.235077 6.013153 14.2175zM973.694393 184.42786c4.207829 18.278332-2.191195 35.357707-14.277219 38.146083-12.104399 2.792969-17.166656-10.083171-21.374485-28.356909-4.217016-18.278332-5.994778-35.031555 6.109621-37.829118 12.095212-2.792969 25.325067 9.761612 29.542083 28.039944z" fill="#FFFFFF" ></path><path d="M279.742537 216.092233S330.424828 337.471563 235.541958 358.124837c-94.88287 20.653274-119.261635 119.748567-36.244292 126.446181 83.021937 6.697614 177.160627-130.938819 129.799582-225.454193-47.356451-94.506186-54.127565-50.549073-49.354711-43.024592z" fill="#FF8787" ></path><path d="M329.106436 259.121419c-12.591331-25.118351-22.288631-40.392402-29.684489-49.230681 88.649219 129.992517-51.081942 243.355841-51.081941 203.891366 0-39.331258-14.382874-54.954431-14.497717-55.234646l-0.022969 0.004593c-20.97024 43.166997-46.442305 84.050925-64.348547 117.502248 7.699041 4.474264 17.566308 7.529074 29.840674 8.516719 83.012749 6.697614 177.156033-130.938819 129.794989-225.449599z" fill="#E67878" ></path><path d="M269.144872 220.515966l-0.004594-0.009188c0.24806 0.601775 24.691136 60.434715 5.039289 98.043335-7.699041 14.736589-21.140207 24.015863-41.081457 28.352316-63.043936 13.725975-98.14899 60.32906-95.659205 97.459935 1.520515 22.715846 18.328862 48.215473 60.940021 51.651561 41.315736 3.335026 87.165454-24.52117 119.656693-72.6953 29.454803-43.66771 50.530698-111.089443 21.333142-169.351337-28.95409-57.779556-43.525306-65.841499-53.957598-66.107934-6.30715-0.160779-12.012525 3.174247-15.269458 8.920965-4.226204 7.464762-4.267547 18.8847-0.096468 25.458284l-0.900365-1.722637z m49.690051 43.745803c24.760042 49.409835 5.985591 107.928977-19.84019 146.217465-27.442763 40.681806-66.208995 65.271881-98.764546 62.648878-24.534951-1.979885-38.692734-12.73833-39.86872-30.29545-1.80073-26.822613 27.369263-62.543223 77.628933-73.480822 26.661834-5.801843 45.698126-19.334883 56.589788-40.22703 24.594669-47.191078-3.045623-114.603623-4.230798-117.451716l-0.376683-0.900366-0.523682-0.826865c0.473151 0.744179 0.601775 1.240299 0.606369 1.244892-0.202123-0.780929-0.114842-2.563284 0.156185-3.224777-0.813085 1.975291-4.566138 3.500399-6.582771 2.66894 0.418027 0.169967 10.767632 4.869322 35.206115 53.626851z" fill="#6E6E96" ></path><path d="M308.039728 157.269907S154.00838 102.660003 66.333025 274.018788c-87.670761 171.35419 133.584791 319.859318 167.500077 145.211444 17.538746-90.367263-42.569816-149.235526 9.371147-218.039961 38.090959-50.457199 61.42236-28.641718 64.835479-43.920364z" fill="#E67878" ></path><path d="M311.880061 146.44715c-1.635357-0.578806-164.569296-55.905327-255.768018 122.344007C22.692877 334.099787 27.943476 405.031106 70.154984 458.533928c30.051984 38.090959 72.777986 57.044564 108.847717 48.29816 19.408382-4.708542 53.801412-22.068134 66.10334-85.406067 7.869008-40.534807 0.969271-75.07943-5.117382-105.554034-8.061943-40.360247-14.433405-72.240523 12.380021-107.759011 21.379079-28.324753 36.202948-30.699696 46.015091-32.275335 6.702208-1.074926 17.920023-2.875656 20.864585-16.064168l2.214163-9.926985-9.582458-3.399338zM234.039818 194.272159c-33.024108 43.745803-25.035664 83.747741-16.574069 126.09706 5.948841 29.780956 12.099805 60.581713 5.094413 96.674412-7.409638 38.159864-24.342015 61.486672-48.973433 67.467669-26.946643 6.536835-61.266174-9.614614-85.39688-40.199467-36.496945-46.258557-40.847179-107.961133-11.631248-165.056228 81.864324-159.998564 221.751671-113.216326 227.668356-111.14916l-7.391263-13.335511a0.647712 0.647712 0 0 1-0.009187 0.045937c0.24806-0.891178 1.405672-2.159039 2.29685-2.503566-0.647712 0.252653-2.802157 0.597181-4.377796 0.849834-11.801215 1.888011-33.7591 5.411378-60.705743 41.10902z" fill="#6E6E96" ></path><path d="M274.38169 161.289394s-120.134437-35.716016-188.516253 97.928493c-68.381815 133.649102 104.185112 249.474649 130.631041 113.257669 13.684632-70.481136-33.203262-116.395166 7.308577-170.063361 29.716644-39.345039 47.912289-29.197556 50.576635-41.122801z" fill="#FF8787" ></path><path d="M1026.848094 840.385225c0.252653-0.629337 0.404246-1.226518 0.440995-1.759387l-0.009187-0.215904a3.569305 3.569305 0 0 0-0.252654-1.391891c-0.027562-0.073499-0.045937-0.142405-0.078093-0.21131a4.359421 4.359421 0 0 0-0.932521-1.267862l-0.238872-0.21131a9.380335 9.380335 0 0 0-1.534296-1.107081l-0.03675-0.018375a21.1448 21.1448 0 0 0-2.163632-1.065739c-0.151592-0.073499-0.303184-0.133217-0.463964-0.206716a85.824094 85.824094 0 0 0-2.733251-1.084113c-14.015378-5.218443-42.652503-12.889922-64.049957-54.834995-9.196587-18.025678-20.671649-25.857936-31.825152-27.966444-20.203092-10.207201-59.267915-16.895628-100.427465-14.396655-58.95095 3.569305-73.136295 22.008416-72.07515 39.482849 1.061145 17.451466 22.251882 43.001624 81.216612 39.43232 20.841616-1.263267 40.272966-5.682407 56.640319-11.626655l0.08728 0.105655c0.615556 0.863616 1.295423 1.731825 1.979885 2.604628 0.468557 0.592587 0.932521 1.189768 1.433234 1.791543a81.441704 81.441704 0 0 0 4.203236 4.694761c0.679868 0.712023 1.336767 1.433234 2.062571 2.154446 1.437828 1.424047 2.972124 2.857281 4.612074 4.304296 0.565025 0.500713 1.203549 1.015208 1.800731 1.515921 1.272455 1.084113 2.586253 2.177414 3.978144 3.266121 0.70743 0.565025 1.451609 1.120863 2.200382 1.685888 1.479171 1.116269 3.027248 2.237132 4.639637 3.362588 0.679868 0.477745 1.345954 0.95549 2.053384 1.433234 2.370349 1.612389 4.827979 3.21559 7.473949 4.837166 46.226401 28.242066 92.691675 20.974833 100.602026 9.293055l0.032156-0.059718a13.872973 13.872973 0 0 0 1.180581-2.113102c0.045937-0.12403 0.12403-0.271028 0.183748-0.427214z" fill="#E67878" ></path><path d="M787.203962 768.861319c0.863616 14.258844 16.734848 17.212593 60.825179 14.534466s79.737441-7.942507 78.883013-22.18757c-0.863616-14.258844-41.857793-26.942049-85.952717-24.27311-44.094925 2.664346-54.637466 17.671963-53.755475 31.926214z" fill="#FF8787" ></path><path d="M1037.514665 844.629803c0.698242-1.759387 1.111675-3.527961 1.231111-5.241411l0.059718-0.854428c-0.004594-0.12403-0.078093-0.978458-0.078092-0.978458l0.036749 0.854428a14.621747 14.621747 0 0 0-1.065738-5.650251l0.220497 0.610962-0.21131-0.656899a15.990669 15.990669 0 0 0-3.651991-5.383816l-0.243466-0.234279-0.376684-0.330746a20.322528 20.322528 0 0 0-3.376369-2.448442l0.569619 0.349121-0.229685-0.146998a139.538226 139.538226 0 0 0-0.257247-0.151592l0.450182 0.284809-0.303184-0.197529-0.312372-0.188342a34.200095 34.200095 0 0 0-3.284495-1.630763l-0.055124-0.022969c-0.463964-0.202123-0.509901-0.229685-0.509901-0.229685a63.204716 63.204716 0 0 0-3.165059-1.249486l0.528275 0.21131-0.67068-0.284809a32.748486 32.748486 0 0 0-0.799304-0.243466l0.854429 0.284809-3.293683-1.203549c-13.725975-4.910665-36.703662-13.147169-54.531811-48.091444-12.352459-24.213392-28.53147-31.871089-39.910064-34.030128l3.036436 1.038176c-23.68971-11.961994-65.414285-18.08999-106.302807-15.600204-36.859847 2.223351-60.884897 10.216388-73.45326 24.401733-6.76652 7.634729-10.014266 17.051814-9.394117 27.236046 1.175987 19.252196 22.196757 54.513436 93.371543 50.199952 20.418996-1.240299 41.118207-5.484878 59.865096-12.297335l-13.110419-3.904644c0.675274 0.946302 1.442422 1.933948 2.195788 2.889437 0.473151 0.597181 1.028989 1.304611 1.62617 2.039602 0.753367 0.904959 1.552671 1.842074 2.374943 2.770001a132.160744 132.160744 0 0 0 2.838906 3.04103c0.542057 0.569619 1.153019 1.221924 1.842074 1.906385 1.616982 1.594014 3.321245 3.17884 5.071444 4.731511 0.486932 0.436401 0.960083 0.826866 1.373517 1.1668l0.59718 0.500713c1.488359 1.258674 2.907812 2.42088 4.313485 3.541743 0.753367 0.597181 1.497546 1.162206 2.393317 1.823698 1.515921 1.157612 3.192621 2.379537 4.961196 3.606055l0.716617 0.500713c0.45937 0.321559 0.923334 0.656899 1.442422 1.010614 2.926187 1.989072 5.443534 3.606054 7.947101 5.14035 49.285805 30.116296 103.564962 24.452264 116.096575 5.944248l0.179154-0.271029 0.16078-0.271028 0.234278-0.376683c0.009187-0.032156 0.206716-0.427214 0.206717-0.427214l-0.404246 0.744179-0.326152 0.505307a24.254735 24.254735 0 0 0 2.154445-3.858708l0.137811-0.312372c0.188342-0.445589 0.312372-0.771742 0.229685-0.565025z m-21.351517-8.470782a3.399338 3.399338 0 0 1-0.206716 0.367496l-0.169967 0.252653-0.16078 0.261841-0.225091 0.376684-0.215904 0.431807 0.413433-0.744179 0.339934-0.537463 0.128623-0.17456c-4.621262 5.01632-43.249684 13.183918-85.249881-12.485676a166.682398 166.682398 0 0 1-7.023767-4.533982l-1.0933-0.767148-0.826866-0.578806c-1.515921-1.056551-2.962936-2.108508-4.272141-3.109935-0.799304-0.601775-1.437828-1.079519-2.035009-1.552671a121.861669 121.861669 0 0 1-3.629023-2.976717 305.145697 305.145697 0 0 0-0.808491-0.67068c-0.316965-0.271028-0.624743-0.509901-0.849835-0.70743-1.428641-1.258674-2.815938-2.572472-4.125142-3.858708a63.328746 63.328746 0 0 1-1.267861-1.318392l-0.542057-0.574212a126.000592 126.000592 0 0 1-1.883417-2.016634 79.245915 79.245915 0 0 1-1.782355-2.071759c-0.445589-0.537463-0.872803-1.084113-1.244893-1.55267-0.620149-0.79471-1.212737-1.552671-1.6767-2.214164l-5.071445-7.097266c-0.08728-0.105655-8.287034 2.871062-8.287034 2.871062-16.698099 6.054496-35.164772 9.853486-53.415542 10.955974-49.203119 2.985905-68.248598-15.512924-69.057089-28.664686-0.252653-4.13433 0.914146-7.510699 3.670366-10.616041 4.612075-5.218443 18.241582-14.318562 57.646339-16.707286 42.206914-2.563284 77.904555 4.772854 94.556717 13.179325l1.442422 0.730398 1.58942 0.298591c9.233337 1.7502 17.217187 9.109307 23.740241 21.90276 21.957885 43.056748 51.412688 53.608477 67.242577 59.277103l3.027249 1.0933 0.376683 0.133218c0.096468 0.03675 0.477745 0.146998 0.477745 0.146998l-1.267861-0.454776 0.266434 0.105655 0.275622 0.096468c0.771742 0.284809 1.469984 0.565025 2.136071 0.849834 1.028989 0.454776 1.295423 0.601775 1.364328 0.643118l-0.620149-0.385871 0.234279 0.151592 0.252653 0.151592-0.450182-0.284809 0.284809 0.188342 0.289403 0.165373a1.515921 1.515921 0 0 1-0.284809-0.206717 7.492324 7.492324 0 0 1-1.62617-2.264694l-0.45937-1.139237 0.082687 0.225091 0.105655 0.307778a7.694447 7.694447 0 0 1-0.482339-2.852688l-0.009187 0.574213 0.059718 0.661493-0.018375-1.479172c0.055124-1.010614 0.257247-1.603201 0.33534-1.80073z" fill="#6E6E96" ></path><path d="M874.906879 837.991907c-10.873287 11.934432-10.790601 45.45466 39.65741 91.382471 50.43423 45.936998 107.258297 50.599603 118.728766 39.225602 17.639807-17.483621-36.455602-7.763353-73.140889-96.720349-30.240326-73.274106-74.390375-45.831343-85.245287-33.887724z" fill="#FF8787" ></path><path d="M936.021461 861.056874s-20.189311 94.777215 94.768027 94.781808c6.353087 4.25836 8.23191 7.078891 2.494379 12.756705-11.470468 11.36022-68.285348 6.702208-118.724171-39.234791-25.338848-23.060373-37.953148-42.978655-42.886782-58.624797l64.348547-9.678925z" fill="#E67878" ></path><path d="M866.413128 830.246929c-6.141777 6.743551-9.23793 16.555694-8.714249 27.658667 0.780929 16.771598 9.940766 44.269485 49.138807 79.948751 52.524364 47.852571 116.817786 56.451977 134.531093 38.894857 1.897198-1.87423 7.662291-7.588792 6.752739-15.74261-0.969271-8.585625-7.947101-12.931265-16.032013-17.961366-14.185345-8.829091-40.580744-25.256162-61.325892-75.547987-13.537633-32.812798-31.687341-51.417282-53.966786-55.32652-23.115497-4.042456-42.551441 9.463022-50.383699 18.076208z m83.113811 46.010498c23.570274 57.136438 54.049472 76.099231 70.421418 86.292651 2.636784 1.639951 5.921279 3.684147 6.757332 4.529388-1.616982-1.649138-1.966104-5.682407-0.67068-7.56123a7.547449 7.547449 0 0 1-0.840647 0.923333c0.091874-0.091874 0.133217-0.119436 0.133217-0.12403-6.486304 4.864728-55.381645 3.978144-103.04128-39.436912-36.460195-33.194075-41.274393-55.836421-41.660264-64.036176-0.225091-4.818791 0.808491-8.971496 2.760814-11.107566 3.518774-3.867895 15.641548-13.344698 29.441022-10.937599 13.817849 2.42088 26.510242 16.757817 36.699068 41.458141z" fill="#6E6E96" ></path><path d="M679.003957 769.605498c-7.593386 24.231767 7.928726 69.856393 89.737926 95.530581 81.822981 25.665001 161.399643 11.387782 168.993028-12.834797 7.597979-24.222579-58.698296-73.251137-140.530464-98.916138-81.8092-25.674188-110.607104-8.002225-118.20049 16.220354z" fill="#E67878" ></path><path d="M749.076254 782.150892c-5.673219 18.08999 5.902904 52.138493 66.966955 71.298815 61.059458 19.151135 120.437622 8.498345 126.106248-9.587051 5.668626-18.080802-43.805521-54.65584-104.86498-73.811569-61.050271-19.164916-82.553379-5.980997-88.208223 12.099805z" fill="#FF8787" ></path><path d="M668.043389 766.169411c-7.841446 25.003508 2.393318 80.155468 97.257812 109.927236 67.362014 21.131019 133.212701 16.188198 163.448433 0.390465 10.661977-5.572158 17.373373-12.545394 19.945845-20.749742 2.237132-7.152391 1.153019-15.025992-3.238558-23.446244-16.09173-30.800757-76.990409-68.602313-144.802606-89.86655-49.786519-15.618579-85.217725-17.34581-108.319441-5.268973-11.883901 6.196901-20.281185 16.234135-24.291485 29.013808z m125.72497-1.819106c66.691334 20.915115 120.093094 57.072126 131.32469 78.579829 1.7502 3.348807 1.883417 5.296536 1.676701 5.930467-0.473151 1.515921-3.022654 4.318078-8.663718 7.267233-25.40316 13.280386-85.190163 17.106938-145.937249-1.952322-71.909777-22.564253-88.566532-60.884897-82.213446-81.133926 2.200382-7.032954 6.458742-12.122774 13.000171-15.540487 11.824183-6.160151 37.181406-9.991297 90.812851 6.849206z" fill="#6E6E96" ></path><path d="M773.174803 125.136977s-69.222462 149.350368 48.435971 179.742286c117.663027 30.391918 143.378559 155.492145 39.230196 159.869941-104.139175 4.377796-215.242398-172.27293-151.46347-288.181164s70.127421-60.609275 63.797303-51.431063z" fill="#FF8787" ></path><path d="M810.539957 301.466144c-80.784805 75.102398 27.943476 138.683797-43.272652 75.906296-120.171187-105.926124-13.151763-266.292184-13.133388-266.319747-10.101546 9.265493-24.539544 28.788717-44.742636 65.510753-63.792709 115.912827 47.319702 292.563554 151.46347 288.185758 16.661349-0.702836 29.955516-4.511013 40.116781-10.514979 0.826866-43.488556-20.143374-98.948294-34.020941-130.699947-8.149223-4.823385-46.704146-18.434517-56.410634-22.068134z" fill="#E67878" ></path><path d="M762.751698 120.304404c-1.603201 3.449869-38.876482 85.2361-10.965161 144.2238 12.228429 25.839561 34.751339 43.153216 66.943987 51.467812 63.815678 16.482195 99.357133 64.082112 95.691361 98.727797-2.448442 23.156841-22.155414 37.208968-54.072441 38.554922-41.862386 1.759387-90.178921-31.397938-123.078999-84.473546-30.874256-49.818674-51.775591-125.022134-17.828149-186.697147 34.39303-62.524848 47.723947-66.594866 48.279785-66.737271-1.419453 0.367496-3.936801-0.762554-4.584512-2.039603 0.574212 1.148425 0.652305 4.68098 0.119436 6.09584 0 0 0.119436-0.321559 0.463964-0.803898l-0.555838 0.803898-0.413433 0.877396z m-63.429807 50.723634c-38.715702 70.347919-15.852858 154.541249 18.439111 209.872363 37.7694 60.935428 92.774361 97.455342 143.571494 95.323865 43.837677-1.846667 72.231336-23.933176 75.938452-59.084167 4.772854-45.096351-36.111074-103.57415-112.789112-123.37759-25.61447-6.614928-42.588191-19.376226-51.89962-39.005105-23.340589-49.221493 10.661977-124.043676 11.011098-124.797043l-0.969271 1.699669c4.901478-7.115641 5.324098-20.340903 0.909553-28.88059-3.348807-6.472523-9.228743-10.239357-16.137668-10.326638-11.475062-0.151592-29.597208 8.645343-68.074037 78.575236z" fill="#6E6E96" ></path><path d="M740.614659 50.213733s195.264398-60.866523 296.647352 157.637402c101.392142 218.503925-182.457163 393.565231-216.450541 173.531605-17.584683-113.850256 60.407153-184.570265-1.221924-273.123017-45.197412-64.931947-75.442332-38.780014-78.974887-58.04599z" fill="#E67878" ></path><path d="M768.668383 47.953632s156.709475-48.853998 238.091462 126.519681c81.368205 175.373678-146.442556 315.885768-173.733727 139.276384-14.107252-91.373283 48.495689-148.133038-0.978458-219.206761-36.281041-52.110931-60.544964-31.117723-63.379277-46.589304z" fill="#FF8787" ></path><path d="M744.027778 61.1743l-0.018375 0.004594c7.588792-2.338193 187.055456-54.926869 282.834097 151.50022 34.273594 73.857506 25.706344 151.968777-22.913374 208.939842-32.872516 38.522767-76.728568 56.998627-111.714186 47.067048-31.678154-8.989871-52.441677-39.786034-60.053438-89.062651-7.111047-46.03806 2.13607-84.537858 11.070817-121.769795 12.458114-51.89962 24.222579-100.923585-14.222095-156.158232-31.310658-44.986102-57.87143-50.301013-72.134868-53.158294-2.223351-0.445589-5.26438-1.056551-6.114215-1.506733a3.270714 3.270714 0 0 1 1.226518 1.42864s-0.03675-0.096468-0.078093-0.321559l-7.882788 13.03692z m66.144683 53.649821c32.550957 46.773051 22.917968 86.889832 10.730883 137.673183-9.022026 37.55809-19.238415 80.127906-11.438313 130.640229 8.953121 57.963304 36.120262 96.192074 76.480509 107.648761 43.598805 12.375427 96.766287-8.920965 135.45902-54.256188 54.609903-63.994832 64.431234-151.28891 26.275963-233.516136C943.270319-22.01301 739.245736 38.610047 737.196946 39.248571l-9.711081 3.027248 1.832886 10.005079c2.696502 14.709027 14.943305 17.157469 23.055779 18.779044 12.651049 2.535722 31.756247 6.362274 57.797931 43.764179z" fill="#6E6E96" ></path><path d="M275.327992 711.986721s-3.647398 20.588963 48.34869 81.055834c61.146738 71.105879 153.576572 164.955167 302.885598 96.701974 0 0 39.106167-6.403618 12.798047-32.702549-26.317306-26.317306-34.13119-52.611644-34.131189-69.677238s-94.901244 6.693021-144.219206-26.413774c-62.561598-42.000197-179.99494-71.712248-185.68194-48.964247z" fill="#F0F0FF" ></path><path d="M488.172479 431.610253m-27.562199 0a27.562199 27.562199 0 1 0 55.124398 0 27.562199 27.562199 0 1 0-55.124398 0Z" fill="#6E6E96" ></path><path d="M605.311824 431.610253m-27.562199 0a27.562199 27.562199 0 1 0 55.124398 0 27.562199 27.562199 0 1 0-55.124398 0Z" fill="#6E6E96" ></path><path d="M121.792763 235.94161s-32.155899 27.562199-32.155899 87.280296 30.470011 38.541141 41.003365-9.527333c24.489014-111.76931-8.847466-77.752963-8.847466-77.752963z" fill="#FFFFFF" opacity=".31" ></path><path d="M977.185605 288.153602s38.003679-55.069273 2.898625-103.376621c-65.34538-89.903299-46.782239-11.23619-43.993863 37.89343 5.861561 103.528213 41.095239 65.483191 41.095238 65.483191z" fill="#FFFFFF" opacity=".31" ></path><path d="M825.720275 816.784271a35.601174 10.335825 19.426 1 0 6.875166-19.49485 35.601174 10.335825 19.426 1 0-6.875166 19.49485Z" fill="#FFFFFF" opacity=".3" ></path><path d="M253.797439 865.186166a10.331231 35.601174 73.375 1 0-5.911664-19.798726 10.331231 35.601174 73.375 1 0 5.911664 19.798726Z" fill="#FFFFFF" opacity=".3" ></path><path d="M609.905524 562.732821c0 17.87868-36.506132 19.412975-81.538172 19.412975s-81.538172-1.534296-81.538171-19.412975 36.506132-32.358021 81.538171-32.358022 81.538172 14.479342 81.538172 32.358022z" fill="#FFFFFF" opacity=".33" ></path><path d="M440.701185 806.336722c-8.199754 13.565196-32.064025 0.744179-60.632244-16.509757-28.563625-17.263124-51.008443-32.431521-42.808688-46.005904 8.204348-13.569789 38.003679-10.579291 66.567304 6.67924 28.563625 17.272311 45.077976 42.266632 36.873628 55.836421z" fill="#FFFFFF" opacity=".84" ></path></symbol><symbol id="icon-a-sharkanimal" viewBox="0 0 1088 1024"><path d="M972.298912 790.448083c-31.060997 45.726663-76.791953 32.988092-76.791952 32.988093 9.171943 27.429989-5.07311 65.113498-5.07311 65.113498-31.400063 62.950345-26.97504 101.711139-26.975041 101.711139-43.91116-21.906222-50.108766-110.930293-36.005348-139.205801s-16.193608-48.452065-16.193608-48.452065l23.66593-74.19531s42.675072 70.027806 105.136132 16.708644c52.332007-44.662255 108.260687-26.42996 108.260687-26.42996s-30.829231 5.223329-76.02369 71.761762z" fill="#B1CFE0" ></path><path d="M856.158166 762.872167c55.327804 67.735893 94.57359 12.64844 94.57359 12.64844 33.430165-50.50792 97.582262-56.834285 97.582262-56.834286-18.103535 6.05168-40.889612 23.095098-73.409879 73.598726-21.361142 33.176939-81.33715 38.09983-81.33715 38.099831s26.75615 6.425081-3.137431 58.164796c-29.902165 51.735423-26.979332 101.711139-26.979333 101.711139-35.855129-17.888937-58.490986-89.058407-40.456122-125.213974s-40.314487-85.337268-40.314488-85.337268c48.383394-0.639504 73.478551-16.837404 73.478551-16.837404z" fill="#88ADC2" ></path><path d="M1038.215009 717.94381a10.129053 10.129053 0 0 1 8.407972-9.249198c-3.588088 0.618044-36.417377 7.922979-82.710581 76.066609-26.38704 38.850925-64.143513 29.331333-65.688622 28.919304-3.61384-1.000029-7.485198 0.068672-10.068965 2.781197s-3.455037 6.635388-2.261869 10.193432c7.897227 23.610135-4.807008 57.984534-4.935767 58.315016 0.124467-0.321898 0.26181-0.63092 0.420613-0.944234-32.37434 64.890316-28.1725 105.685504-27.987946 107.389417a10.124761 10.124761 0 0 1 4.257636-9.455213 10.14622 10.14622 0 0 1 10.330775-0.768263c-37.88094-18.89755-43.078517-102.307723-31.46015-125.608835 14.318017-28.700413-6.588176-52.722577-19.640062-61.426695a10.129053 10.129053 0 0 1 4.030162 11.519651l23.670222-74.186726a10.137636 10.137636 0 0 1-18.313842 2.193198c0.87127 1.433518 21.786047 35.142662 57.130431 40.803772 21.172295 3.37349 42.447597-3.905694 63.237907-21.665872 47.121554-40.215772 96.492101-25.150952 98.573708-24.494281l-0.034336-0.008584a10.129053 10.129053 0 0 1-6.957286-10.373695z m11.79863 10.734221a10.129053 10.129053 0 0 0 1.450686-19.622893c-2.506511-0.811183-61.967483-19.446922-117.969126 28.357055-16.039097 13.687097-31.773464 19.429755-46.773905 17.077754-26.052266-4.090249-42.984094-31.099625-43.134312-31.344267a10.141928 10.141928 0 0 0-9.858659-4.794132 10.159096 10.159096 0 0 0-8.450891 6.983037l-23.661639 74.19531a10.184848 10.184848 0 0 0 4.000117 11.485316c2.33054 1.583737 22.498514 16.043389 12.785783 35.524647-16.983331 34.052501-8.716994 128.214062 40.541962 152.794182a10.137636 10.137636 0 0 0 14.596995-10.163388c-0.04292-0.36911-3.429285-37.159889 25.975011-96.101532 0.150219-0.300438 0.287562-0.622336 0.412029-0.944234 0.63092-1.682453 15.395301-41.404648 5.20187-71.903397a10.154804 10.154804 0 0 1-2.270453 10.18914 10.099009 10.099009 0 0 1-10.060381 2.776906c18.240879 5.090278 60.0876 3.87565 87.895282-37.044005 41.237261-60.71852 69.285295-67.452623 69.319631-67.465499z" fill="#6E6E96" ></path><path d="M600.910334 247.801262c149.236138-7.14184 272.771951 160.476811 256.106226 193.864056 0 0-100.784073-77.753354-198.065897-69.654404-91.839604 7.639709-117.222323-45.95843-100.56089-79.345675 16.652849-33.391538-49.52935-40.451831 42.520561-44.863977z" fill="#9FC1D4" ></path><path d="M723.519081 305.257883c136.128457 67.92474 133.497479 136.411727 133.497479 136.411727 16.665725-33.387246-106.870088-201.005897-256.106226-193.864056-10.802892 0.519329-19.343915 1.072993-26.176734 1.69962 18.498397 64.52979 113.75441 122.501448 113.853126 122.565828 0 0.004292 0 0 0 0-0.012876-0.034336-46.288912-107.342205 34.932355-66.813119z" fill="#C0DDED" ></path><path d="M564.329861 257.217847c-0.703883-1.012905-1.652409-2.403504-1.897051-2.909957 0.317606 0.656672 0.93565 2.957168-0.017168 5.686862-0.93565 2.661022-2.738278 4.017285-3.356321 4.30914 2.450716-1.176 11.798629-2.888497 42.434721-4.356351 102.646788-4.914307 187.99264 76.585938 222.229696 125.518704 20.451244 29.215449 23.940617 47.117262 22.404091 50.795481l0.008584-0.030043 18.313842-4.197548c-4.270512-3.291942-105.685504-80.534552-206.499621-72.14804-40.868152 3.399241-72.075076-6.107475-85.607662-26.08231-7.528118-11.116206-8.674074-24.464237-3.060176-35.713494 9.708439-19.498426-0.188847-33.932326-4.952935-40.872444z m-24.142339-6.983038c-4.261928 8.583943 0.969986 16.1979 4.090249 20.74739 4.661081 6.798483 6.261986 10.171972 3.227563 16.257988-9.450921 18.931886-7.648293 42.001232 4.691124 60.212067 10.935943 16.133521 39.468969 42.361758 107.754235 36.674896 91.324568-7.601081 188.662187 66.42255 189.627881 67.16506l11.71279 9.030308 6.601052-13.227856c9.030308-18.099243-5.553811-47.181642-19.386835-68.388272-47.185934-72.358346-144.97421-147.987174-248.178955-143.051407-44.572123 2.137402-55.250548 4.725461-60.139104 14.579826z" fill="#6E6E96" ></path><path d="M95.084335 449.841524c-7.14184-11.511067-12.914542-22.760324-17.318105-33.691976-17.197929-35.189874-39.606312-86.84375-30.395741-100.548014C61.705673 294.27902 91.487663 304.72997 91.487663 304.72997v0.017168c11.644118-12.609812 27.464325-23.464208 47.559335-32.202661 101.324861-44.065671 250.629671-101.857066 389.427734 41.863889 138.815231 143.733831 355.791554 560.527175 278.321471 481.752331-149.369189-151.910036-390.303297-79.487311-566.123906-203.782802-68.933353-48.731043-117.501301-97.419167-145.381948-142.205889v0.042919l-0.206014-0.373401z" fill="#D4DBDE" ></path><path d="M106.028862 443.055917c-6.695475-10.790016-12.184907-21.459857-16.318075-31.717669a13.227856 13.227856 0 0 0-0.373402-0.841226c-35.636239-72.916302-31.181172-87.676392-30.970866-88.268684 0 0-0.081547 0.223183-0.30473 0.553664 8.532439-12.691359 28.395683-6.163271 29.23691-5.880001A12.777199 12.777199 0 0 1 78.61604 304.72997a12.875914 12.875914 0 1 0 22.33542 8.75133c10.575418-11.45098 25.125201-21.253842 43.233028-29.12961 114.947578-49.984299 248.204707-92.320305 375.032462 39.001144 118.84898 123.059404 291.944188 444.030195 290.96991 478.202872 0.04292-1.343387 1.274716-4.828468 4.85422-6.957286 3.57092-2.120234 7.22768-1.540818 8.433724-0.931358-0.090131-0.04292-2.188905-1.145956-7.493783-6.536672-82.980975-84.388742-194.288962-102.196131-301.927313-119.402645-91.813853-14.691418-186.75226-29.876413-265.947716-85.86518-65.040535-45.97989-114.10206-93.873999-141.883991-138.501918a12.875914 12.875914 0 0 0-23.807566 6.802775c0-5.819913 3.905694-10.897315 9.528177-12.412381s11.558279 0.95711 14.485403 5.991592l-0.399153-0.686716z m2.13311 7.150425v-0.04292a12.871622 12.871622 0 0 1-23.807566 6.802775c29.580267 47.516416 81.062464 97.96854 148.879905 145.918444 84.084012 59.443804 182.0268 75.1095 276.746316 90.255867 108.295023 17.318105 210.589869 33.687684 287.639341 112.037621 5.764118 5.849957 21.05212 21.408353 33.365786 9.40371 7.476614-7.279184 10.511038-17.300937-18.644324-80.208362-17.670046-38.112706-43.649349-87.440334-73.139485-138.892487-71.890521-125.424281-147.210328-233.843771-201.465138-290.029968C387.882625 150.291963 222.671769 222.135273 133.9138 260.737263c-21.412645 9.309286-38.868093 21.180879-51.885642 35.275714a12.875914 12.875914 0 0 1 22.335419 8.734161 12.901666 12.901666 0 0 0-8.613987-12.167739c-14.554075-5.103154-43.366079-7.51095-59.06611 15.841667-7.416527 11.03895-9.704147 33.138311 29.511595 113.385301a11.373724 11.373724 0 0 1-0.373401-0.841227c4.686833 11.622659 10.850104 23.623011 18.322426 35.666283a14.421024 14.421024 0 0 1-0.407738-0.708176l0.416322 0.751095a12.880206 12.880206 0 0 0 14.485403 5.970133 12.88879 12.88879 0 0 0 9.523885-12.438133z" fill="#6E6E96" ></path><path d="M579.841046 201.023065c124.544427 128.956573 146.613744 306.777241 207.297928 441.085902 57.01884 126.175376 98.586583 123.492894 68.160798 152.880022-79.487311 76.761909-285.802377-349.654035-563.385628-435.351828-151.249073-46.696649-205.945956-74.989325-241.389057-133.815085C-0.394861 141.295991 16.575594 31.060997 81.659048 28.039449c121.428455-5.643942 296.36921-35.96672 498.181998 172.983616z" fill="#B1CFE0" ></path><path d="M42.503393 51.636708c124.540135-2.643854 296.622436-12.107651 502.044772 200.585284 134.570472 139.343144 176.807762 313.056395 280.686347 461.683073 1.802628 2.583767 0 0 1.703912 2.489344-11.064702-17.614251-23.734602-43.790984-37.322983-73.843368-60.684184-134.30437-82.753501-312.125037-207.302219-441.085903C380.509018-7.48949 205.585431 22.83758 84.1441 28.47723c-17.502659 0.815475-31.48161 9.425169-41.640707 23.159478z" fill="#C0DDED" ></path><path d="M322.228338 372.933688s-42.739451 27.700384-118.188017 20.502748C114.651432 384.91258 7.957315 302.184831 41.915393 207.830132" fill="#F0F0FF" ></path><path d="M316.391257 363.929132l0.034336-0.02146c-0.403445 0.257518-41.044123 25.55869-111.368075 18.846047-55.662577-5.304877-113.930381-39.597728-141.699436-83.388713-12.511097-19.725901-24.631624-50.98862-11.347972-87.899574l-20.189434-7.266308c-12.84587 35.679158-8.206249 72.564361 13.416703 106.65549 31.082457 49.014314 95.964189 87.363078 157.785745 93.260247 78.264099 7.46803 123.166704-20.96628 125.042295-22.176617l-11.674162-18.009112z" fill="#6E6E96" ></path><path d="M104.488044 50.76973c0 45.71808 50.980036 93.127196 50.980037 93.127196-73.551514-108.385154 42.872502-86.569063 42.872502-86.569064S104.488044 5.047358 104.488044 50.76973z" fill="#C0DDED" ></path><path d="M50.520796 225.817784c35.4431 58.82576 90.139984 87.118436 241.384764 133.815085 277.587543 85.702085 483.906901 512.113737 563.381336 435.35612 17.511243-16.901783 10.2106-18.953346-9.180527-45.280298 0 0-7.274892 51.739715-56.748446-3.008672-49.460679-54.748387-201.804204-387.264581-437.90126-483.095719-206.928818-83.989589-209.117723-137.905334-239.37183-200.353517-8.669782-17.918981-23.974952-32.945173-46.894079-31.824968C14.06479 50.846985 4.210424 148.95716 50.520796 225.817784z" fill="#9FC1D4" ></path><path d="M361.989161 190.284553m-22.494222 0a22.494222 22.494222 0 1 0 44.988444 0 22.494222 22.494222 0 1 0-44.988444 0Z" fill="#6E6E96" ></path><path d="M346.4651 576.252958C243.826896 558.067875 67.040593 382.912522 86.646319 386.384727c54.825643 9.712731 153.983058 48.28897 219.27682 34.949523 128.86215-26.322661 316.932045 228.577522 316.932045 228.577521 85.792217 86.933881-103.874292-43.095685-276.390084-73.658813z" fill="#E8EFF2" ></path><path d="M466.262607 635.267565c0.626628 28.610281-33.777815 53.877117-63.053352-18.326718-29.271245-72.199543-4.729752-157.322212-4.729753-157.322212 22.047857-47.125846 67.139309 147.030065 67.783105 175.64893z" fill="#DCE3E6" ></path><path d="M113.080571 36.417377c117.06352-7.124673 277.385821-16.884616 459.464124 171.648813 84.491749 87.474669 120.660192 197.091619 155.656927 303.09473 15.815915 47.915569 30.747683 93.165824 49.705321 135.119844 26.378456 58.392271 49.928503 90.212947 63.993294 109.209212 16.54555 22.365463 16.54555 22.365463 6.352118 32.211246-4.721169 4.558074-9.789987 6.571008-15.974718 6.33495-33.533173-1.283299-89.775166-64.598462-154.897248-137.905334-102.573825-115.458323-230.234223-259.166402-382.483325-306.172073-152.150387-46.975627-202.812817-74.78331-235.697902-129.36431C24.683128 163.292344 24.859098 99.204627 42.876794 65.516944c6.386453-11.944556 18.382514-26.38704 39.254371-27.357026l30.949406-1.742541z m-1.227504-20.223769l-30.666136 1.725373c-23.695974 1.098745-43.649349 14.609871-56.181906 38.039742C0.854102 101.118847 7.931563 174.760492 41.838137 231.049697c36.022516 59.78287 89.13137 89.504772 247.080211 138.270151 146.84551 45.331802 272.415718 186.692173 373.311381 300.274904 73.787573 83.066815 127.102441 143.081451 169.266769 144.690941 11.738542 0.446365 22.107945-3.588088 30.833523-12.008936 22.979215-22.189492 12.768615-35.98818-4.150337-58.838636-14.463944-19.54993-36.322954-49.082985-61.812972-105.505242-18.515565-40.975451-33.28853-85.740713-48.928474-133.128369-35.692034-108.166264-72.620156-220.015039-160.318008-310.820278C398.552466-1.257548 232.843741 8.828585 111.853067 16.193608z" fill="#6E6E96" ></path><path d="M505.941882 802.4141c62.422432 53.782694 6.927242-93.813911 76.852041-233.963946 27.442865-54.988738-102.556657-130.205537-102.556657-130.205537-136.059786-117.020601-36.709232 310.373913 25.704616 364.169483z" fill="#9FC1D4" ></path><path d="M505.941882 802.4141c48.782547 36.245699 27.528705-13.571214 37.580502-75.555865-0.004292 0.02146 0.004292-0.034336 0 0-21.399769 196.379152-69.62436-111.724308-77.688975-190.941224-13.880236-136.270092 61.967483-68.280973 61.967484-68.280974 0.93565-41.572035 12.850162 10.382279-3.849899-11.519651-25.455682-22.863332-43.709437-17.871769-43.709436-17.871769-12.62698-10.858688-23.219565-17.013375-32.005231-19.228032-3.128847-0.472117-6.223359-0.716759-9.304994-0.811182-69.834667 6.648264 9.369374 341.374822 67.010549 384.208697z" fill="#B1CFE0" ></path><path d="M488.168829 420.917929c-43.941203-28.614573-60.864447-16.601345-72.336887-3.279067-31.468734 36.550429-8.455184 153.22338 2.901373 201.684029 18.116411 77.332741 49.653817 166.764549 79.272712 192.293196 10.171972 8.768498 23.502835 18.133579 36.33583 12.678483 16.077725-6.83711 17.270893-28.331303 19.455507-67.341031 2.588059-46.254576 6.489461-116.157914 39.872414-183.069749 31.627537-63.392418-91.187225-144.678064-105.500949-152.965861z m-53.902869 12.58406c8.07749-9.38225 29.138194 1.970015 39.880998 11.210629 0 0-0.004292-0.004292 0 0 31.151129 18.043448 115.969068 81.822143 97.762525 118.3039-35.623363 71.401236-39.696444 144.321831-42.391802 192.567882-1.064409 19.034893-2.386336 42.717991-5.957256 47.177349 0.54508-0.678131 2.085898-1.300467 2.948584-1.180292-0.145927-0.017168-3.532292-0.553664-12.631272-8.390804-46.696649-40.241524-116.599987-316.726031-79.611777-359.688664z" fill="#6E6E96" ></path><path d="M513.787606 957.169713c10.82006 17.777346 6.274862 27.206807-2.970044 32.829289-9.25349 5.635358-19.725901 5.330628-30.537377-12.429549-10.82006-17.773054-19.339623-48.662372-10.090425-54.284854 9.25349-5.63965 32.777786 16.120645 43.597846 33.885114z" fill="#61A7D9" ></path><path d="M602.021954 831.376323c6.399329 10.506746 4.373519 15.708615-0.309022 18.545608-4.669665 2.849869-10.2106 2.270453-16.614221-8.249169s-12.099067-28.408559-7.42511-31.245552c4.665373-2.849869 17.940441 10.416615 24.348353 20.949113z" fill="#61A7D9" ></path><path d="M804.976407 163.429688c9.189111 5.918629 7.644001 13.8459 2.639562 21.61866s-11.575447 12.451009-20.777433 6.53238c-9.201987-5.918629-18.751623-20.992032-13.742893-28.764792 5.004439-7.77276 22.674485-5.304877 31.880764 0.613752z" fill="#61A7D9" ></path><path d="M952.225362 638.611011c6.403621 10.511038 4.373519 15.708615-0.30473 18.5499-4.669665 2.845577-10.214892 2.266161-16.618513-8.253461-6.395037-10.51533-12.094775-28.404267-7.420819-31.245552 4.661081-2.845577 17.940441 10.429491 24.344062 20.949113z" fill="#61A7D9" ></path><path d="M325.176922 780.559381c6.047388 9.923038 2.193197 16.021929-4.613869 20.155098-6.794191 4.150336-13.966075 4.772672-20.017755-5.163241-6.05168-9.935914-9.502425-28.017989-2.69965-32.159742 6.794191-4.150336 21.279594 7.214804 27.331274 17.167885z" fill="#61A7D9" ></path><path d="M131.231318 359.675789s-75.749003-59.418052-19.558514-40.232941c56.19049 19.185112 165.052053 55.825672 186.396027 52.851336 0 0-209.692847-70.671601-252.183365-147.420634 0.004292 0-17.073462 95.543576 85.345852 134.802239z" fill="#6E6E96" ></path></symbol><symbol id="icon-a-horseanimal" viewBox="0 0 1174 1024"><path d="M846.141668 545.783452s36.261528-165.445877 150.981877-105.115459c114.715627 60.330418 88.101488-58.332941 36.058475-110.380676 0 0 168.803339 146.354152 52.434953 271.543547-116.363663 125.194117-121.402216-67.465614-161.243148 50.059703l-78.232157-106.107115z" fill="#EDA4A4" ></path><path d="M857.082931 548.177591l-0.004722 0.009445c0.17472-0.816935 18.49201-81.514064 66.695901-103.892418 19.795328-9.194061 42.721454-7.07853 68.126717 6.280483 54.427708 28.62106 78.350211 17.66563 88.828702 3.437739 21.981692-29.844102-3.248852-95.274461-39.637878-131.644599a11.19626 11.19626 0 0 1-15.247881 16.381201c0.845268 0.731936 84.843192 74.66692 89.310363 158.542067 1.879423 35.345427-10.813765 67.951997-37.734844 96.913054-56.543239 60.83569-79.431587 40.138428-99.6283 21.868359-9.708777-8.764344-19.743384-17.840351-32.531015-14.511222-12.343747 3.211074-21.169479 16.31509-31.492138 46.730575a11.234038 11.234038 0 0 1 8.891842-7.47047 11.172649 11.172649 0 0 1 10.724044 4.429393l-78.227435-106.111836c1.912478 2.59247 2.620803 5.888543 1.926644 9.038229z m77.892161 107.311268c9.774888-28.828835 15.427323-32.021021 16.036483-32.290185a1.364707 1.364707 0 0 1-0.566661 0.075555c2.266641 0.330552 8.315738 5.803544 12.30597 9.416003 20.786983 18.794229 59.48515 53.790215 131.063772-23.233067 31.241863-33.607669 45.941972-71.781675 43.698943-113.450085-5.029109-93.423371-93.243929-170.923592-97.002775-174.177166a11.19626 11.19626 0 0 0-15.252602 16.381201c32.885178 32.885178 49.233323 86.505395 37.432625 102.522988-7.229639 9.822109-29.79688 6.091597-60.344584-9.97794-31.954911-16.796751-61.567626-19.068114-88.054267-6.743256-58.257386 27.105244-78.255768 115.617561-79.082147 119.371684a11.215149 11.215149 0 0 0 1.926645 9.047674l78.232157 106.107114a11.200982 11.200982 0 0 0 10.724043 4.429394 11.224593 11.224593 0 0 0 8.882398-7.479914z" fill="#6E6E96" ></path><path d="M910.05149 558.859135s23.204733-43.543111 55.693249-11.059317c32.483793 32.483793 180.693757 27.171355 114.98479-144.342509 0 0 95.586124 106.262946-18.657286 220.511078 0 0-55.457141 55.655472-101.639943-7.900187l-23.795005 7.191862-26.585805-64.400927z" fill="#966E6E" opacity=".2" ></path><path d="M210.906188 77.372722c-83.591817 50.007759-61.482627 180.04682-33.362117 206.703459 0 0 98.589423 30.368262 169.908326-43.146449 71.318903-73.528878 159.755665 18.010349 215.22225 208.615937 55.466585 190.600866 217.389725 15.068438 250.062405-49.894427-96.412504 61.534571-166.749195 100.624677-205.707081-76.711619-33.503782-152.488248-109.695962-267.879145-214.282539-288.892792-75.743574-15.214825-134.931228 12.287081-181.841244 43.325891z" fill="#EDA4A4" ></path><path d="M205.15931 67.76311c-45.32809 27.114689-59.249042 72.778053-62.946499 106.310168-5.057442 45.904195 7.328805 98.891642 27.61996 118.129754 1.260819 1.185264 2.762468 2.06831 4.415227 2.573582 4.292451 1.322207 106.017393 31.49686 181.250974-46.04586 17.845073-18.397566 36.809299-25.263599 56.373241-20.404488 50.465809 12.532634 102.815763 96.403059 140.045335 224.345478 17.089526 58.724881 45.757808 90.335073 85.216244 93.952254 76.706897 7.026586 163.849784-98.698033 185.614256-141.943647a11.200982 11.200982 0 0 0-16.027038-14.473445c-55.424086 35.37376-97.059441 59.41904-128.065195 46.555854-26.019146-10.794876-45.866418-48.81305-60.679859-116.231442C581.605818 155.028775 498.235943 43.821719 394.952685 23.067791 310.883929 6.176596 246.119395 40.638978 204.72487 68.036996c0.141665-0.099166 0.28333-0.184165 0.43444-0.273886z m185.378148-22.732516c94.311139 18.95006 171.154978 123.744412 205.55125 280.312613 16.725919 76.135514 40.237593 118.115588 73.972761 132.116815 41.026195 17.018693 87.511217-9.312115 148.696347-48.364444a11.19626 11.19626 0 1 1-16.027038-14.478167c-20.80115 41.366191-101.540778 135.379834-163.547565 129.699066-29.371885-2.686914-51.495242-28.899668-65.75619-77.901605-40.072317-137.722029-96.99333-225.13408-156.162094-239.829468-19.157835-4.759945-48.208613-4.018565-77.854384 26.543307-65.7798 67.80561-157.6543 40.520923-158.575122 40.237593 1.652759 0.505272 3.154408 1.388317 4.415227 2.573582-11.73931-11.125428-25.891647-52.935503-20.768095-99.411081 3.140242-28.488839 14.742608-67.149229 52.175234-89.541749l0.434439-0.273886C258.392309 59.381262 315.440821 29.938545 390.537458 45.030594z" fill="#6E6E96" ></path><path d="M261.995323 61.208741s-86.250398 31.49686-69.203371 106.777662c12.858463 56.807681 53.384109-28.602171 144.375563-48.048059 74.931361-16.017594 219.358869 35.567369 266.575827 277.654033 0 0 15.361212 181.841244 201.485463 10.369881 0 0-74.27498 137.87786-205.962078 88.313985C467.574906 446.721812 424.532345 187.139517 321.485196 207.303174S173.638839 281.228714 173.638839 281.228714s-96.577779-166.739751 88.356484-220.019973z" fill="#966E6E" opacity=".2" ></path><path d="M240.995843 639.409877c-5.524937 2.989132-6.677146 4.316062 0 0z m514.999639-185.302594c-36.185973-0.703603-108.642919 57.24212-158.447625 57.24212-85.976512 0-102.5466-46.168636-102.546599-124.906065 0-57.397952-95.213073 99.014418-181.61458 191.65391-22.184745 15.606765-40.705088 31.728247-49.918038 41.947018-1.624426 1.80859-1.591371 3.078854-0.424995 4.05162-10.856264 7.86241-17.944238 12.669577-22.047802 15.313991 14.435667-7.772688 58.554883-26.628305 70.303636 15.058993 1.751924 10.06294 1.803868 16.215925 1.954978 42.027295-0.590271 5.864933-0.330552 12.008473 0.552493 18.293679 1.69998 45.757808 8.306293 176.207698 31.82269 245.684955 10.199883 30.12271 7.744355 50.848305 72.527778 52.264955 0 0 41.27647 0.571382 61.652625-25.749982 12.730965-16.452033 31.265474-71.635288 46.603076-115.192565a325.310152 325.310152 0 0 0 71.130016 7.971019c25.556373 0 52.590785-1.869979 79.681863-5.524936 15.375379 33.947666 34.575714 90.793124 51.363021 107.575708 35.897921 35.888477 79.795194 30.505205 79.795194 30.505206 76.442455 0 108.241534-202.788781 118.526416-287.693362 4.419949-22.864737 6.96992-47.911116 6.96992-63.262884 0-90.821457-39.288438-205.919579-177.884067-207.260675z" fill="#D9B896" ></path><path d="M391.094674 631.901629s25.457208-32.167408 47.495565-10.133772 26.760526 44.071994 72.405002 44.071994h215.647245s59.0271-6.289928 59.027099-59.022378V467.716571h-29.891323l-279.840396 92.511993-84.843192 71.673065z" fill="#6E6E96" opacity=".15" ></path><path d="M511.354125 607.601353h193.608887c25.971924 0 47.22168-21.249756 47.22168-47.22168v-94.443359c0-3.980788-0.552494-7.824632-1.482761-11.52209-37.602624 4.287729-105.653786 56.930457-153.149351 56.930457-72.428612 0-95.600291-32.767124-101.101617-90.165075-18.718674 6.280483-32.318518 23.993335-32.318517 44.756708v94.443359c0 25.971924 21.249756 47.22168 47.221679 47.22168z" fill="#F0F0FF" ></path><path d="M511.354125 619.406773h193.608887c32.554626 0 59.0271-26.477196 59.0271-59.0271v-94.443359c0-4.717446-0.623326-9.567112-1.85109-14.421501l-2.531082-10.001552-10.251827 1.171098c-18.581731 2.120253-41.961185 13.821786-66.719511 26.212754-28.696615 14.364835-61.232352 30.642148-85.093467 30.642148-68.055885 0-84.644861-30.410762-89.34814-79.488253l-1.421372-14.78983-14.086228 4.72689c-24.139723 8.098518-40.365092 30.585482-40.365091 55.948246v94.443359c0.004722 32.545182 26.48664 59.0271 59.031821 59.0271z m-35.416259-59.0271v-94.443359a35.430426 35.430426 0 0 1 24.267221-33.56517l-15.502878-10.06294c6.781033 70.68141 40.530368 100.837175 112.850371 100.837175 29.437995 0.004722 63.102331-16.843973 95.652234-33.135453 22.841126-11.427646 44.407268-22.227245 58.828769-23.870559l-12.782909-8.835176c0.760269 3.003299 1.128598 5.822433 1.128598 8.627401v94.443359c0 19.530887-15.885373 35.41626-35.41626 35.41626h-193.608887c-19.526165 0.004722-35.41626-15.875929-35.416259-35.411538zM235.678681 629.54999c-5.378549 2.904133-10.45488 5.642991-10.473768 12.579855a11.224593 11.224593 0 0 0 5.827155 9.869331c6.016042 3.291351 10.445436 0.434439 16.036483-3.182741 5.05272-3.253574 6.629924-9.935441 3.565236-15.101493s-9.661556-7.017142-14.955106-4.164952z m-0.755547 0.453328c-2.554693 1.652759-3.433016 2.129698-3.44246 2.13442 5.246329-2.847467 11.404036-0.883045 14.497056 4.221618 3.097742 5.109386 2.021088 11.45598-2.937189 14.803997 0.250275-0.155832 1.364707-0.864157 3.26774-1.879423a11.200982 11.200982 0 0 1-11.385147-19.280612z" fill="#6E6E96" ></path><path d="M756.212701 442.906301c-19.582831-0.382496-44.473378 12.084028-73.292769 26.510251-28.762725 14.402612-61.359851 30.727147-85.36263 30.727147-77.221613 0-91.350339-38.29206-91.35034-113.709805 0-12.343747-4.023287-19.974771-11.956529-22.685295-18.043404-6.162429-38.844554 19.252279-96.31806 93.645313-28.79578 37.26735-61.430683 79.492976-92.729213 113.058146a11.144316 11.144316 0 0 1 1.74248-1.520538c-21.032536 14.799274-40.870364 31.49686-51.788016 43.595054-3.739957 4.150786-4.306617 8.216572-4.11773 10.903486a13.255126 13.255126 0 0 0 4.826055 9.260172 11.219871 11.219871 0 0 1-4.018564-8.976842 11.23876 11.23876 0 0 1 4.627724-8.688789c-11.092373 8.027686-17.845073 12.579855-21.566141 14.983439a11.200982 11.200982 0 0 0 11.399313 19.271168c12.967073-6.993531 30.849923-12.754576 42.140627-7.97102 5.732712 2.436639 9.680444 7.739633 12.074584 16.215925a12.617633 12.617633 0 0 1-0.259719-1.10971c1.553593 8.896564 1.63387 14.076783 1.789701 40.171483 0-0.406106 0.018889-0.802769 0.061389-1.19943-0.661104 6.459926-0.45805 13.519567 0.599715 20.990036a9.401836 9.401836 0 0 1-0.099166-1.152209c1.803868 48.52972 8.575457 178.464894 32.408239 248.867697 1.147487 3.385794 2.143864 6.714923 3.111909 9.935441 9.047674 30.179376 18.935894 48.595831 79.781028 49.927482 2.006921 0.033055 47.231124 0.306941 70.756965-30.094376 13.08985-16.928972 32.356295-73.009439 48.303056-118.328085a11.191538 11.191538 0 0 1-13.014295 7.21075 337.625566 337.625566 0 0 0 73.585543 8.235461c26.198588 0 53.506885-1.879423 81.17879-5.614658a11.205705 11.205705 0 0 1-11.706254-6.478814c15.200659 33.546281 34.750434 91.968943 53.653272 110.871782 39.288438 39.297882 87.067333 33.942943 89.074255 33.702113a9.501002 9.501002 0 0 1-1.364707 0.084999c82.444331 0 116.599772-189.949207 129.637678-297.539082-0.028333 0.254997-0.075555 0.509994-0.113333 0.774435 4.283006-22.227245 7.177695-48.506109 7.177696-65.397304 0-104.732963-49.644152-217.120561-188.872553-218.475823z m166.465866 218.485267c0 15.611487-2.719969 40.176205-6.776311 61.142631a6.417426 6.417426 0 0 0-0.10861 0.769714c-20.050325 165.563931-61.208741 277.838197-107.405711 277.838197-0.462772 0-0.906656 0.033055-1.359984 0.089721-1.539427 0.17472-39.175106 4.032731-70.525579-27.303575-16.810918-16.825084-35.156541-54.659094-49.082214-85.390964-2.035254-4.504948-6.790478-26.02859-11.701532-25.367486-26.675527 3.598292-52.992169 5.416327-78.189657 5.416327-22.765572 0-45.87114-2.59247-68.683933-7.701856a11.19626 11.19626 0 0 0-13.009573 7.206028c-14.879551 42.258681-32.748235 96.346393-44.898373 112.052324-16.485088 21.306422-52.279122 21.415032-52.633284 21.405587-48.860272-1.076654-51.953292-11.380425-58.724881-33.966554a300.962654 300.962654 0 0 0-3.348017-10.690988c-22.89307-67.612001-29.475772-194.964149-31.241864-242.511659a11.852642 11.852642 0 0 0-0.099165-1.152209c-0.812213-5.680768-0.972767-10.922375-0.50055-15.602043a11.333203 11.333203 0 0 0 0.061388-1.19943c-0.160554-25.905814-0.203053-32.871011-2.124975-43.883107a9.855165 9.855165 0 0 0-0.254998-1.104988c-5.340772-18.973671-16.480366-27.199688-24.890547-30.760202-22.756127-9.647389-50.593308 2.989132-61.506238 8.86351a11.205705 11.205705 0 0 1 11.394592 19.266445c3.94301-2.545249 11.059317-7.333527 22.538907-15.644543a11.205705 11.205705 0 0 0 0.604438-17.670352c1.803868 1.506372 2.979688 3.886344 3.154408 6.370204 0.198331 2.866356-0.9586 4.977165-1.600815 5.690213 7.385471-8.192961 24.404164-23.667506 48.048059-40.289537 0.632771-0.448606 1.218319-0.949156 1.747202-1.515816 32.006855-34.330161 64.981753-76.999671 94.070308-114.644794 28.451062-36.828188 63.867322-82.66155 74.350535-85.896236-2.139142 0.661104-5.846044-1.17582-6.615757-3.272462 0.018889 0.047222 0.420273 1.180542 0.420273 4.514392 0 81.698228 19.342 136.11177 113.747582 136.11177 29.29633 0 62.894555-16.825084 95.387793-33.097675 23.979169-12.003751 48.775273-24.423053 62.837889-24.149167 154.901276 1.492205 166.919194 150.448272 166.919194 196.07858z" fill="#6E6E96" ></path><path d="M345.62964 960.488966c10.199883 30.12271 7.744355 50.843583 72.523056 52.260233 0 0 41.281192 0.571382 61.657347-25.74526a283.712574 283.712574 0 0 0 23.568341-35.501259H342.786895c0.920823 3.074131 1.860534 6.091597 2.842745 8.986286z m358.658102-8.976842c8.207128 12.202082 16.518144 22.534186 24.300277 30.330485 35.897921 35.888477 79.795194 30.505205 79.795194 30.505205 27.44524 0 49.143602-24.933047 66.152851-60.83569h-170.248322z" fill="#CCCCE8" ></path><path d="M335.018929 964.082536c1.147487 3.385794 2.143864 6.714923 3.111909 9.935441 9.047674 30.179376 18.935894 48.595831 79.781028 49.927482 2.006921 0.033055 47.231124 0.306941 70.756965-30.094377 9.397114-12.140694 12.452357-23.856393 19.75755-36.865965 1.945533-3.466071 6.629924-26.604694 4.623003-30.028266s-5.690212 13.344847-9.666278 13.344847H342.782173c-3.541626 0-6.875477 1.671647-8.986285 4.519114s-2.753024 6.526036-1.737758 9.911831c1.104987 3.669125 2.044699 6.634646 2.960799 9.349893z m7.767966-1.369429H503.383106a11.191538 11.191538 0 0 1-9.770166-16.678697 272.176318 272.176318 0 0 1-22.656962 34.122385c-16.489811 21.306422-52.283844 21.415032-52.638006 21.405588-48.860272-1.076654-51.953292-11.380425-58.724881-33.966554a300.962654 300.962654 0 0 0-3.348017-10.690989 276.884319 276.884319 0 0 1-2.729413-8.613234c1.019988 3.390517 0.377773 7.064363-1.733036 9.91183a11.23876 11.23876 0 0 1-8.99573 4.509671zM694.999238 957.764275c8.617957 12.820686 17.254802 23.577785 25.679149 31.987966 39.288438 39.302604 87.067333 33.947666 89.074255 33.711557a10.223494 10.223494 0 0 1-1.364707 0.080277c29.475772 0 55.140755-22.614462 76.267735-67.229506a11.191538 11.191538 0 0 0-10.124328-15.993983h-170.253044a11.191538 11.191538 0 1 0-9.27906 17.443689z m169.421942-11.054595c-17.113137 36.115141-35.964031 54.427708-56.033245 54.427708-0.462772 0-0.906656 0.033055-1.359984 0.089721-1.539427 0.17472-39.175106 4.032731-70.525579-27.303575-7.286305-7.286305-15.214825-17.20758-22.921403-28.66356a11.205705 11.205705 0 0 1-9.297949 17.453133h170.253044a11.210427 11.210427 0 0 1-10.114884-16.003427z" fill="#6E6E96" ></path><path d="M634.201325 752.926072s32.649069 133.623187 70.086417 198.586052" fill="#CCCCE8" ></path><path d="M623.500893 756.236312c1.345818 4.353839 33.45656 135.56872 71.082794 200.866859a11.200982 11.200982 0 0 0 19.412833-11.186816c-36.365416-63.107053-68.778377-195.266368-69.104206-196.305244a11.200982 11.200982 0 0 0-21.391421 6.625201z" fill="#6E6E96" ></path><path d="M526.408397 871.816096s11.465424-27.048578 11.465424-71.843064" fill="#CCCCE8" ></path><path d="M536.721612 876.179379c0.505272-1.185264 12.353191-29.664659 12.353191-76.211069a11.19626 11.19626 0 1 0-22.401965 0c0 41.635355-10.483213 67.248394-10.5871 67.503391l0.014166-0.033055a11.200982 11.200982 0 1 0 20.621708 8.740733z" fill="#6E6E96" ></path><path d="M499.832036 476.188141s18.940616 65.959242-125.491614 167.934459c-52.944947 37.394848-17.920627 210.580359 0 248.659921 22.401965 47.599453 98.570534 42.5609 116.486439-20.168379 13.43929-47.042237 11.200982-119.702236 47.042238-119.702236s44.799208 82.892937 35.841255 91.850889h53.761882s-49.280545-116.48644-11.19626-134.407067c38.07484-17.92535 82.411275 45.021149 109.08208 93.494204 38.33456 69.699199 68.178661 25.679149 68.178661 25.679149s194.605264-185.42537 64.674813-342.224957c0 0 109.115135 76.163847 62.719835 288.973069s-91.841445 233.45454-91.841445 233.45454-120.287785-20.357266-150.089387-133.618465l-142.278921 0.047222s-32.087131 47.741118-56.911569 110.829282c0 0-101.824108 49.20499-129.977673-12.985962-28.148843-62.195674-40.539812-297.808245-40.539812-325.28654 0 0-5.251051-20.291156-35.751534-20.291156 0 0.018889 178.771835-95.713623 226.291012-152.237973z" fill="#6E6E96" opacity=".15" ></path><path d="M552.70615 506.074742s-35.41626 42.499512-35.416259 59.027099 181.803467 0 181.803467 0 18.888672 2.361084 18.888671-82.637939v-5.22744l32.719902-22.822238v119.263074s7.418526 36.289861-63.413993 36.289861h-175.933813s-51.877737-21.372532-43.646998-49.582763 66.110352-59.0271 66.110352-59.0271l18.888671 4.717446z" fill="#6E6E96" opacity=".15" ></path><path d="M555.818059 310.940595c63.409272 105.276013-15.266769 206.354018-145.1075 276.600989-129.840731 70.251693-228.845704 115.910335-325.102376-22.208356-35.128208-50.413865 12.80652-120.420005 47.065848-189.765043 34.24044-69.345037 58.219609-140.2295 123.139975-175.362429 129.850175-70.246971 236.599504 5.463548 300.004053 110.734839z" fill="#D9B896" ></path><path d="M241.463337 654.128874c36.464581-13.344847-137.632308-191.923073-161.125093-168.425565-9.458502 29.343552-10.813765 56.547961 5.274661 79.629919 49.903871 71.606955 100.549123 93.805867 155.850432 88.795646z" fill="#F0F0FF" ></path><path d="M245.311904 664.645142c7.494081-2.74358 12.107639-9.34517 12.339025-17.675075 1.100265-39.628434-110.923726-151.506037-155.699322-170.786649-12.957629-5.581603-22.907237-5.047998-29.541883 1.591371l-1.907756 1.912478-0.835824 2.573582c-11.829031 36.7243-9.623778 65.992297 6.7527 89.470916 48.553331 69.685033 101.323558 99.415802 166.050315 93.555592l1.45915-0.132221 1.383595-0.509994z m-150.514382-105.724619c-12.268192-17.594798-13.477067-39.760654-3.806067-69.784198l-2.738858 4.48606a4.061064 4.061064 0 0 1-2.073031 1.161653c7.834077-0.769713 40.435924 19.478943 85.523184 65.392582 44.874762 45.686975 64.443426 78.487154 63.550936 86.274009 0.099166-0.925545 1.213597-2.41775 2.356362-2.838023l2.838023-0.637493c-56.647127 5.132997-101.569111-20.791706-145.650549-84.05459z" fill="#6E6E96" ></path><path d="M103.160482 570.461502s123.031364 94.816411 61.51096 13.179571c-61.51096-81.632118-76.423566-90.018688-76.423567-90.018688s126.539935 67.777277 147.997467 144.451118c0.509994 1.841646 1.359984 3.645514 1.359984 5.539103 0.009444 36.360693-94.7928-10.705155-134.444844-73.151104z" fill="#6E6E96" opacity=".15" ></path><path d="M133.490966 496.049579s77.169669 36.304027 123.031365 89.829801c45.861695 53.521052 369.901584-231.97178 139.020625-397.054049 0 0 222.678553 43.429779 170.106657 253.684308l-2.238308 8.962674s-170.229433 195.493032-305.765098 195.493032c0.004722 0.004722-92.625325-131.054328-124.155241-150.915766z" fill="#6E6E96" opacity=".15" ></path><path d="M242.483325 570.910108s-55.679083-86.004845-106.461277-106.461277c0 0 105.120181-247.101606 249.344636-247.101606 57.119344 0 91.407005 97.980263 91.407005 97.980264S463.679118 164.945327 316.805527 188.480612c-174.375497 27.941068-209.328984 246.308281-220.393023 285.648663 0 0 98.764143 48.539165 146.070821 96.780833z" fill="#F7F7FF" opacity=".27" ></path><path d="M546.222614 316.720528c20.158935 33.45656 25.650816 67.7395 16.329257 101.894941-15.280936 56.014356-71.106405 112.510374-157.167917 159.075672-133.949017 72.475834-220.614966 110.338177-310.58171-18.770618-25.806648-37.021797 1.912478-89.947856 31.260752-145.985822 5.55327-10.596545 11.290704-21.556697 16.650364-32.408239a1826.959567 1826.959567 0 0 0 15.951484-33.442394c26.321364-56.193799 51.188301-109.275689 102.475767-137.032592 150.33494-81.325177 249.448523 47.50501 285.082003 106.669052z m-295.739936-126.365215c-57.780447 31.270196-84.172644 87.596216-112.104268 147.227753a1828.753991 1828.753991 0 0 1-15.753152 33.026843c-5.236884 10.615434-10.917652 21.457531-16.409534 31.940744-31.161586 59.489872-63.376216 121.005554-29.79688 169.190557 47.089459 67.569502 97.852765 97.446658 159.765109 94.018364 55.102978-3.050521 114.054523-32.762401 179.853212-68.367548 64.736201-35.02432 146.453318-93.44226 168.123346-172.87857 10.997929-40.294259 4.693835-80.446854-18.742284-119.352795-81.126846-134.685675-198.855216-177.600737-314.935549-114.805348z" fill="#6E6E96" ></path><path d="M327.515404 296.519094c7.305194 15.545377 3.999676 37.031241-7.399637 47.930004-11.385147 10.922375-26.557473 7.135196-33.881555-8.447958-7.314638-15.545377-4.009121-37.035963 7.404359-47.948894 11.399313-10.894042 26.552751-7.149362 33.876833 8.466848z" fill="#6E6E96" ></path><path d="M372.083225 978.291539a20.659485 10.034607 0 1 0 41.31897 0 20.659485 10.034607 0 1 0-41.31897 0Z" fill="#F0F0FF" ></path><path d="M756.939915 980.652623a18.888672 8.263794 0 1 0 37.777344 0 18.888672 8.263794 0 1 0-37.777344 0Z" fill="#F0F0FF" ></path><path d="M476.962576 258.486753c79.17659-50.050258 142.236422-43.108671 142.236422-43.108672s-0.330552 0.420273-0.873601 1.081377c3.036354 0.439162 5.416327 1.605537 6.969919 3.683291 12.003751 16.154537-31.548804 78.945204-62.327895 103.727141-51.032469 41.073417-85.428741 25.87748-105.606564 13.382624-1.572482-0.972767 0.269164 1.803868 0 0-23.71945-13.075683-36.596802-43.240892 19.601719-78.765761z" fill="#D9B896" ></path><path d="M499.477873 362.459447c-19.129502 0-34.325439-6.946309-44.846429-13.075683a12.490134 12.490134 0 0 1-6.507148-3.891066c-14.138171-8.991008-22.383076-22.090302-22.775016-36.398471-0.571382-20.838927 14.671776-41.224526 45.30448-60.590137 64.627591-40.851475 119.513349-45.26198 140.106723-45.26198 5.945209 0 9.359337 0.358885 9.732389 0.396662a11.819586 11.819586 0 0 1 7.149362 3.480237 20.276989 20.276989 0 0 1 7.121029 5.959376c20.791706 27.978845-39.699266 100.100517-64.38676 119.980844-24.238888 19.511998-48.090559 29.400218-70.89863 29.400218z m-36.573191-35.628757c0.245553 0.132221 0.486383 0.273886 0.665826 0.382495 8.754899 5.416327 20.739762 11.635422 35.907365 11.635422 17.287857 0 36.15764-8.136295 56.085189-24.1775 29.900768-24.073612 60.476805-73.410823 60.080143-86.741503a12.310692 12.310692 0 0 1-2.630247-1.057766 160.671765 160.671765 0 0 0-2.257197-0.018889c-18.539231 0-68.079496 4.056342-127.489091 41.611745-30.292708 19.148391-34.504881 33.267673-34.320716 39.987318 0.264441 9.708777 9.822109 16.069538 13.920951 18.355067l0.037777 0.023611z" fill="#6E6E96" ></path><path d="M563.477416 310.241714s81.778505-71.446401-18.704508-41.961185c-100.483012 29.489939-74.411923 63.243996-51.858848 71.895007 0 0-75.960794 5.312439-48.624164-42.405068 27.341353-47.712785 127.158539-89.919523 172.878569-71.85723l2.521638 4.613558c0.004722-0.004722-27.865513 67.078396-56.212687 79.714918z" fill="#6E6E96" opacity=".15" ></path></symbol><symbol id="icon-a-sheepanimal" viewBox="0 0 1053 1024"><path d="M269.607627 217.955289C275.83873 256.937164 226.502229 326.549738 164.699359 306.727669c-69.325177-22.22121-133.468875-11.495884-139.704142-50.481924-6.231102-38.98604 52.964368-80.650288 117.137223-90.692525 64.17702-10.046403 121.244086 13.416029 127.475187 52.402069z" fill="#E8AC89" ></path><path d="M248.427711 268.203963c-1.703557-12.266441 11.625004-19.097328-5.660473-29.980931-119.636328-75.360515-195.117634 10.996063-195.117633 10.996063 12.074843 39.415053 66.467866 29.243695 124.955257 56.408968 30.872279 14.344863 58.295793-6.885035 75.822849-37.4241z" fill="#F7CDAF" ></path><path d="M454.399792 816.886662c0.870522 56.837981-32.134327 103.425466-73.715271 104.046077s-75.997787-44.958901-76.868309-101.792718c-0.866356-56.837981 32.505027-59.53285 74.085971-60.157625 41.580944-0.616446 75.622921 1.06212 76.497609 57.904266z" fill="#E8AC89" ></path><path d="M444.432527 817.032443c0.4665 30.351632-9.663207 59.095506-27.09863 76.876639-10.81696 11.025219-23.537405 16.960594-36.803488 17.160522-13.257753 0.204094-26.1573-5.348085-37.303309-16.052585-17.972731-17.256321-28.981289-45.675312-29.447789-76.035274-0.71641-46.970681 21.542286-49.498942 64.272819-50.14038 41.909993-0.616446 65.659822 1.316195 66.380397 48.191078z m-66.684455-67.913182c-37.848947 0.583125-84.952914 1.291204-83.90329 70.179037 0.549803 36.003775 13.491003 68.762878 35.499789 89.892812 15.019622 14.428167 32.825746 21.896326 51.489896 21.613094 18.66415-0.274902 36.232859-8.284534 50.806807-23.158374 21.346523-21.779701 33.275585-54.917835 32.721617-90.91328-1.053789-68.883668-50.50275-68.150597-86.614819-67.613289z" fill="#6E6E96" ></path><path d="M641.370343 818.790147c1.920146 56.817155 37.174189 101.755231 78.738472 100.384888 41.560118-1.378673 73.698611-48.561778 71.778465-105.374768-1.928476-56.81299-36.36198-61.823696-77.917933-60.449188-41.568449 1.382838-74.514985 8.626078-72.599004 65.439068z" fill="#E8AC89" ></path><path d="M631.398913 819.123361c2.107579 62.152745 42.051609 111.464254 89.047281 109.910644 46.979011-1.557776 83.507598-53.401712 81.40835-115.566952-0.82887-24.382936-7.314048-41.855846-19.809573-53.422538-18.110182-16.752335-44.808955-17.327129-68.417168-16.552406-40.964498 1.366177-84.49058 8.451141-82.22889 75.631252z m82.907813-55.904982c24.332954-0.799714 42.842992 0.791383 54.122287 11.229312 8.44281 7.818034 12.862061 20.792555 13.491003 39.68579 1.732713 51.281637-26.14064 93.978849-62.144415 95.182584-36.012105 1.19124-66.713612-39.565-68.446324-90.850802-1.520289-45.154665 19.093163-53.789073 62.977449-55.246884z" fill="#6E6E96" ></path><path d="M1033.538251 507.443298c0-43.85513-23.312486-82.441313-58.620676-104.929094a149.571443 149.571443 0 0 0 11.945723-58.612346c0-85.506882-71.915916-154.840389-160.634148-154.840389-12.616316 0-24.878592 1.453646-36.657707 4.098532-24.986886-57.51274-83.91162-97.906609-152.645342-97.906609-55.221893 0-104.079399 26.094823-134.139469 66.172139-22.92929-22.321174-54.734568-36.157886-89.896977-36.157886-69.866649 0-126.513032 54.588787-126.513032 121.93967 0 1.357847 0.058312 2.694868 0.104129 4.04855-81.616609 64.493573-132.827438 157.322834-132.827438 260.49839 0 131.277993 39.723276 216.805701 104.945755 270.732224 27.431844 57.829293 88.285054 98.073216 159.005565 98.073216 28.577267 0 55.521786-6.605968 79.329927-18.260128 10.471251 0.749732 21.071621 1.287039 31.788618 1.645244 26.877876 16.910611 58.966386 26.765416 93.458201 26.765416 53.643292 0 101.509486-23.77482 132.910742-60.99066a398.782207 398.782207 0 0 0 45.03804-21.354854 130.111744 130.111744 0 0 0 52.631154 11.054375c69.870814 0 126.513032-54.592952 126.513032-121.931339 0-27.844196-9.692363-53.48918-25.986528-74.015164 47.128958-18.934887 80.250431-63.748007 80.250431-116.029287z" fill="#E4E4F2" ></path><path d="M1033.538251 507.443298c0-43.85513-23.312486-82.441313-58.620676-104.929094a149.571443 149.571443 0 0 0 11.945723-58.612346c0-20.480167-4.165175-40.010673-11.666656-57.908431a150.175393 150.175393 0 0 1-8.255377 25.774104c35.316521 22.487781-13.261918 69.116918 10.208844 106.307768 56.396473 89.372165-6.297745 143.761023-53.410042 162.691744-15.007126 14.85718-27.144447 14.644756 4.731639 74.015164 31.930233 59.466207 6.076991 82.695389-63.793824 82.695389-13.361882 0-50.069571-6.431031-66.101331-13.511829-40.235593-6.918356-64.926751 35.978784-80.591975 42.255703-31.401256 37.20751-50.115388 33.75458-103.762845 33.75458-34.487651 0-66.571996-9.85897-93.458202-26.769581-5.539683-5.47304-21.317367-12.004035-31.792783-1.641079-23.808142 11.64583-50.756825 18.255963-79.329927 18.255963-70.72051 0-131.569555-40.235593-159.005565-98.069051-48.070287-39.744102-82.262211-96.690378-96.931958-176.420162 0.71641 129.241222 40.28141 213.744297 104.908269 267.179331 27.436009 57.829293 88.285054 98.073216 159.005564 98.073215 28.573102 0 55.521786-6.605968 79.329928-18.255963 10.475416 0.745566 21.071621 1.282874 31.792782 1.641079 26.882041 16.910611 58.966386 26.765416 93.458202 26.765417 53.647457 0 101.509486-23.77482 132.910742-60.990661a397.316065 397.316065 0 0 0 45.033874-21.354854 130.145065 130.145065 0 0 0 52.63532 11.054375c69.870814 0 126.517198-54.592952 126.517197-121.931339 0-27.844196-9.696528-53.48918-25.990693-74.015164 47.112297-18.959878 80.23377-63.772998 80.23377-116.054278z" fill="#6E6E96" ></path><path d="M974.917575 402.510039c4.086037-1.503628 10.271322 12.316423 14.136605 10.446259a132.285965 132.285965 0 0 0-14.136605-10.446259 149.421496 149.421496 0 0 0 11.945723-58.612346c0-85.506882-71.915916-154.840389-160.625818-154.840389-12.616316 0-24.882757 1.449481-36.666037 4.098532-24.986886-57.51274-83.91162-97.906609-152.645342-97.906609-55.221893 0-104.087729 26.094823-134.139469 66.172139-22.92929-22.321174-54.730403-36.162051-89.892811-36.162051-69.866649 0-126.513032 54.588787-126.513033 121.93967 0 1.357847 0.066643 2.694868 0.10413 4.044385-26.294751 20.775894-49.407309 44.509063-68.696236 70.566399 0.074973 113.280271 37.778139 187.112167 99.655983 233.67466 26.049006 49.982103 83.832482 84.769646 150.991767 84.769647 27.136117 0 52.726953-5.710455 75.331359-15.777684 9.946438 0.633107 37.649019-202.606619 47.824542-202.302561 5.922879 3.390453 141.186945-113.788422 110.906121 24.245485-15.952621 72.703134-96.61957-12.378901-96.619569 82.753701 0 58.978881 14.278221 115.267059 56.833816 119.848753 124.859458 13.453516 126.192314-79.921382 168.981159-71.174515 14.869676-5.418893-13.620123 6.868374 0 0 15.21955 6.122808 32.142657 9.550747 49.982102 9.550747 66.359572 0 120.14448-47.170609 120.14448-105.383098 0.012496-24.041391-11.433406-61.757053-26.902867-79.504865z" fill="#FFFFFF" ></path><path d="M678.802772 439.530116c-27.877518 28.214897-72.419902-11.670821-134.618463-30.247502-118.016075-35.229052-70.378966-112.805441-42.501448-141.036999 27.877518-28.231558 97.011096-6.131138 143.469461 38.798607 46.46253 44.93391 61.540464 104.254336 33.65045 132.485894z" fill="#E8AC89" ></path><path d="M536.757802 396.599655c64.789301 24.133025 111.401777 75.543783 140.916208 41.218574-16.260844-99.71846-112.164004-127.841723-112.164004-127.841723s-32.567505 23.562396-39.090169 82.474635c3.311314 1.420325 6.739254 2.811493 10.337965 4.148514z" fill="#F7CDAF" ></path><path d="M1043.509681 507.443298c0-45.700303-23.624874-88.030978-63.198204-113.230288l3.794475 12.116494a158.893105 158.893105 0 0 0 12.73294-62.435976c0-90.817481-76.543425-164.703524-170.609742-164.703524a177.686375 177.686375 0 0 0-38.869416 4.344277l11.366764 5.722951c-27.411018-63.09824-90.925775-103.87114-161.804562-103.87114-56.067424 0-109.202564 26.228108-142.144936 70.162377l14.998796-1.149588c-25.828252-25.140998-60.236764-38.990205-96.890306-38.990206-75.256386 0-136.480297 59.124662-136.480297 131.811136 0 1.270378 0.041652 2.457453 0.083304 3.615372l0.024991 0.753896 3.740327-8.034623c-86.793921 68.587941-136.576096 166.348768-136.576095 268.216459 0 125.134359 36.511926 218.763333 108.52364 278.300349l-2.632391-3.382123c29.893463 63.019101 95.849012 103.733689 168.0315 103.733689 29.418633 0 57.596043-6.485178 83.745013-19.272265l-5.131496 0.995476c10.379617 0.737236 21.200742 1.299535 32.175979 1.65774l-5.019037-1.541115c29.435293 18.526699 63.606391 28.314861 98.806287 28.314862 54.726237 0 105.953728-23.516579 140.574664-64.53106l-3.911099 2.823989a408.062217 408.062217 0 0 0 46.166802-21.904657l-8.938466 0.416518a139.53337 139.53337 0 0 0 56.696365 11.90407c75.260551 0 136.488627-59.124662 136.488627-131.798639 0-29.23953-9.721519-56.929615-28.123263-80.100485l-4.086037 15.232045c52.514529-21.117438 86.464873-70.249845 86.464873-125.176011z m-98.060721 122.131268c15.606912 19.667957 23.862289 43.142885 23.862289 67.921513 0 61.79454-52.285445 112.068205-116.537438 112.068205-16.902281 0-33.242264-3.432104-48.561778-10.200515l-4.577527-2.02011-4.373434 2.424132a388.136019 388.136019 0 0 1-43.896782 20.817546l-2.311672 0.928834-1.595262 1.895155c-30.818132 36.516091-76.476782 57.450262-125.27181 57.450262-31.401256 0-61.869513-8.726042-88.105952-25.232632l-2.299177-1.44115-2.715694-0.095799c-10.716996-0.349875-21.284045-0.899678-31.409586-1.611923l-2.703199-0.191598-2.428297 1.18291c-23.379129 11.425076-48.582604 17.235495-74.910677 17.235495-64.485243 0-123.359995-36.266181-149.983795-92.408578l-0.937164-1.978458-1.695227-1.403664c-68.20891-56.383977-101.36787-142.465654-101.367869-263.155771 0-95.832352 47.049819-187.970193 129.082945-252.792815l3.9111-3.094725-0.170772-4.939898-0.029156-0.791384c-0.033321-1.032963-0.070808-1.999284-0.070808-2.932283 0-61.80287 52.281279-112.0807 116.541603-112.0807 31.388761 0 60.832384 11.837428 82.903647 33.325567l8.167909 7.955485 6.826722-9.105074c29.197878-38.948554 76.351827-62.198562 126.138167-62.198561 62.902476 0 119.219811 36.091243 143.486121 91.937913l3.273828 7.547297 8.092936-1.824347a157.147896 157.147896 0 0 1 34.441834-3.852787c83.078585 0 150.671049 65.035046 150.671048 144.977255 0 18.90573-3.756988 37.336631-11.166834 54.79288l-3.240507 7.634766 7.034981 4.481728c33.842049 21.554782 54.051479 57.679347 54.051479 96.636231 0 46.858221-29.064593 88.818197-74.027659 106.903387l-12.266441 4.931568 8.167908 10.304643z" fill="#6E6E96" ></path><path d="M715.697895 862.078813c1.707722 50.448602 33.013179 90.350981 69.920796 89.13475 36.895122-1.228727 65.430738-43.126224 63.731346-93.566497-1.707722-50.444437-32.288438-54.89701-69.187725-53.680778-36.907618 1.245387-66.167974 7.668088-64.464417 58.112525z" fill="#E8AC89" ></path><path d="M706.846897 862.36621c1.874329 55.196902 37.340796 98.977059 79.059191 97.602551 41.730891-1.387003 74.148449-47.416355 72.282451-102.613257-2.186717-64.647685-51.714816-63.014936-78.330285-62.136084-36.37864 1.216231-75.023136 7.501481-73.011357 67.14679z m73.602812-49.636393c39.602486-1.3037 58.695649 5.119 60.045166 45.208812 1.53695 45.537861-23.216687 83.449286-55.188572 84.50724-31.963555 1.057955-59.232957-35.129088-60.769907-80.666949-1.349517-40.073151 16.960594-47.745404 55.913313-49.049103z" fill="#6E6E96" ></path><path d="M403.309752 876.090462c1.711887 50.448602 33.013179 90.346816 69.920797 89.130585 36.899287-1.228727 65.426573-43.122059 63.735511-93.558166-1.707722-50.444437-32.284273-54.901175-69.18356-53.684943-36.907618 1.241222-66.176304 7.672253-64.472748 58.112524z" fill="#E8AC89" ></path><path d="M394.467085 876.38619c1.874329 55.188572 37.336631 98.972894 79.059191 97.594221 41.72256-1.387003 74.144284-47.416355 72.282451-102.604927-2.186717-64.656015-51.718981-63.014936-78.330285-62.144414-36.382806 1.216231-75.027301 7.505646-73.011357 67.15512z m73.602812-49.640559c39.602486-1.3037 58.687319 5.123166 60.045166 45.208812 1.541115 45.542026-23.220852 83.449286-55.188572 84.515571-31.963555 1.053789-59.224627-35.141583-60.774072-80.675279-1.349517-40.077316 16.956428-47.749569 55.917478-49.049104zM671.667827 432.632586c-13.245257 13.403534-33.471348 5.202304-68.100615-10.458755-16.677362-7.538967-35.574762-16.085907-56.513097-22.33367-39.031857-11.649995-61.719567-28.689727-67.425857-50.627705-6.76841-26.003189 11.491718-56.150727 29.185383-74.073476 6.147799-6.222772 15.381992-9.454948 27.436009-9.588233 30.580717-0.34571 71.54105 19.163971 101.938499 48.553447 27.215255 26.319742 44.325795 59.607823 44.642348 86.8564 0.149946 13.174449-3.711171 24.12886-11.16267 31.671992z m-19.547167-132.64417c-34.450164-33.317237-80.025512-54.580456-116.095929-54.163939-17.289642 0.195763-31.634506 5.568839-41.468485 15.531938-7.71807 7.809704-45.625329 49.003287-34.23774 92.775113 7.568123 29.081253 34.812535 50.810973 80.983502 64.597703 19.630471 5.860402 37.886434 14.115779 53.984836 21.396505 35.924636 16.240018 66.951027 30.276659 90.642543 6.30191 11.225147-11.366763 17.052227-27.165273 16.831473-45.691972-0.383196-32.784094-19.313918-70.445609-50.6402-100.747258zM259.761153 219.500569c2.636556 16.489929-8.08044 44.908919-30.576551 63.939605-13.145293 11.116853-34.47099 22.554424-61.411344 13.911686-25.249292-8.092935-49.423969-11.883245-70.753831-15.227881-38.952719-6.110312-59.407894-10.10055-62.173571-27.419348-1.374508-8.596922 1.524454-17.851941 8.613582-27.506818 17.976896-24.47457 58.258306-45.333767 100.230777-51.902248 37.594872-5.881227 74.785721 0.416518 97.061078 16.435781 10.771143 7.743061 17.34379 17.347955 19.00986 27.769223zM140.574664 155.802545C92.995867 163.249878 48.545117 186.716475 27.33188 215.58947c-10.167193 13.845042-14.38235 28.431486-12.183138 42.193225 5.160652 32.284273 39.265107 37.632358 78.746803 43.821809 20.609287 3.228011 43.96759 6.8892 67.729915 14.51147 27.865022 8.938466 56.45895 2.657382 80.512837-17.689499 25.736618-21.767206 41.430998-56.259022 37.31164-82.0123-2.507435-15.702711-11.837428-29.760177-26.97784-40.647945-26.790407-19.268101-68.621262-26.732095-111.897433-19.963685z" fill="#6E6E96" ></path><path d="M461.205688 213.773454c126.371416 56.529758 141.028668 215.706095 101.926003 380.134717-47.999479 201.740262-224.690378 220.341935-355.735121 175.399694-226.714653-77.73883-158.872279-214.943868-101.917672-380.113891 76.031109-220.500212 229.351209-231.950278 355.72679-175.42052z" fill="#E8AC89" ></path><path d="M426.064105 209.445836c89.034786 38.182161 108.432007 140.066513 89.7387 254.158993-3.036413 18.555856-96.894471 5.064853-101.813543 24.045557-4.694152 18.106017 79.204972 16.094237 72.253294 81.533305-56.979597 120.631805-183.709219 131.652859-279.587387 100.638964-148.167778-47.916176-141.332726-129.811851-107.190785-230.125932 6.555986-19.255605 57.591878-28.135759 65.255801-48.640916 2.561583-6.855878-38.344603-24.820279-35.791351-31.801113 66.651134-182.322215 193.618171-194.19713 297.135271-149.808858z" fill="#F7CDAF" ></path><path d="M227.914223 584.045036a22.92929 22.687709 0 1 0 45.85858 0 22.92929 22.687709 0 1 0-45.85858 0Z" fill="#6E6E96" ></path><path d="M208.046338 373.133058a39.456705 27.910839 90 1 0 55.821678 0 39.456705 27.910839 90 1 0-55.821678 0Z" fill="#6E6E96" ></path><path d="M335.646481 377.077479a39.456705 27.910839 90 1 0 55.821678 0 39.456705 27.910839 90 1 0-55.821678 0Z" fill="#6E6E96" ></path><path d="M457.098825 222.757736c150.154567 67.180111 117.378803 280.357945 96.319677 368.888745-18.026878 75.810354-55.596759 129.720217-111.639191 160.238456-62.569262 34.058638-146.809931 37.015912-231.121409 8.101266-72.544857-24.874426-117.624549-57.04624-137.800657-98.343953-30.788975-63.027432-2.657382-142.557287 29.914289-234.636816l12.145651-34.625101c32.280108-93.624809 80.637792-154.798737 143.719371-181.83489 72.236634-30.963913 147.797078-10.446259 198.462269 12.212293zM96.044776 386.007614l-12.091504 34.479321c-32.621652 92.229475-63.431454 179.33995-29.043767 249.739742 22.600241 46.254271 71.411929 81.720738 149.225733 108.398685 89.630406 30.738993 179.752302 27.290228 247.257297-9.459113 61.194754-33.321402 102.055123-91.529726 121.439849-172.996388 46.904038-197.179395 7.71807-339.832482-107.519833-391.384856-54.334711-24.303797-135.668088-46.175133-214.602324-12.349744-68.454655 29.339494-120.494354 94.466174-154.665451 193.572353z" fill="#6E6E96" ></path><path d="M460.789171 955.053854s41.147766-4.186001 31.880251-80.625297c-5.314764-43.792652-35.545605-47.087306-35.545606-47.087305s85.386092-23.778985 69.312681 68.59627c-16.065081 92.362761-45.587843 59.116332-65.647326 59.116332zM768.208259 807.860727s42.488953 5.260616 42.488952 57.812632-25.390908 76.78084-25.390908 76.78084 62.565097-4.948228 62.565097-75.031466c0.004165-70.070743-39.019362-59.562006-79.663141-59.562006z" fill="#6E6E96" ></path><path d="M454.22902 554.147408c-0.891347 11.466727-16.485764 19.609645-34.833361 18.185155-18.347597-1.428655-32.500862-20.20943-31.609515-31.671992s16.485764-11.279295 34.833361-9.854805c18.347597 1.42449 32.496697 11.870749 31.609515 23.341642z" fill="#FFFFFF" ></path><path d="M144.490919 495.256684a33.321402 20.825876 4.439 1 0 3.223749-41.526809 33.321402 20.825876 4.439 1 0-3.223749 41.526809Z" fill="#FFFFFF" ></path></symbol></svg>',function(c){var l=(l=document.getElementsByTagName("script"))[l.length-1],a=l.getAttribute("data-injectcss"),l=l.getAttribute("data-disable-injectsvg");if(!l){var h,t,p,i,F,M=function(l,a){a.parentNode.insertBefore(l,a)};if(a&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(l){console&&console.log(l)}}h=function(){var l,a=document.createElement("div");a.innerHTML=c._iconfont_svg_string_4552328,(a=a.getElementsByTagName("svg")[0])&&(a.setAttribute("aria-hidden","true"),a.style.position="absolute",a.style.width=0,a.style.height=0,a.style.overflow="hidden",a=a,(l=document.body).firstChild?M(a,l.firstChild):l.appendChild(a))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(h,0):(t=function(){document.removeEventListener("DOMContentLoaded",t,!1),h()},document.addEventListener("DOMContentLoaded",t,!1)):document.attachEvent&&(p=h,i=c.document,F=!1,z(),i.onreadystatechange=function(){"complete"==i.readyState&&(i.onreadystatechange=null,d())})}function d(){F||(F=!0,p())}function z(){try{i.documentElement.doScroll("left")}catch(l){return void setTimeout(z,50)}d()}}(window);]]></content>
      
    </entry>
    
    
  
</search>
